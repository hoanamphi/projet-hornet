"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * hornet-js-bean - Ensemble des décorateurs pour les beans hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var test_utils_1 = require("hornet-js-test/src/test-utils");
var user_1 = require("./model/user");
var adress_1 = require("./model/adress");
var userDTO_1 = require("./model/userDTO");
var expect = test_utils_1.TestUtils.chai.expect;
var _ = require("lodash");
var technical_error_1 = require("hornet-js-utils/src/exception/technical-error");
var adressDTO_1 = require("test/model/adressDTO");
var OtherUser_1 = require("test/model/OtherUser");
var bean_utils_1 = require("hornet-js-bean/src/bean-utils");
var ForeignUser_1 = require("./model/ForeignUser");
var user;
var user2;
describe("Test of BeanUtils.serialize* : ", function () {
    beforeEach(function () {
        user = new user_1.User('1', '2');
        user.list = [];
        user.list.push(new adress_1.Adress("my adress1"));
        user.list.push(new adress_1.Adress("my adress2"));
        user.list[0].id = 12;
        user.list[1].id = 13;
        user.adress = new adress_1.Adress("Object = my adress1");
        user.id = 10;
        user2 = new user_1.User('3', '4');
        user2.list = [];
        user2.list.push(new adress_1.Adress("my adress1"));
        user2.list.push(new adress_1.Adress("my adress2"));
        user2.list[0].id = 14;
        user2.list[1].id = 15;
        user2.adress = new adress_1.Adress("Object = my adress1");
        user2.id = 12;
    });
    it("should create a array of Flat object [no instance] ", function (done) {
        var array = [user, user2];
        bean_utils_1.BeanUtils.serializeObject(user_1.User, array).then(function (result) {
            expect(result).not.empty;
            expect(result.length).to.be.eq(array.length);
            _.map(result, function (item) {
                expect(item.constructor).to.be.eq(undefined);
            });
            for (var i = 0; i < result.length; i++) {
                expect(result[i].id).to.be.undefined;
                expect(array[i].id).to.be.exist;
                expect(result[i].name).to.be.eq(array[i].name);
                expect(result[i].password).to.be.eq(array[i].password);
                expect(result[i].adress.label).to.be.eq(array[i].adress.label);
                expect(result[i].list.length).to.be.eq(array[i].list.length);
                for (var j = 0; j < result[i].list.length; j++) {
                    expect(result[i].list[j].id).to.be.undefined;
                    expect(array[i].list[j].id).to.be.exist;
                    expect(result[i].list[j].label).to.be.eq(array[i].list[j].label);
                }
            }
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test object is null ", function (done) {
        bean_utils_1.BeanUtils.serializeObject(user_1.User, null).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test object is undefined ", function (done) {
        bean_utils_1.BeanUtils.serializeObject(user_1.User, undefined).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it.skip("should test object is primitive ", function (done) {
        bean_utils_1.BeanUtils.serializeObject(user_1.User, 2).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            expect(error).to.be.instanceOf(technical_error_1.TechnicalError);
            expect(error.args.message).to.be.equals('Cannot find @Bean for object : 2 .So, we cannot transform it to an object User');
            done(error);
        });
    });
    it("should test class is null ", function (done) {
        bean_utils_1.BeanUtils.serializeArray(null, [user, user2]).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test class is boolean ", function (done) {
        bean_utils_1.BeanUtils.serializeArray(false, [user, user2]).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test object like function ", function (done) {
        bean_utils_1.BeanUtils.serializeObject(user_1.User, function () {
        }).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test empty array with mapArray", function (done) {
        bean_utils_1.BeanUtils.serializeArray(user_1.User, []).then(function (result) {
            expect(result).to.be.an('array');
            expect(result).to.be.empty;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test empty array with serializeObject ", function (done) {
        bean_utils_1.BeanUtils.serializeObject(user_1.User, []).then(function (result) {
            expect(result).to.be.an('array');
            expect(result).to.be.empty;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test Flat object [no instance]", function (done) {
        bean_utils_1.BeanUtils.serializeObject(user_1.User, user).then(function (result) {
            expect(result.constructor).to.be.eq(undefined);
            expect(result.id).to.be.undefined;
            expect(result.name).to.be.eql(user.name);
            expect(result.adress.label).to.be.eql(user.adress.label);
            expect(result.adress.id).to.be.undefined;
            expect(result.list.length).to.be.eq(user.list.length);
            for (var j = 0; j < result.list.length; j++) {
                expect(result.list[j].constructor).to.be.eq(undefined);
                expect(result.list[j].id).to.be.undefined;
                expect(user.list[j].id).to.be.exist;
                expect(result.list[j].label).to.be.eq(user.list[j].label);
            }
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test class UserDTO ", function (done) {
        bean_utils_1.BeanUtils.serializeObject(userDTO_1.UserDTO, user).then(function (result) {
            expect(result.constructor).to.be.eq(undefined);
            expect(result.id).to.be.undefined;
            expect(result.name).to.be.eql(user.name);
            expect(result.adress.label).to.be.eql(user.adress.label);
            expect(result.adress.id).to.be.undefined;
            expect(result.list.length).to.be.eq(user.list.length);
            for (var j = 0; j < result.list.length; j++) {
                expect(result.list[j].constructor).to.be.eq(undefined);
                expect(result.list[j].id).to.be.undefined;
                expect(user.list[j].id).to.be.exist;
                expect(result.list[j].label).to.be.eq(user.list[j].label);
            }
            done();
        }).catch(function (error) {
            done(error);
        });
    });
});
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
describe("Test of BeanUtils.map* : ", function () {
    beforeEach(function () {
        user = new user_1.User('1', '2');
        user.list = [];
        user.list.push(new adress_1.Adress("my adress1"));
        user.list.push(new adress_1.Adress("my adress2"));
        user.list[0].id = 12;
        user.list[1].id = 13;
        user.adress = new adress_1.Adress("Object = my adress1");
        user.id = 10;
        user2 = new user_1.User('3', '4');
        user2.list = [];
        user2.list.push(new adress_1.Adress("my adress1"));
        user2.list.push(new adress_1.Adress("my adress2"));
        user2.list[0].id = 14;
        user2.list[1].id = 15;
        user2.adress = new adress_1.Adress("Object = my adress1");
        user2.id = 12;
    });
    it("should create a array of User", function (done) {
        var array = [user, user2];
        bean_utils_1.BeanUtils.mapObject(user_1.User, array).then(function (result) {
            expect(result).not.empty;
            expect(result.length).to.be.eq(array.length);
            _.map(result, function (item) {
                expect(item).to.be.an.instanceOf(user_1.User);
            });
            for (var i = 0; i < result.length; i++) {
                expect(result[i].id).to.be.eq(0);
                ;
                expect(array[i].id).to.be.exist;
                expect(result[i].name).to.be.eq(array[i].name);
                expect(result[i].password).to.be.eq(array[i].password);
                expect(result[i].adress.label).to.be.eq(array[i].adress.label);
                expect(result[i].adress.id).to.be.eq(0);
                expect(result[i].list.length).to.be.eq(array[i].list.length);
                for (var j = 0; j < result[i].list.length; j++) {
                    expect(result[i].list[j].id).to.be.eq(0);
                    expect(array[i].list[j].id).to.be.exist;
                    expect(result[i].list[j].label).to.be.eq(array[i].list[j].label);
                }
            }
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test object is null ", function (done) {
        bean_utils_1.BeanUtils.mapObject(user_1.User, null).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test object is undefined ", function (done) {
        bean_utils_1.BeanUtils.mapObject(user_1.User, undefined).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it.skip("should test object is primitive ", function (done) {
        bean_utils_1.BeanUtils.mapObject(user_1.User, 2).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            expect(error).to.be.instanceOf(technical_error_1.TechnicalError);
            expect(error.args.message).to.be.equals('Cannot find @Bean for object : 2 .So, we cannot transform it to an object User');
            done(error);
        });
    });
    it("should test class is null ", function (done) {
        bean_utils_1.BeanUtils.mapArray(null, [user, user2]).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test class is boolean ", function (done) {
        bean_utils_1.BeanUtils.mapArray(false, [user, user2]).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test mapArray is boolean ", function (done) {
        bean_utils_1.BeanUtils.mapArray(false, [user, user2]).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test object like function ", function (done) {
        bean_utils_1.BeanUtils.mapObject(user_1.User, function () { }).then(function (result) {
            expect(result).to.be.undefined;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test empty array with mapArray", function (done) {
        bean_utils_1.BeanUtils.mapArray(user_1.User, []).then(function (result) {
            expect(result).to.be.an('array');
            expect(result).to.be.empty;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test empty array with mapObject ", function (done) {
        bean_utils_1.BeanUtils.mapObject(user_1.User, []).then(function (result) {
            expect(result).to.be.an('array');
            expect(result).to.be.empty;
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test class User", function (done) {
        bean_utils_1.BeanUtils.mapObject(user_1.User, user).then(function (result) {
            expect(result).to.be.instanceof(user_1.User);
            expect(result.id).to.be.eq(0);
            expect(result.name).to.be.eql(user.name);
            expect(result.adress.label).to.be.eql(user.adress.label);
            expect(result.adress.id).to.be.eq(0);
            expect(result.list.length).to.be.eq(user.list.length);
            for (var j = 0; j < result.list.length; j++) {
                expect(result.list[j]).to.be.instanceOf(adress_1.Adress);
                expect(result.list[j].id).to.be.eq(0);
                expect(user.list[j].id).to.be.exist;
                expect(result.list[j].label).to.be.eq(user.list[j].label);
            }
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test class UserDTO ", function (done) {
        bean_utils_1.BeanUtils.mapObject(userDTO_1.UserDTO, user).then(function (result) {
            expect(result).to.be.instanceof(userDTO_1.UserDTO);
            expect(result.id).to.be.eq(0);
            expect(result.name).to.be.eql(user.name);
            expect(result.adress.label).to.be.eql(user.adress.label);
            expect(result.adress.id).to.be.eq(0);
            expect(result.list.length).to.be.eq(user.list.length);
            for (var j = 0; j < result.list.length; j++) {
                expect(result.list[j]).to.be.instanceOf(adressDTO_1.AdressDTO);
                expect(result.list[j].id).to.be.eq(0);
                expect(user.list[j].id).to.be.exist;
                expect(result.list[j].label).to.be.eq(user.list[j].label);
            }
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test class OtherUser (empty constructor) ", function (done) {
        bean_utils_1.BeanUtils.mapObject(OtherUser_1.OtherUser, user).then(function (result) {
            expect(result).to.be.instanceof(OtherUser_1.OtherUser);
            expect(result.id).to.be.eq(0);
            expect(result.name).to.be.eql(user.name);
            expect(result.adress.label).to.be.eql(user.adress.label);
            expect(result.adress.id).to.be.eq(0);
            expect(result.list.length).to.be.eq(user.list.length);
            for (var j = 0; j < result.list.length; j++) {
                expect(result.list[j]).to.be.instanceOf(adress_1.Adress);
                expect(result.list[j].id).to.be.eq(0);
                expect(user.list[j].id).to.be.exist;
                expect(result.list[j].label).to.be.eq(user.list[j].label);
            }
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test class ForeignUser (with no @Bean) ", function (done) {
        var foreignUser = new ForeignUser_1.ForeignUser();
        foreignUser.name = 'foreignUser';
        foreignUser.list = [];
        var ad1 = new ForeignUser_1.ForeignAdress();
        ad1.id = "ad1";
        ad1.label = "foreign ad1";
        ad1.comment = "foreign comment ad1";
        var ad2 = new ForeignUser_1.ForeignAdress();
        ad1.id = "ad2";
        ad2.label = "foreign ad2";
        ad2.comment = "foreign comment ad2";
        foreignUser.list.push(ad1);
        foreignUser.list.push(ad2);
        var ad3 = new ForeignUser_1.ForeignAdress();
        ad3.id = "ad3";
        ad3.label = "foreign ad3";
        ad3.comment = "foreign comment ad3";
        foreignUser.adress = ad3;
        foreignUser.comments = "foreign comment foreignUser";
        bean_utils_1.BeanUtils.mapObject(userDTO_1.UserDTO, foreignUser).then(function (result) {
            expect(result).to.be.instanceof(userDTO_1.UserDTO);
            expect(result.id).to.be.eq(0);
            expect(result.name).to.be.eql(foreignUser.name);
            expect(result.adress.label).to.be.eql(foreignUser.adress.label);
            expect(result.adress.id).to.be.eq(0);
            expect(result.list.length).to.be.eq(foreignUser.list.length);
            for (var j = 0; j < result.list.length; j++) {
                expect(result.list[j]).to.be.instanceOf(adressDTO_1.AdressDTO);
                expect(result.list[j].id).to.be.eq(0);
                expect(user.list[j].id).to.be.exist;
                expect(result.list[j].label).to.be.eq(foreignUser.list[j].label);
            }
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should test class User with an attribute Number", function (done) {
        user.number = new Number(2);
        bean_utils_1.BeanUtils.mapObject(user_1.User, user).then(function (result) {
            expect(result).to.be.instanceof(user_1.User);
            expect(result.id).to.be.eq(0);
            expect(result.name).to.be.eql(user.name);
            expect(result.adress.label).to.be.eql(user.adress.label);
            expect(result.adress.id).to.be.eq(0);
            expect(result.number).to.be.instanceOf(Number);
            expect(result.number.valueOf()).to.be.eq(user.number.valueOf());
            expect(result.list.length).to.be.eq(user.list.length);
            for (var j = 0; j < result.list.length; j++) {
                expect(result.list[j]).to.be.instanceOf(adress_1.Adress);
                expect(result.list[j].id).to.be.eq(0);
                expect(user.list[j].id).to.be.exist;
                expect(result.list[j].label).to.be.eq(user.list[j].label);
            }
            done();
        }).catch(function (error) {
            done(error);
        });
    });
});
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
describe("Test of BeanUtils.clone* : ", function () {
    it("should do a dummy deep equal test", function (done) {
        var array = [user, user2];
        var array2 = _.cloneDeep(array);
        expect(array).to.deep.eql(array2);
        done();
    });
    it("should do a cloneArray deep equal test", function (done) {
        var array = [user, user2];
        bean_utils_1.BeanUtils.cloneArray(array, { deep: true }).then(function (result) {
            expect(result).to.deep.eql(array);
            done();
        }).catch(function (error) {
            done(error);
        });
    });
    it("should do a cloneArray deep equal test", function (done) {
        var array = [user, user2];
        bean_utils_1.BeanUtils.cloneArray(array).then(function (result) {
            expect(result).to.eql(array);
            done();
        }).catch(function (error) {
            done(error);
        });
    });
});

//# sourceMappingURL=bean-spec.js.map
