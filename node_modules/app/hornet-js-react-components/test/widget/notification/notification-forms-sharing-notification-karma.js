"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var React = require("react");
var assert = require("assert");
var hornet_react_test_1 = require("hornet-js-test/src/hornet-react-test");
var hornet_test_assert_1 = require("hornet-js-test/src/hornet-test-assert");
var test_run_1 = require("hornet-js-test/src/test-run");
var decorators_1 = require("hornet-js-test/src/decorators");
var form_1 = require("hornet-js-react-components/src/widget/form/form");
var row_1 = require("hornet-js-react-components/src/widget/form/row");
var input_field_1 = require("hornet-js-react-components/src/widget/form/input-field");
var accordions_1 = require("hornet-js-react-components/src/widget/accordion/accordions");
var accordion_1 = require("hornet-js-react-components/src/widget/accordion/accordion");
var buttons_area_1 = require("hornet-js-react-components/src/widget/form/buttons-area");
var button_1 = require("hornet-js-react-components/src/widget/button/button");
var notification_1 = require("hornet-js-react-components/src/widget/notification/notification");
var schema = require("test/widget/notification/validation1.json");
var schema2 = require("test/widget/notification/validation2.json");
var formElement;
var renderedElement;
/**
 * Tests visant à s'assurer que l'on peut dispatcher correction les notifications de formulaire
 * on partage une seule zone de notification pour les formulaires
 */
var NotificationFormDispatchingTest = /** @class */ (function (_super) {
    tslib_1.__extends(NotificationFormDispatchingTest, _super);
    function NotificationFormDispatchingTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NotificationFormDispatchingTest.prototype.before = function () {
        formElement = (React.createElement("div", null,
            React.createElement(notification_1.Notification, { id: "myNotificationSpot1" }),
            this.generateAccordionsIntoForm1(),
            this.generateAccordionsIntoForm2()));
        renderedElement = this.renderIntoDocument(formElement, "main1");
    };
    ;
    /**
     * Cas de test où un formulaire contient un ensemble d'accordions
     * @returns {JSX.Element}
     */
    NotificationFormDispatchingTest.prototype.generateAccordionsIntoForm1 = function () {
        return (React.createElement(form_1.Form, { id: "form1", onSubmit: this.onSubmit, schema: schema, notifId: "myNotificationSpot1" },
            React.createElement(accordions_1.Accordions, { id: "id-accordions-form-1", multiSelectable: false },
                React.createElement(accordion_1.Accordion, null,
                    React.createElement(row_1.Row, null,
                        React.createElement(input_field_1.InputField, { name: "input1", label: "Champ à renseigner", required: true, maxLength: 250 }))),
                React.createElement(accordion_1.Accordion, null,
                    React.createElement(row_1.Row, null,
                        React.createElement(input_field_1.InputField, { name: "input2", label: "Champ à renseigner", required: true, maxLength: 250 })),
                    React.createElement(row_1.Row, null,
                        React.createElement(input_field_1.InputField, { name: "input3", label: "Champ à renseigner", required: true, maxLength: 250 }))),
                React.createElement(accordion_1.Accordion, null,
                    React.createElement(row_1.Row, null,
                        React.createElement(input_field_1.InputField, { name: "input4", label: "Champ à renseigner", required: true, maxLength: 250 })),
                    React.createElement(row_1.Row, null,
                        React.createElement(input_field_1.InputField, { name: "input5", label: "Champ à renseigner", required: true, maxLength: 250 })))),
            this.renderButtons("form1")));
    };
    /**
     * Cas de test où un formulaire contient un ensemble d'accordions
     * @returns {JSX.Element}
     */
    NotificationFormDispatchingTest.prototype.generateAccordionsIntoForm2 = function () {
        return (React.createElement(form_1.Form, { id: "form2", onSubmit: this.onSubmit, schema: schema2, notifId: "myNotificationSpot1" },
            React.createElement(accordions_1.Accordions, { id: "id-accordions-form-2", multiSelectable: false },
                React.createElement(accordion_1.Accordion, null,
                    React.createElement(row_1.Row, null,
                        React.createElement(input_field_1.InputField, { name: "input6", label: "Champ à renseigner", required: true, maxLength: 250 })))),
            this.renderButtons("form2")));
    };
    NotificationFormDispatchingTest.prototype.renderButtons = function (formName) {
        return (React.createElement(buttons_area_1.ButtonsArea, null,
            React.createElement(button_1.Button, { type: "submit", id: "envoi-" + formName, name: "action:" + formName, className: "hornet-button", value: "valider", label: "valider", title: "valider" })));
    };
    NotificationFormDispatchingTest.prototype.onSubmit = function () {
        var notifText = "Validation du formulaire";
        console.log(notifText);
    };
    NotificationFormDispatchingTest.prototype.testOk = function () {
        assert.equal(1, 1);
        this.end();
    };
    ;
    /**
     * Le formulaire 1 envoie ses notifications vers la zone de notification partagée
     */
    NotificationFormDispatchingTest.prototype.validerForm1 = function () {
        var _this = this;
        this.triggerMouseEvent(document.querySelector("#main1 #envoi-form1"), "click");
        setTimeout(function () {
            var element = _this.getNotificationMessageListForm("myNotificationSpot1", "error-message-list");
            hornet_test_assert_1.HornetTestAssert.assertEquals(5, element.length, "La zone de notification doit contenir 5 messages d'erreur");
            var accordionsTagErrorNumber = _this.getNotificationNumberErrorAccordionForm("form1", "errors-content");
            hornet_test_assert_1.HornetTestAssert.assertEquals(5, accordionsTagErrorNumber, "Le tag d'erreur de l'accordion doit indiquer 5 erreurs");
            _this.end();
        }, 500);
    };
    ;
    /**
     * Le formulaire 2 envoie ses notifications vers la zone de notification partagée
     * Les notifications du formulaire 1 ne sont plus disponibles
     * Par contre, les accordions du formulaire 1 conservent leur tag d'erreur
     */
    NotificationFormDispatchingTest.prototype.validerForm2 = function () {
        var _this = this;
        this.triggerMouseEvent(document.querySelector("#main1 #envoi-form2"), "click");
        setTimeout(function () {
            var element = _this.getNotificationMessageListForm("myNotificationSpot1", "error-message-list");
            hornet_test_assert_1.HornetTestAssert.assertEquals(1, element.length, "La zone de notification doit contenir 1 messages d'erreur");
            var accordionsTagErrorNumber = _this.getNotificationNumberErrorAccordionForm("form2", "errors-content");
            hornet_test_assert_1.HornetTestAssert.assertEquals(1, accordionsTagErrorNumber, "Le tag d'erreur de l'accordion doit indiquer 1 erreur");
            accordionsTagErrorNumber = _this.getNotificationNumberErrorAccordionForm("form1", "errors-content");
            hornet_test_assert_1.HornetTestAssert.assertEquals(5, accordionsTagErrorNumber, "Le tag d'erreur de l'accordion doit indiquer 5 erreurs");
            _this.end();
        }, 500);
    };
    ;
    NotificationFormDispatchingTest.prototype.getNotificationMessageListForm = function (form, className) {
        var formElement = document.getElementById(form);
        var messageList = formElement.getElementsByClassName(className)[0];
        return (messageList) ? messageList.children : null;
    };
    NotificationFormDispatchingTest.prototype.getNotificationNumberErrorAccordionForm = function (form, className) {
        var formElement = document.getElementById(form);
        var errorTagAccordion = formElement.getElementsByClassName(className);
        var count = 0;
        for (var i = 0; i < errorTagAccordion.length; i++) {
            count += Number(errorTagAccordion[i].textContent.split(" ")[0]);
        }
        return count;
    };
    tslib_1.__decorate([
        decorators_1.Decorators.before,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], NotificationFormDispatchingTest.prototype, "before", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test OK"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], NotificationFormDispatchingTest.prototype, "testOk", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Valider formulaire 1"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], NotificationFormDispatchingTest.prototype, "validerForm1", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Valider formulaire 2"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], NotificationFormDispatchingTest.prototype, "validerForm2", null);
    NotificationFormDispatchingTest = tslib_1.__decorate([
        decorators_1.Decorators.describe("Test Karma Notification form")
    ], NotificationFormDispatchingTest);
    return NotificationFormDispatchingTest;
}(hornet_react_test_1.HornetReactTest));
//lancement des Tests
test_run_1.runTest(new NotificationFormDispatchingTest());

//# sourceMappingURL=notification-forms-sharing-notification-karma.js.map
