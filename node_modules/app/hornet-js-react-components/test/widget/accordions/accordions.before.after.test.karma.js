/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var chai = require('chai');
var expect = chai.expect;
var React = require("react");
var base_test_1 = require("hornet-js-test/src/base-test");
var test_run_1 = require("hornet-js-test/src/test-run");
var decorators_1 = require("hornet-js-test/src/decorators");
var assert = require("assert");
var accordions_1 = require("hornet-js-react-components/src/widget/accordion/accordions");
var accordion_1 = require("hornet-js-react-components/src/widget/accordion/accordion");
var accordion_header_1 = require("hornet-js-react-components/src/widget/accordion/accordion-header");
var accordion_info_1 = require("hornet-js-react-components/src/widget/accordion/accordion-info");
var accordionsElement;
var accordions;
var beforeHideAccordionCount = 0;
var afterShowAccordionCount = 0;
var scenario = 0;
var AccordionsTest = /** @class */ (function (_super) {
    tslib_1.__extends(AccordionsTest, _super);
    function AccordionsTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccordionsTest.prototype.beforeEach = function () {
        scenario++;
        var isMultiSelectable = scenario != 4;
        accordions = null;
        beforeHideAccordionCount = 0;
        afterShowAccordionCount = 0;
        accordionsElement = (React.createElement(accordions_1.Accordions, { id: "accordions-test-karma", multiSelectable: isMultiSelectable, beforeHideAccordion: function () {
                beforeHideAccordionCount++;
            }, afterShowAccordion: function () { afterShowAccordionCount++; } },
            React.createElement(accordion_1.Accordion, { title: "accordion de test 1", isOpen: false },
                React.createElement(accordion_header_1.AccordionHeader, null,
                    React.createElement("div", { id: "accordions-test-accordionheader" })),
                React.createElement(accordion_info_1.AccordionInfo, null,
                    React.createElement("div", { id: "accordions-test-accordioninfo" })),
                React.createElement("div", { id: "accordions-test-content" }, "contenu")),
            React.createElement(accordion_1.Accordion, { title: "accordion de test 2", isOpen: false })));
    };
    ;
    AccordionsTest.prototype.testOk = function () {
        assert.equal(1, 1);
        this.end();
    };
    ;
    AccordionsTest.prototype.showAccordions = function () {
        var _this = this;
        accordions = this.renderIntoDocument(accordionsElement, "main1");
        this.triggerMouseEvent(document.querySelector("#main1 .accordion-header-container #accordions-test-accordionheader"), "focus");
        setTimeout(function () {
            expect(beforeHideAccordionCount).to.equal(0);
            expect(afterShowAccordionCount).to.equal(1);
            _this.end();
        }, 250);
    };
    AccordionsTest.prototype.showHideAccordions = function () {
        var _this = this;
        accordions = this.renderIntoDocument(accordionsElement, "main2");
        this.triggerMouseEvent(document.querySelector("#main2 .accordion-header-container #accordions-test-accordionheader"), "focus");
        setTimeout(function () {
            _this.selectItemOnClick("#main2 #accordions-test-karma-0-tab");
            setTimeout(function () {
                expect(beforeHideAccordionCount, ("beforeHideAccordionCount n'est pas correctement incrémenté")).to.equal(1);
                expect(afterShowAccordionCount, ("afterShowAccordionCount n'est pas correctement incrémenté")).to.equal(1);
                _this.end();
            }, 250);
        }, 250);
    };
    AccordionsTest.prototype.showHideNoMultiSelectableAccordions = function () {
        var _this = this;
        accordions = this.renderIntoDocument(accordionsElement, "main3");
        this.triggerMouseEvent(document.querySelector("#main3 .accordion-header-container #accordions-test-accordionheader"), "focus");
        setTimeout(function () {
            _this.selectItemOnClick("#main3 #accordions-test-karma-1-tab");
            setTimeout(function () {
                expect(beforeHideAccordionCount, ("beforeHideAccordionCount n'est pas correctement incrémenté")).to.equal(1);
                expect(afterShowAccordionCount, ("afterShowAccordionCount n'est pas correctement incrémenté")).to.equal(2);
                _this.end();
            }, 250);
        }, 250);
    };
    AccordionsTest.prototype.selectItemOnClick = function (element) {
        var mainElement = this.getDOMElement(element);
        mainElement.click();
    };
    AccordionsTest.prototype.getDOMElement = function (element) {
        var mainElement = document.querySelector(element);
        return mainElement;
    };
    tslib_1.__decorate([
        decorators_1.Decorators.beforeEach,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], AccordionsTest.prototype, "beforeEach", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test OK"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], AccordionsTest.prototype, "testOk", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("test des méthodes afterShowAccordion"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], AccordionsTest.prototype, "showAccordions", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("test des méthodes afterShow/beforeHide"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], AccordionsTest.prototype, "showHideAccordions", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("test des méthodes afterShow/beforeHide no multiSelectable"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], AccordionsTest.prototype, "showHideNoMultiSelectableAccordions", null);
    AccordionsTest = tslib_1.__decorate([
        decorators_1.Decorators.describe("Test Karma Accordions Before After show")
    ], AccordionsTest);
    return AccordionsTest;
}(base_test_1.BaseTest));
//lancement des Tests
test_run_1.runTest(new AccordionsTest());

//# sourceMappingURL=accordions.before.after.test.karma.js.map
