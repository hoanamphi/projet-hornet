"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var React = require("react");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var dropdown_item_1 = require("hornet-js-react-components/src/widget/dropdown/dropdown-item");
var classNames = require("classnames");
var key_codes_1 = require("hornet-js-components/src/event/key-codes");
var Position;
(function (Position) {
    Position[Position["BOTTOMLEFT"] = 0] = "BOTTOMLEFT";
    Position[Position["BOTTOMRIGHT"] = 1] = "BOTTOMRIGHT";
    Position[Position["TOPLEFT"] = 2] = "TOPLEFT";
    Position[Position["TOPRIGHT"] = 3] = "TOPRIGHT";
})(Position = exports.Position || (exports.Position = {}));
/**
 * Composant Dropdown
 */
var Dropdown = /** @class */ (function (_super) {
    tslib_1.__extends(Dropdown, _super);
    function Dropdown(props, context) {
        var _this = _super.call(this, props, context) || this;
        /** Liste des items du dropdown */
        _this.items = [];
        /** Tableau pour matcher Enum avec className */
        _this.lstPosition = ["position-bottom-left", "position-bottom-right", "position-top-left", "position-top-right"];
        /**
         * Gère les événements clavier sur le dropdown
         * @param e Event
         */
        _this.handleKeyDownDropDown = function (e) {
            switch (e.keyCode) {
                // la touche echappe ferm le panneau
                case key_codes_1.KeyCodes.ESCAPE:
                    _this.handleClick();
                    break;
                // la barre d'espace ouvre ou ferme le
                // panneau suivant son état
                case key_codes_1.KeyCodes.SPACEBAR:
                    e.preventDefault();
                    if (!_this.state.isActive) {
                        _this.handleClick();
                    }
                    break;
                default:
                    break;
            }
        };
        /**
         * Gère les événements clavier sur un item du dropdown
         *
         * @param e Event
         * @param action Function
         * @param url String
         */
        _this.handleKeyDownDropDownItem = function (e, action, url) {
            // current event
            var item;
            switch (e.keyCode) {
                // la touche echappe ferme le panneau
                case key_codes_1.KeyCodes.ESCAPE:
                    _this.closePanel();
                    break;
                // la barre d'espace et entrer executent l'action
                // portée par l'item et ferment le
                // panneau
                case key_codes_1.KeyCodes.ENTER:
                case key_codes_1.KeyCodes.SPACEBAR:
                    e.preventDefault();
                    if (_this.state.isActive) {
                        if (typeof action != "undefined")
                            action();
                        else if (url != "undefined")
                            window.location.href = url;
                        _this.handleClick();
                    }
                    break;
                case key_codes_1.KeyCodes.UP_ARROW:
                    e.preventDefault();
                    if (e.currentTarget.parentNode.previousElementSibling) {
                        item = e.currentTarget.parentNode.previousElementSibling.firstElementChild;
                        if (item)
                            item.focus();
                    }
                    break;
                case key_codes_1.KeyCodes.TAB:
                    if (e.shiftKey) {
                        if (e.currentTarget.parentNode.previousElementSibling.nodeName != "LI") {
                            _this.closePanel();
                        }
                    }
                    else {
                        if (!e.currentTarget.parentNode.nextElementSibling) {
                            _this.closePanel();
                        }
                    }
                    break;
                case key_codes_1.KeyCodes.DOWN_ARROW:
                    e.preventDefault();
                    if (e.currentTarget.parentNode.nextElementSibling) {
                        item = e.currentTarget.parentNode.nextElementSibling.firstElementChild;
                        if (item)
                            item.focus();
                    }
                    break;
                default:
                    break;
            }
        };
        _this.state.isActive = false;
        return _this;
    }
    Dropdown.prototype.componentDidUpdate = function () {
        // when the component is updated
        // make sure you remove the listener on document
        // and the component panel is not expand
        if (typeof document !== undefined && !this.state.isActive) {
            document.removeEventListener("click", this.handleExpandOutside, false);
        }
        else if (typeof document !== undefined && this.state.isActive) {
            document.addEventListener("click", this.handleExpandOutside, false);
        }
    };
    Dropdown.prototype.componentDidMount = function () {
        this.calculPositionBox();
    };
    Dropdown.prototype.componentWillUpdate = function () {
        this.calculPositionBox();
    };
    /**
     * @inheritDoc
     */
    Dropdown.prototype.render = function () {
        var dropdownClasses = {
            "dropdown-container": true
        };
        if (this.state.className) {
            dropdownClasses[this.state.className] = true;
        }
        return (React.createElement("div", { id: this.state.id, title: this.state.title, className: classNames(dropdownClasses) },
            (this.props.type == "button") ? this.renderButton() : this.renderLink(),
            this.renderDropDown()));
    };
    Dropdown.prototype.renderLink = function () {
        var _this = this;
        var img = null;
        if (typeof this.props.icon == "string") {
            img = React.createElement("span", { className: "icon " + this.props.icon });
        }
        else {
            img = this.props.icon;
        }
        var labelClass = this.props.labelClassName || "dropdown-label-span";
        var aProps = {
            onClick: this.handleClick.bind(this),
            onKeyDown: this.handleKeyDownDropDown,
            role: "button",
            href: "#",
            tabIndex: 0,
            ref: function (button) {
                _this.button = button;
            },
            className: "dropdown-button button-action",
            disabled: this.state.disabled,
            "aria-expanded": this.state.isActive ? "true" : "false",
            "aria-haspopup": true
        };
        return (React.createElement("a", tslib_1.__assign({}, aProps),
            this.state.label ? null : React.createElement("span", { className: "dropdown-hidden-label" }, this.props.ariaLabel),
            React.createElement("span", { className: "label" + " " + labelClass }, this.props.label ? this.props.label : this.props.valueCurrent),
            img));
    };
    Dropdown.prototype.renderButton = function () {
        var _this = this;
        var img = null;
        if (typeof this.props.icon == "string") {
            img = React.createElement("span", { className: "icon " + this.props.icon });
        }
        else {
            img = this.props.icon;
        }
        var buttonProps = {
            onClick: this.handleClick.bind(this),
            onKeyDown: this.handleKeyDownDropDown,
            role: "button",
            tabIndex: 0,
            ref: function (button) {
                _this.button = button;
            },
            className: "button-action",
            disabled: this.state.disabled,
            "aria-expanded": this.state.isActive ? "true" : "false",
            "aria-haspopup": true,
            "aria-label": this.props.ariaLabel,
            "type": "button"
        };
        var labelClass = this.props.labelClassName || "dropdown-label-span";
        return (React.createElement("button", tslib_1.__assign({}, buttonProps),
            img,
            React.createElement("span", { className: "dropdown-hidden-label" }, this.props.title),
            React.createElement("span", { className: "label" + " " + labelClass }, this.props.label ? this.props.label : this.props.valueCurrent)));
    };
    /**
     * Rendu type Dropdown
     * @returns {any}
     * @protected
     */
    Dropdown.prototype.renderDropDown = function () {
        var _this = this;
        var items;
        var buildItem = function (item, index) {
            var dropdownItemsProps = {
                label: item.label,
                url: item.url,
                className: item.className,
                srcImg: item.srcImg,
                key: "dropdown-" + _this.props.id + "-" + index,
                handleKeyDown: _this.handleKeyDownDropDownItem,
                getRef: function (item) { return _this.items.push(item); },
                disabled: item.disabled,
                valueCurrent: item.valueCurrent,
                lang: item.lang
            };
            if (item.action) {
                dropdownItemsProps["action"] = item.action;
            }
            return React.createElement(dropdown_item_1.DropdownItem, tslib_1.__assign({}, dropdownItemsProps));
        };
        if (this.state.items && this.state.items.length > 0) {
            items = this.state.items.map(function (item, index) { return buildItem(item, index); });
        }
        else if (this.state.children && this.state.children.length > 0) {
            items = [];
            this.state.children.map(function (item, index) {
                items.push(React.cloneElement(item, {
                    key: "li-dropdown-" + _this.props.id + "-" + index,
                    onKeyDown: _this.handleKeyDownDropDownItem,
                    ref: function (item) { return _this.items.push(item); }
                }));
            });
        }
        var dropDownClasses = {
            "dropdown-content": true,
            "dropdown-content-hidden": !this.state.isActive
        };
        var classStyle = this.lstPosition[this.props.position];
        var position = (this.props.drawArrow) ? classStyle : "";
        return (React.createElement("div", { id: this.state.id + "content", className: classStyle + " " + classNames(dropDownClasses), style: this.boxStyle },
            React.createElement("span", { style: this.arrowStyle, className: "arrow " + position }),
            React.createElement("ul", { className: "dropdown-list " + position, ref: function (dropDown) { return _this.dropDown = dropDown; }, "aria-expanded": this.state.isActive }, items)));
    };
    Dropdown.prototype.calculPositionBox = function () {
        var valRightArrow = 0, valLeftBox = 0, valLeftArrow = 0;
        var widthIcon = this.button.getElementsByClassName("icon")[0].getBoundingClientRect().width;
        var widthLabel = this.button.getElementsByClassName("label")[0].getBoundingClientRect().width;
        switch (this.props.position) {
            case Position.BOTTOMRIGHT:
            case Position.TOPRIGHT:
                /* 5px decalement de la box -0.5em // -5px suppression de la moitié de la fleche*/
                valRightArrow = (widthIcon / 2) + 5;
                this.arrowStyle = {
                    right: valRightArrow + "px"
                };
                break;
            case Position.TOPLEFT:
            case Position.BOTTOMLEFT:
                if (this.props.valueCurrent) {
                    valLeftBox = widthLabel;
                }
                valLeftArrow = (widthIcon / 2);
                this.arrowStyle = {
                    left: valLeftArrow + "px"
                };
                this.boxStyle = {
                    left: valLeftBox + "px"
                };
                break;
        }
    };
    /* Evenement sur le onClick */
    Dropdown.prototype.handleClick = function () {
        /* on ferme que si on a le droit ( par defaut oui ) */
        if (this.state.isActive && this.state.closeClick) {
            this.closePanel();
        }
        else if (!this.state.isActive) {
            this.openPanel();
        }
    };
    /**
     * ouvre le dropdown et focus le premier enfant
     */
    Dropdown.prototype.openPanel = function () {
        var _this = this;
        this.setState({ isActive: true }, function () {
            _this.dropDown.firstElementChild.firstElementChild.focus();
        });
    };
    /**
     * ferme le dropdown et focus le bouton parent
     */
    Dropdown.prototype.closePanel = function () {
        var _this = this;
        this.setState({ isActive: false }, function () {
            _this.button.focus();
        });
    };
    /**
     * Ferme la liste lorsque le clic est en dehors de la div
     * @param e Event
     */
    Dropdown.prototype.handleExpandOutside = function (e) {
        e.stopPropagation();
        if (document.getElementById(this.state.id + "content") != null) {
            if (!document.getElementById(this.state.id + "content").contains(e.target)) {
                // the click was outside your component, so handle closing here
                this.setState({ isActive: false });
            }
            else {
                this.handleClick();
            }
        }
    };
    Dropdown.defaultProps = {
        disabled: false,
        position: Position.BOTTOMRIGHT,
        drawArrow: true,
        closeClick: true
    };
    return Dropdown;
}(hornet_component_1.HornetComponent));
exports.Dropdown = Dropdown;

//# sourceMappingURL=dropdown.js.map
