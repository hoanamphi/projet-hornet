"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var moment = require("moment-timezone");
moment.duration.fn.format = function () {
    var str = "";
    if (this.days() > 1)
        str = str + Math.floor(this.days()) + "d ";
    if (this.hours() > 1)
        str = str + Math.floor(this.hours()) + "h ";
    if (this.minutes() > 1)
        str = str + Math.floor(this.minutes()) + "m ";
    if (this.seconds() > 1)
        str = str + Math.floor(this.seconds()) + "s ";
    return str;
};
/**
 *
 */
var Countdown = /** @class */ (function (_super) {
    tslib_1.__extends(Countdown, _super);
    function Countdown(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state.secondsRemaining = 0;
        return _this;
    }
    Countdown.prototype.componentDidMount = function () {
        this.setState({ secondsRemaining: this.props.secondsRemaining });
        this.interval = setInterval(this.tick, 1000);
    };
    Countdown.prototype.componentWillUnmount = function () {
        clearInterval(this.interval);
    };
    /**
     * Génère le rendu spécifique du champ
     * @returns {any}
     * @override
     */
    Countdown.prototype.render = function () {
        var message = this.i18n(this.props.countDownExpiredMesage);
        if (this.state.secondsRemaining != 0) {
            // let s = Math.floor(this.state.secondsRemaining / 1000) % 60;
            // //minutes
            // let m = Math.floor(this.state.secondsRemaining / 60000) % 60;
            //
            // //affichage
            // let time = m + ":" + s;
            var time = moment.duration(this.state.secondsRemaining, "milliseconds").format("H:mm:ss");
            message = this.i18n(this.props.countDownNormalMessage) + time;
        }
        return (message);
    };
    /**
     *
     */
    Countdown.prototype.tick = function () {
        this.setState({ secondsRemaining: this.state.secondsRemaining - 1000 });
        if (this.state.secondsRemaining <= 0) {
            clearInterval(this.interval);
        }
    };
    Countdown.defaultProps = {
        countDownExpiredMesage: "notificationSession.countDownExpiredMesage",
        countDownNormalMessage: "notificationSession.countDownNormalMessage"
    };
    return Countdown;
}(hornet_component_1.HornetComponent));
exports.Countdown = Countdown;

//# sourceMappingURL=count-down.js.map
