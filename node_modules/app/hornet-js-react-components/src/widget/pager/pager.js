"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var _ = require("lodash");
var hornet_js_utils_1 = require("hornet-js-utils");
var React = require("react");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var dropdown_1 = require("hornet-js-react-components/src/widget/dropdown/dropdown");
var key_codes_1 = require("hornet-js-components/src/event/key-codes");
var classNames = require("classnames");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-components.widget.pager.pager");
/**
 * Valeur de la propriété de pagination itemsPerPage correspondant à "Afficher tout" les éléments. Egale à la constante Java Integer.MAX_VALUE (2^32 - 1)
 */
exports.ITEMS_PER_PAGE_ALL = 2147483647;
/**
 * Outils de pagination de tableau
 */
var Pager = /** @class */ (function (_super) {
    tslib_1.__extends(Pager, _super);
    function Pager(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.defaultPageSizeSelect = [
            { value: 10, textKey: _this.i18n("table.10") },
            { value: 20, textKey: _this.i18n("table.20") },
            { value: 50, textKey: _this.i18n("table.50") },
            { value: 100, textKey: _this.i18n("table.100") },
            { value: exports.ITEMS_PER_PAGE_ALL, textKey: _this.i18n("table.displayAll") }
        ];
        _this.state.i18n = _this.i18n("table");
        _this.state.pagination = _.cloneDeep(_this.props.dataSource.pagination);
        _this.state.dropDownTitle = _this.i18n("table.pager.dropdownTitle");
        return _this;
    }
    Pager.prototype.componentDidMount = function () {
        var _this = this;
        _super.prototype.componentDidMount.call(this);
        this.props.dataSource.on("fetch", this.updateOnFetch);
        this.props.dataSource.on("pagination", function (result) {
            if (_this.tableInputPager && result.pagination) {
                _this.tableInputPager.value = result.pagination.pageIndex;
            }
            _this.setState({ pagination: _.cloneDeep(result.pagination) });
        });
    };
    /**
     * @inheritDoc
     */
    Pager.prototype.componentWillUnmount = function () {
        var _this = this;
        _super.prototype.componentWillUnmount.call(this);
        if (this.props.dataSource) {
            this.props.dataSource.removeListener("fetch", this.updateOnFetch);
            this.props.dataSource.removeListener("pagination", function (result) {
                _this.setState({ pagination: _.cloneDeep(result.pagination) });
            });
        }
    };
    Pager.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var shouldUpdate = (this.state.pagination.pageIndex != nextState.pagination.pageIndex && nextState.pagination.pageIndex != "")
            || this.state.pagination.itemsPerPage != nextState.pagination.itemsPerPage
            || this.state.pagination.totalItems != nextState.pagination.totalItems
            || this.state.disabled != nextState.disabled;
        logger.trace("shouldComponentUpdate", shouldUpdate);
        return shouldUpdate;
    };
    /**
     * met a jour la pagination dans le state et la valeur de la page courante.
     * @param result (liste des resultats du dataSource)
     */
    Pager.prototype.updateOnFetch = function (result) {
        this.setState({ pagination: (!result || result.length == 0) ? {} : _.cloneDeep(this.props.dataSource.pagination) });
        if (this.tableInputPager) {
            this.tableInputPager.value = this.state.pagination.pageIndex; // mise a jour de l'index de la page affichée
        }
    };
    /**
     * @inheritDoc
     */
    Pager.prototype.render = function () {
        logger.trace("render");
        var className = {
            "datatable-pagination": true
        };
        if (this.state.className) {
            className[this.state.className] = true;
        }
        var divProps = {
            className: classNames(className),
            id: this.props.id,
            disabled: this.state.disabled
        };
        return (this.state.pagination.pageIndex ?
            React.createElement("div", tslib_1.__assign({}, divProps),
                this.renderSelectItemsPerPage(),
                this.getButtons()) : React.createElement("div", null));
    };
    /**
     * Génère la liste déroulante permettant de sélectionner le nombre d'éléments par page.
     * @returns {ReactElement}
     */
    Pager.prototype.renderSelectItemsPerPage = function () {
        var _this = this;
        logger.trace("renderSelectItemsPerPage");
        var pageSizeSelect = this.state.pageSizeSelect || this.defaultPageSizeSelect;
        var dropdownItems = [];
        pageSizeSelect.map(function (item) {
            var disabled = false;
            if (_this.state.pagination.itemsPerPage == item.value) {
                disabled = true;
            }
            dropdownItems.push({
                label: item.textKey,
                action: _this.onFormChange.bind(_this, item.value, false),
                className: "material-dropdown-menu__link",
                disabled: disabled
            });
        });
        var selectedItem = { value: 0, textKey: "" };
        if (this.state.pagination.itemsPerPage) {
            for (var i = 0; i < pageSizeSelect.length; i++) {
                var item = pageSizeSelect[i];
                if (item.value == this.state.pagination.itemsPerPage) {
                    selectedItem = item;
                }
            }
        }
        return (React.createElement("div", null,
            React.createElement("label", { className: "labelPager", htmlFor: this.props.id + "-drop" }, this.state.i18n.pageFooter),
            React.createElement("div", { className: "datatable-pagination-content" },
                React.createElement(dropdown_1.Dropdown, { items: dropdownItems, icon: "caret-down", id: this.props.id + "-drop", valueCurrent: this.state.pagination.itemsPerPage, label: selectedItem.textKey, ariaLabel: this.state.i18n.pageFooter + " " + this.state.pagination.itemsPerPage, disabled: this.state.disabled, position: dropdown_1.Position.TOPLEFT, title: this.state.dropDownTitle }))));
    };
    /**
     * @param totalItems nombre total d'éléments
     * @param itemsPerPage nombre d'éléments par page
     * @return le nombre total de pages
     */
    Pager.getTotalPages = function (totalItems, itemsPerPage) {
        return Math.max(1, Math.ceil(totalItems / itemsPerPage)) || 0;
    };
    /**
     * Méthode permettant de générer le code HTML lié aux boutons
     * @returns {JSX.Element[]}
     */
    Pager.prototype.getButtons = function () {
        logger.trace("getButtons");
        var firstPage, prevPage, nextPage, lastPage;
        firstPage = prevPage = nextPage = lastPage = 1;
        //calcul du nombre de pages
        var totalItems = this.state.pagination.totalItems, itemsPerPage = this.state.pagination.itemsPerPage, pageIndex = this.state.pagination.pageIndex;
        var totalPages = Pager.getTotalPages(totalItems, itemsPerPage);
        lastPage = totalPages;
        /* cas d'une nouvelle recherche quand on est positionné sur la dernière pagination et que le total est inférieur
         à l'ancienne recherche */
        if (pageIndex > totalPages) {
            pageIndex = 1;
        }
        var startOnClickActif = false, endOnClickActif = false;
        if (totalItems > itemsPerPage && totalPages > 1) {
            if (pageIndex > 1) {
                prevPage = pageIndex - 1;
                startOnClickActif = true;
            }
            if (pageIndex < totalPages) {
                nextPage = pageIndex + 1;
                endOnClickActif = true;
            }
        }
        return [
            this.renderButton(this.i18n("table.firstPage") + " [page " + firstPage + "/" + totalPages + "]", firstPage, startOnClickActif, "firstPage"),
            this.renderButton(this.i18n("table.prevPage") + " [page " + prevPage + "/" + totalPages + "]", prevPage, startOnClickActif, "prevPage"),
            this.renderPageInput(firstPage, lastPage),
            this.renderButton("[page " + nextPage + "/" + totalPages + "] " + this.i18n("table.nextPage"), nextPage, endOnClickActif, "nextPage"),
            this.renderButton("[page " + totalPages + "/" + totalPages + "] " + this.i18n("table.lastPage"), lastPage, endOnClickActif, "lastPage")
        ];
    };
    /**
     * Génère le rendu d'un bouton de contrôle de pagination
     * @param infoTitle complement info title
     * @param page index de la page sélectionnée par le bouton
     * @param enabled indique si le bouton est actif
     * @param key clé de l'élément React
     * @returns l'élément React correspondant
     */
    Pager.prototype.renderButton = function (infoTitle, page, enabled, key) {
        var _this = this;
        logger.trace("renderButton");
        var className = "datatable-pagination-button datatable-pagination-button-" + key.toLowerCase();
        if (enabled) {
            className += " datatable-pagination-control-enabled";
        }
        else {
            className += " datatable-pagination-control-disabled";
        }
        return (React.createElement("button", { type: "button", className: className, onClick: function () {
                _this.props.dataSource.goToPage(page);
                _this.tableInputPager.value = page;
            }, disabled: !enabled || this.state.disabled, key: key, title: infoTitle, "aria-label": this.i18n("table." + key) }));
    };
    /**
     * Rendu de l'input de saisie pour aller à une page précise
     * @param firstPage numéro de la première page
     * @param lastPage numéro de la dernière page
     * @returns rendu du composant
     */
    Pager.prototype.renderPageInput = function (firstPage, lastPage) {
        var _this = this;
        var index = this.state.pagination.pageIndex;
        var defaultValue = (!index || index < 1) ? 1 : index;
        return (React.createElement("input", { defaultValue: defaultValue, type: (!this.isMobile()) ? "number" : "tel", min: (!this.isMobile()) ? firstPage : undefined, max: (!this.isMobile()) ? lastPage : undefined, className: "datatable-pagination-input", ref: function (element) {
                _this.tableInputPager = element;
            }, name: "tableInputPager", onChange: this.handleChangeValue, onKeyDown: this.handleInputKeyDown, key: this.props.id }));
    };
    /**
     * Gestion de la validation clavier pour aller à la page saisie
     * dans l'input dédié
     * @param e : event
     */
    Pager.prototype.handleInputKeyDown = function (e) {
        if (!(e.ctrlKey || e.shiftKey || e.altKey || e.metaKey)) {
            var keyCode = e.keyCode;
            if ((this.isMobile() && key_codes_1.KeyCodes.TAB == keyCode) || key_codes_1.KeyCodes.SPACEBAR == keyCode || key_codes_1.KeyCodes.ENTER == keyCode) {
                if (this.tableInputPager.value >= 1 &&
                    this.tableInputPager.value <= Pager.getTotalPages(this.state.pagination.totalItems, this.state.pagination.itemsPerPage)) {
                    this.props.dataSource.goToPage(this.tableInputPager.value);
                    this.tableInputPager.value = this.tableInputPager.value;
                }
                else {
                    this.tableInputPager.value = this.state.pagination.pageIndex;
                }
                var pagination = _.cloneDeep(this.state.pagination);
                pagination.pageIndex = this.tableInputPager.value;
                this.setState({ pagination: pagination });
            }
        }
    };
    /**
     * L'index de page étant dans un input mappé par la prop value
     * React oblige l'utilisation d'un event sur onChange pour valider la modification
     * @param e
     */
    Pager.prototype.handleChangeValue = function (e) {
        var pagination = _.cloneDeep(this.state.pagination);
        var maxPages = Pager.getTotalPages(this.state.pagination.totalItems, this.state.pagination.itemsPerPage);
        // Si NaN, on rend une chaine vide
        pagination.pageIndex = !_.isNaN(e.target.valueAsNumber) ? e.target.valueAsNumber : "";
        if (_.isNumber(pagination.pageIndex) && pagination.pageIndex < 1) {
            pagination.pageIndex = 1;
            this.tableInputPager.value = 1;
        }
        if (pagination.pageIndex > maxPages) {
            pagination.pageIndex = this.tableInputPager.value = maxPages;
        }
    };
    /**
     * Méthode déclenchée sur un changement d'état de du formulaire de pagination
     * @param value
     * @param pageChanged
     */
    Pager.prototype.onFormChange = function (value, pageChanged) {
        logger.trace("onFormChange");
        if (pageChanged) {
            this.props.dataSource.goToPage(value);
            this.tableInputPager.value = value;
        }
        else {
            this.props.dataSource.updatePerPage(value);
            this.tableInputPager.value = 1;
        }
    };
    // Setters
    Pager.prototype.setClassName = function (className, callback) {
        this.setState({ className: className }, callback);
        return this;
    };
    Pager.prototype.setMessage = function (message, callback) {
        this.setState({ message: message }, callback);
        return this;
    };
    Pager.prototype.setPageSizeSelect = function (pageSizeSelect, callback) {
        this.setState({ pageSizeSelect: pageSizeSelect }, callback);
        return this;
    };
    Pager.defaultProps = {
        message: hornet_component_1.HornetComponent.getI18n("table"),
        className: ""
    };
    return Pager;
}(hornet_component_1.HornetComponent));
exports.Pager = Pager;

//# sourceMappingURL=pager.js.map
