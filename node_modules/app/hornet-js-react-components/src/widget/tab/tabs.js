"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var React = require("react");
var classNames = require("classnames");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var tab_1 = require("hornet-js-react-components/src/widget/tab/tab");
var key_codes_1 = require("hornet-js-components/src/event/key-codes");
var ReactDOM = require("react-dom");
var tab_header_1 = require("hornet-js-react-components/src/widget/tab/tab-header");
var _ = require("lodash");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.widget.tab.tabs");
var TabsButtonScrolling;
(function (TabsButtonScrolling) {
    TabsButtonScrolling[TabsButtonScrolling["RIGHT"] = 0] = "RIGHT";
    TabsButtonScrolling[TabsButtonScrolling["LEFT"] = 1] = "LEFT";
})(TabsButtonScrolling = exports.TabsButtonScrolling || (exports.TabsButtonScrolling = {}));
var TabsKeyboardNavigation;
(function (TabsKeyboardNavigation) {
    TabsKeyboardNavigation[TabsKeyboardNavigation["PREVIOUS"] = 0] = "PREVIOUS";
    TabsKeyboardNavigation[TabsKeyboardNavigation["NEXT"] = 1] = "NEXT";
    TabsKeyboardNavigation[TabsKeyboardNavigation["HOME"] = 2] = "HOME";
    TabsKeyboardNavigation[TabsKeyboardNavigation["END"] = 3] = "END";
})(TabsKeyboardNavigation = exports.TabsKeyboardNavigation || (exports.TabsKeyboardNavigation = {}));
var TabsHeaderTech = /** @class */ (function (_super) {
    tslib_1.__extends(TabsHeaderTech, _super);
    function TabsHeaderTech(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state.selected = _this.props.selected;
        _this.state.isVisible = (typeof _this.props.isVisible === "undefined") ? true : _this.props.isVisible;
        return _this;
    }
    TabsHeaderTech.prototype.getTabHeader = function (children) {
        var tableauDesTabHeader = [];
        React.Children.map(children, function (child) {
            if (child.type === tab_header_1.TabHeader) {
                tableauDesTabHeader.push(child.props.children);
            }
        });
        return tableauDesTabHeader;
    };
    TabsHeaderTech.prototype.render = function () {
        var header = this.getTabHeader(this.props.tab.props.children);
        if (header.length == 0) {
            header = this.props.tab.props.title;
        }
        var classNameLi = classNames({
            "tab": true,
            "tab-focused": true,
            "fl": true
        });
        var key = this.props.prefixWithId() + this.props.index;
        var classNameA = classNames({
            "tab-label": true,
            "tab-selected": this.state.selected,
            "pts": true,
            "pbs": true
        });
        var deleteButtonClasses = this.state.selected ? "delete-tab-button delete-tab-button-selected" : "delete-tab-button";
        var lTabIndex = this.props.index;
        return (React.createElement("li", { style: { "display": this.state.isVisible ? "block" : "none" }, id: key, className: classNameLi, role: "presentation", key: "liTab-" + key, onKeyDown: this.handleKeyDown, onFocus: this.props.handleFocus, tabIndex: this.props.castBooleanInNumber(this.state.selected) },
            React.createElement("a", { className: classNameA, href: "#", role: "tab", id: this.props.prefixWithId() + "tabList-item-" + lTabIndex, "aria-selected": this.state.selected, "aria-controls": this.props.prefixWithId() + "sectionTabPanel-" + lTabIndex, key: "aTab-" + key, ref: "link", tabIndex: this.props.castBooleanInNumber(this.state.selected) }, header),
            this.props.isDeletable ?
                React.createElement("button", { id: key + "-delete-tab-button", type: "button", tabIndex: -1, className: deleteButtonClasses, onClick: this.deleteTabFunction, title: this.props.deleteButtonTitle ? this.props.deleteButtonTitle : this.i18n("tabs.delete-button") },
                    React.createElement("span", { className: "tabs-button-label" }, this.props.deleteButtonTitle ? this.props.deleteButtonTitle : this.i18n("tabs.delete-button"))) : null));
    };
    /**
     * gestion navigation clavier
     * @param e
     */
    TabsHeaderTech.prototype.handleKeyDown = function (e) {
        if (!(e.ctrlKey || e.shiftKey || e.altKey || e.metaKey)) {
            var keyCode = e.keyCode;
            switch (keyCode) {
                case key_codes_1.KeyCodes.DELETE:
                    this.deleteTabFunction();
                    break;
                default:
                    this.props.handleKeyDown(e);
                    break;
            }
        }
    };
    /**
     * appelle la fonciton de suppression du tab
     */
    TabsHeaderTech.prototype.deleteTabFunction = function () {
        if (this.props.deleteTabFunction) {
            return this.props.deleteTabFunction();
        }
    };
    return TabsHeaderTech;
}(hornet_component_1.HornetComponent));
exports.TabsHeaderTech = TabsHeaderTech;
var Tabs = /** @class */ (function (_super) {
    tslib_1.__extends(Tabs, _super);
    function Tabs(props, context) {
        var _this = _super.call(this, props, context) || this;
        /** liste des instances Tab*/
        _this.elementsTab = [];
        /** liste des JSX elements tab*/
        _this.elementsTabReact = [];
        /** liste des instances HeaderTech*/
        _this.elementsHeaderTech = [];
        /** liste des JSX elements headerTech*/
        _this.elementsHeaderReact = [];
        _this.resizeListener = function () { return _this.manageScrollButtonStyle(); };
        // index des tableaux
        _this.tabsHeaderIndex = 0;
        _this.tabsContentIndex = 0;
        _this.state.beforeSelected = -1;
        return _this;
    }
    /**
     * @inheritDoc
     */
    Tabs.prototype.componentWillReceiveProps = function (nextProps, nextContext) {
        _super.prototype.componentWillReceiveProps.call(this, nextProps, nextContext);
        this.showPanel(nextProps.selectedTabIndex);
    };
    /**
     * @inheritDoc
     */
    Tabs.prototype.componentDidMount = function () {
        var domElement = ReactDOM.findDOMNode(this);
        if (domElement) {
            var tabViewContentList = domElement.firstElementChild.firstElementChild.children[1];
            var tabViewList = tabViewContentList.firstElementChild;
            var listTabs = tabViewList.children;
            this.scrollGap = listTabs.item(0).clientWidth;
            window.addEventListener("resize", this.resizeListener);
            this.setState({ tabsScroll: tabViewContentList.clientWidth <= tabViewList.clientWidth });
            this.showPanel(this.state.selectedTabIndex);
        }
    };
    /**
     * @inheritDoc
     */
    Tabs.prototype.componentWillUnmount = function () {
        window.removeEventListener("resize", this.resizeListener);
    };
    /**
     * retourne l'id en tant que prefixe
     */
    Tabs.prototype.prefixWithId = function () {
        return this.state.id + "-";
    };
    /**
     * retourne le nombre d'onglet présent dans le tabs
     * @returns {number}
     */
    Tabs.prototype.getTabsNumber = function () {
        return this.elementsTabReact.length;
    };
    /**
     * retourne la position de l'onglet dans la liste des onglets
     * @param {number} index
     * @returns {number}
     */
    Tabs.prototype.getTabPosition = function (index) {
        return this.elementsTab.indexOf(this.getTabByIndex(index));
    };
    /**
     * retourne l'index de l'onglet à la position donnée
     * @param {number} position
     */
    Tabs.prototype.getIndexAt = function (position) {
        var elem = this.elementsTab[position];
        if (elem) {
            return elem.props.index;
        }
    };
    /**
     * rafraichit les onglets
     */
    Tabs.prototype.refresh = function () {
        this.elementsHeaderTech = [];
        this.elementsHeaderReact = [];
        this.elementsTabReact = [];
        this.elementsTab = [];
        this.forceUpdate();
    };
    /**
     * Permet d'ajouter des onglets
     * @param {number} position de l'onglet
     */
    Tabs.prototype.addElements = function (position, tab, cb) {
        var _this = this;
        var newTarget = position;
        var tabs = [];
        if (!Array.isArray(tab)) {
            tabs.push(tab);
        }
        else {
            tabs = tab;
        }
        tabs.forEach(function (newTab) {
            _this.elementsHeaderReact.splice(newTarget, 0, _this.createTabsHeader(newTab));
            _this.elementsTabReact.splice(newTarget, 0, _this.createWrap(newTab));
            newTarget++;
        });
        this.forceUpdate(cb);
    };
    /**
     * Permet de supprimer des onglets
     * Attention les index n'ont pas de lien avec l'ordre d'affichage
     * @param {number[]} indexes : l'indice des onglets
     */
    Tabs.prototype.removeElementsByIndex = function () {
        var _this = this;
        var indexes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indexes[_i] = arguments[_i];
        }
        indexes.forEach(function (index) {
            _this.removeHeaderTech({ index: index });
            _this.removeTab({ index: index });
        });
        this.forceUpdate();
    };
    /**
     * Permet de récup un onglet par son id
     * @param {number} id : l'id de l'onglets
     * @return the Tab
     */
    Tabs.prototype.getTabById = function (id) {
        return this.elementsTab ? _.find(this.elementsTab, { props: { id: id } }) : null;
    };
    /**
     * Permet de récup des onglet par son index
     * @param {number} id : l'id de l'onglets
     * @return the Tab
     */
    Tabs.prototype.getTabByIndex = function (index) {
        return this.elementsTab ? _.find(this.elementsTab, { props: { index: index } }) : null;
    };
    /**
     * Permet de supprimer des onglets
     * @param {number[]} id : l'id des onglets
     */
    Tabs.prototype.removeElementsById = function () {
        var _this = this;
        var ids = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            ids[_i] = arguments[_i];
        }
        ids.forEach(function (id) {
            _this.removeHeaderTech({ id: id });
            _this.removeTab({ id: id });
        });
        this.forceUpdate();
    };
    /**
     * Permet de supprimer des onglets et de passer un callback
     * @param {string | string[]} ids
     * @param cb
     */
    Tabs.prototype.removeElementsByIdWithCb = function (ids, cb) {
        var _this = this;
        if (ids instanceof Array) {
            ids.forEach(function (id) {
                _this.removeHeaderTech({ id: id });
                _this.removeTab({ id: id });
            });
        }
        else {
            this.removeHeaderTech({ id: ids });
            this.removeTab({ id: ids });
        }
        this.forceUpdate(cb);
    };
    /**
     * @return renvoie l'indice de onglet courant
     */
    Tabs.prototype.getCurrentIndexSelected = function () {
        return this.state.selectedTabIndex;
    };
    /**
     * Permet de supprimer un TabsHeaderTech (instance + JSX.Element)
     */
    Tabs.prototype.removeHeaderTech = function (criteria) {
        _.remove(this.elementsHeaderReact, { props: criteria });
        _.remove(this.elementsHeaderTech, { props: criteria });
    };
    /**
     * Permet de supprimer un Tab (instance + JSX.Element)
     */
    Tabs.prototype.removeTab = function (criteria) {
        _.remove(this.elementsTabReact, { props: criteria });
        _.remove(this.elementsTab, { props: criteria });
    };
    /**
     * Création JSX.Element de TabsHeaderTech
     */
    Tabs.prototype.createTabsHeader = function (tab) {
        var _this = this;
        var index = this.tabsHeaderIndex;
        this.tabsHeaderIndex++;
        return (React.createElement(TabsHeaderTech, { index: index, key: "tabHeadertech-" + index, isVisible: tab.props.isVisible, tab: tab, id: tab.props.id, prefixWithId: this.prefixWithId, handleKeyDown: this.handleKeyDown, handleFocus: this.handleFocus, castBooleanInNumber: this.castBooleanInNumber, deleteTabFunction: tab.props.deleteTabFunction ? tab.props.deleteTabFunction : this.props.deleteTabFunction, deleteButtonTitle: tab.props.deleteButtonTitle ? tab.props.deleteButtonTitle : this.props.deleteButtonTitle, isDeletable: tab.props.isDeletable, selected: this.state.selectedTabIndex === index, ref: function (tabHeader) {
                if (tabHeader) {
                    _this.elementsHeaderTech.push(tabHeader);
                }
            } }));
    };
    /**
     * Création d'un JSX.Element de Tab (Wrap)
     */
    Tabs.prototype.createWrap = function (tab) {
        var _this = this;
        // définition des props des composants enfants
        var currentIndex = this.tabsContentIndex;
        this.tabsContentIndex++;
        var childPropsSetByParent = {
            id: tab.props.id ? tab.props.id : this.prefixWithId() + currentIndex,
            panelId: tab.props.panelId ? tab.props.panelId : this.prefixWithId() + this.state.panelId + "-" + currentIndex,
            isVisible: (currentIndex === this.state.selectedTabIndex),
            prefixId: this.prefixWithId(),
            index: currentIndex,
            ref: function (tab) {
                if (tab)
                    _this.elementsTab.push(tab);
            },
            key: "tabContent" + this.prefixWithId() + currentIndex
        };
        return this.wrap(tab_1.Tab, childPropsSetByParent, tab.props);
    };
    /**
     * @inheritDock
     */
    Tabs.prototype.render = function () {
        var _this = this;
        logger.trace("Rendu Onglets, Nombre de composants fils =", React.Children.count(this.state.children), this.elementsHeaderTech.length);
        var tableauDesTabs;
        if (this.elementsHeaderTech.length == 0) {
            tableauDesTabs = this.getTabs(this.state.children);
            _.forEach(tableauDesTabs, function (item) {
                _this.elementsHeaderReact.push(_this.createTabsHeader(item));
            });
        }
        if (this.elementsTab.length == 0) {
            _.forEach(tableauDesTabs, function (item) {
                _this.elementsTabReact.push(_this.createWrap(item));
            });
        }
        var classNameUl = classNames({
            "tabview-list": true,
            "txtcenter": true,
            "clearfix": true,
        });
        var classTabRightPicto = classNames({
            "tabs-arrow-right": true,
            "disabled": false,
            "fr": true
        });
        var classTabLeftPicto = classNames({
            "tabs-arrow-left": true,
            "disabled": true,
            "fr": true
        });
        var classTabviewPictoList = classNames({
            "tabviewPictoList": true,
            "tabviewPictoList-hidden": !this.state.tabsScroll
        });
        var classTabsViewHeader = classNames({
            "tabviewHeader": true,
            "tabs-group": true
        });
        return (React.createElement("div", { className: "tabview", onTouchStart: this.handleTouchStart, onTouchMove: this.handleTouchStart },
            React.createElement("div", { className: "tabviewHeaderContent" },
                React.createElement("div", { className: classTabsViewHeader },
                    React.createElement("div", { className: classTabviewPictoList, id: this.prefixWithId() + "tabviewPictoList", ref: function (div) {
                            _this.tabviewPictoList = div;
                        } },
                        React.createElement("a", { className: classTabRightPicto, onClick: this.onClickRightPicto, href: "#", title: this.i18n("tabs.arrow-right"), ref: function (a) {
                                _this.tabRightPicto = a;
                            } },
                            React.createElement("span", { className: "tabs-arrow-hidden-label" },
                                " ",
                                this.i18n("tabs.arrow-right"))),
                        React.createElement("a", { className: classTabLeftPicto, onClick: this.onClickLeftPicto, href: "#", title: this.i18n("tabs.arrow-left"), ref: function (a) {
                                _this.tabLeftPicto = a;
                            } },
                            React.createElement("span", { className: "tabs-arrow-hidden-label" },
                                " ",
                                this.i18n("tabs.arrow-left")))),
                    React.createElement("div", { className: "tabviewContentList", id: this.prefixWithId() + "tabviewContentList", ref: function (div) {
                            _this.tabviewContentList = div;
                        }, onTouchStart: this.handleTouchStart, onTouchMove: this.handleTouchStart },
                        React.createElement("ul", { className: classNameUl, role: "tablist" }, this.elementsHeaderReact),
                        this.state.addTabFunction ? React.createElement("button", { className: "tabs-add-button", type: "button", title: this.props.addButtonTtitle ? this.props.addButtonTtitle : this.i18n("tabs.add-button"), onClick: this.state.addTabFunction, id: this.prefixWithId() + "add-button" },
                            React.createElement("span", { className: "tabs-button-label" }, this.props.addButtonTtitle ? this.props.addButtonTtitle : this.i18n("tabs.add-button"))) : null))),
            React.createElement("div", { className: "tabViewBody" }, this.elementsTabReact)));
    };
    Tabs.prototype.handleTouchStart = function () {
        this.isTouchScreen = true;
        var classTabViewContentList = classNames({
            "tabviewContentList": true,
            "touch": true
        });
        this.tabviewContentList.className = classTabViewContentList;
        var classTabviewPictoList = classNames({
            "tabviewPictoList": true,
            "touch": true
        });
        this.tabviewPictoList.className = classTabviewPictoList;
    };
    Tabs.prototype.manageScrollButtonStyle = function (scroll) {
        if (!this.isTouchScreen) {
            var element = document.getElementById(this.prefixWithId() + "tabviewContentList");
            this.scrollElement(scroll, element);
            this.detectScrollRequired();
            this.setScrollButtonsStyle(element);
        }
    };
    Tabs.prototype.setScrollButtonsStyle = function (element) {
        var maxScrollLeft = element.scrollWidth - element.clientWidth;
        var isTabRightPictoDisabled = (element.scrollLeft == maxScrollLeft);
        var isTabLeftPictoDisabled = (element.scrollLeft == 0);
        var classTabRightPicto = classNames({
            "tabs-arrow-right": true,
            "disabled": isTabRightPictoDisabled,
            "fr": true
        });
        var classTabLeftPicto = classNames({
            "tabs-arrow-left": true,
            "disabled": isTabLeftPictoDisabled,
            "fr": true
        });
        var classTabviewPictoList = classNames({
            "tabviewPictoList": true,
            "tabviewPictoList-hidden": !this.state.tabsScroll
        });
        this.tabviewPictoList.className = classTabviewPictoList;
        this.tabRightPicto.className = classTabRightPicto;
        this.tabLeftPicto.className = classTabLeftPicto;
    };
    Tabs.prototype.detectScrollRequired = function () {
        var domElement = ReactDOM.findDOMNode(this);
        if (domElement) {
            var tabViewContentList = domElement.firstElementChild.firstElementChild.children[1];
            var tabViewList = tabViewContentList.firstElementChild;
            this.setState({ tabsScroll: tabViewContentList.clientWidth <= tabViewList.clientWidth });
        }
    };
    Tabs.prototype.scrollElement = function (scroll, element) {
        switch (scroll) {
            case TabsButtonScrolling.RIGHT:
                element.scrollLeft = element.scrollLeft + this.scrollGap;
                break;
            case TabsButtonScrolling.LEFT:
                element.scrollLeft = element.scrollLeft - this.scrollGap;
                break;
            default:
                break;
        }
    };
    Tabs.prototype.onClickRightPicto = function () {
        this.manageScrollButtonStyle(TabsButtonScrolling.RIGHT);
    };
    Tabs.prototype.onClickLeftPicto = function () {
        this.manageScrollButtonStyle(TabsButtonScrolling.LEFT);
    };
    Tabs.prototype.getTabs = function (children) {
        var tableauDesTabs = [];
        React.Children.map(children, function (child) {
            if (child.type === tab_1.Tab) {
                tableauDesTabs.push(child);
            }
        });
        return tableauDesTabs;
    };
    Tabs.prototype.castBooleanInNumber = function (bool) {
        return (bool) ? null : -1;
    };
    /**
     * change l'onglet actif
     * @param index index de l'onglet a activé
     */
    Tabs.prototype.showPanel = function (index) {
        var _this = this;
        if (this.state.beforeSelected != index) {
            if (this.state.beforeSelected != -1) {
                var tab_2 = _.find(this.elementsTab, { props: { index: this.state.beforeSelected } });
                if (tab_2 && this.props.beforeHideTab) {
                    this.props.beforeHideTab(tab_2, this.state.beforeSelected);
                }
            }
            this.state.beforeSelected = index;
            this.elementsTab.map(function (item) {
                item.setState({ isVisible: false });
            });
            this.elementsHeaderTech.map(function (item) {
                item.setState({ selected: false });
            });
            var tab_3 = _.find(this.elementsTab, { props: { index: index } });
            var header = _.find(this.elementsHeaderTech, { props: { index: index } });
            if (tab_3) {
                if (tab_3.props.onClick) {
                    tab_3.props.onClick(tab_3, header, index);
                }
                header.setState({ selected: true });
                var isAsyncTab_1 = !tab_3.state.mount;
                tab_3.setState({ isVisible: true, mount: true, spinner: true }, function () {
                    if (isAsyncTab_1) {
                        if (!(tab_3.state.children && tab_3.state.children.props && tab_3.state.children.props.dataSource)) {
                            tab_3.setState({ spinner: false });
                        }
                    }
                    else {
                        tab_3.setState({ spinner: false });
                    }
                    if (_this.props.afterShowTab) {
                        _this.props.afterShowTab(tab_3, _this.state.beforeSelected);
                    }
                });
            }
        }
    };
    Tabs.prototype.setSelectedIndexByKeyboard = function (index, mode) {
        var tabCount = this.elementsHeaderReact.length;
        switch (mode) {
            case TabsKeyboardNavigation.NEXT:
                if (index < tabCount - 1) {
                    index++;
                }
                else {
                    index = 0;
                }
                break;
            case TabsKeyboardNavigation.PREVIOUS:
                if (index > 0) {
                    index--;
                }
                else {
                    index = tabCount - 1;
                }
                break;
            case TabsKeyboardNavigation.HOME:
                index = 0;
                break;
            case TabsKeyboardNavigation.END:
                index = tabCount - 1;
                break;
            default:
                break;
        }
        return index;
    };
    /**
     * Gère les évèvenements clavier déclenchés
     * @param e évènement
     */
    Tabs.prototype.handleKeyDown = function (e) {
        if (!(e.ctrlKey || e.shiftKey || e.altKey || e.metaKey)) {
            var keyCode = e.keyCode;
            switch (keyCode) {
                case key_codes_1.KeyCodes.RIGHT_ARROW:
                    this.rightArrowKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.LEFT_ARROW:
                    this.leftArrowKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.DOWN_ARROW:
                    this.downArrowKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.UP_ARROW:
                    this.upArrowKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.HOME:
                    this.homeKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.END:
                    this.endKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.PAGE_UP:
                    this.pageUpKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.PAGE_DOWN:
                    this.pageDownKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.ENTER:
                    this.enterKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.F2:
                    this.f2KeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.ESCAPE:
                    this.escapeKeyDownHandler(e);
                    break;
                case key_codes_1.KeyCodes.TAB:
                    this.tabKeyDownHandler(e);
                    break;
                default:
                    break;
            }
        }
    };
    Tabs.prototype.handleFocus = function (e) {
        var target = e.currentTarget;
        var id = target.firstElementChild.id;
        this.state.selectedTabIndex = +id.replace(this.prefixWithId() + "tabList-item-", "");
        this.manageScrollButtonStyle();
        this.showPanel(this.state.selectedTabIndex);
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.rightArrowKeyDownHandler = function (e) {
        this.setSelectedTabIndexAndFocus(TabsKeyboardNavigation.NEXT);
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.leftArrowKeyDownHandler = function (e) {
        this.setSelectedTabIndexAndFocus(TabsKeyboardNavigation.PREVIOUS);
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.downArrowKeyDownHandler = function (e) {
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.upArrowKeyDownHandler = function (e) {
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.homeKeyDownHandler = function (e) {
        this.setSelectedTabIndexAndFocus(TabsKeyboardNavigation.HOME);
    };
    Tabs.prototype.setSelectedTabIndexAndFocus = function (mode) {
        var source = _.findIndex(this.elementsHeaderReact, { props: { index: this.state.selectedTabIndex } });
        var next = this.setSelectedIndexByKeyboard(source, mode);
        this.state.selectedTabIndex = this.elementsHeaderReact[next].props.index;
        var target = _.find(this.elementsHeaderTech, { props: { index: this.state.selectedTabIndex } });
        target.refs.link.focus();
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.endKeyDownHandler = function (e) {
        this.setSelectedTabIndexAndFocus(TabsKeyboardNavigation.END);
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.pageUpKeyDownHandler = function (e) {
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.pageDownKeyDownHandler = function (e) {
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.enterKeyDownHandler = function (e) {
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.f2KeyDownHandler = function (e) {
    };
    /**
     * A surcharger éventuellement
     * @param e
     */
    Tabs.prototype.escapeKeyDownHandler = function (e) {
    };
    Tabs.prototype.tabKeyDownHandler = function (e) {
    };
    Tabs.defaultProps = {
        panelId: "panel",
        selectedTabIndex: 0
    };
    return Tabs;
}(hornet_component_1.HornetComponent));
exports.Tabs = Tabs;

//# sourceMappingURL=tabs.js.map
