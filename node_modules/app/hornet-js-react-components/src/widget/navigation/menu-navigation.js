"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var React = require("react");
var menu_constantes_1 = require("hornet-js-components/src/utils/menu-constantes");
var navigation_utils_1 = require("hornet-js-components/src/utils/navigation-utils");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var menu_link_1 = require("hornet-js-react-components/src/widget/navigation/menu-link");
var classNames = require("classnames");
var key_codes_1 = require("hornet-js-components/src/event/key-codes");
var layout_switcher_1 = require("hornet-js-react-components/src/widget/screen/layout-switcher");
var expandBreakPointSize = 1640;
var expandSecondBreakPointSize = 1400;
var expandMenuSize = "16.5%";
var expandReducMenuSize = "20%";
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.widget.navigation.menu-navigation");
/**
 * Menu Item
 */
var MenuItem = /** @class */ (function (_super) {
    tslib_1.__extends(MenuItem, _super);
    function MenuItem(props, context) {
        var _this = _super.call(this, props, context) || this;
        /* calcule la taille des menus*/
        var test = hornet_js_utils_1.Utils.getCls("hornet.pageLayoutWidth");
        var style = {
            width: ""
        };
        var isSubMenu = _this.state.isSubMenu;
        if (!isSubMenu) {
            if (window.innerWidth > expandBreakPointSize) {
                style = {
                    width: ((test === "")) ? expandMenuSize : ""
                };
            }
            else if (window.innerWidth > expandSecondBreakPointSize) {
                style = {
                    width: ((test === "")) ? expandReducMenuSize : ""
                };
            }
        }
        _this.state.style = style;
        return _this;
    }
    /**
     * Calcule la taille du menu en fonction de la taille de l'écran
     */
    MenuItem.prototype.resizeMenu = function () {
        var test = hornet_js_utils_1.Utils.getCls("hornet.pageLayoutWidth");
        var style = {
            width: ""
        };
        var isSubMenu = this.state.isSubMenu;
        if (!isSubMenu) {
            if (window.innerWidth > expandBreakPointSize) {
                style = {
                    width: ((test === "")) ? expandMenuSize : ""
                };
            }
            else if (window.innerWidth > expandSecondBreakPointSize) {
                style = {
                    width: ((test === "")) ? expandReducMenuSize : ""
                };
            }
        }
        this.setState({ style: style });
    };
    /**
     * Change la taille du menu lorque la taille de l'écran est modifiée
     */
    MenuItem.prototype.handleResize = function () {
        this.resizeMenu();
    };
    /**
     * @inheritDoc
     */
    MenuItem.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        window.addEventListener("resize", this.handleResize);
        this.listen(layout_switcher_1.UPDATE_PAGE_EXPAND, this.resizeMenu);
    };
    /**
     * @inheritDoc
     */
    MenuItem.prototype.componentWillUnmount = function () {
        _super.prototype.componentWillUnmount.call(this);
        window.removeEventListener("resize", this.handleResize);
        this.remove(layout_switcher_1.UPDATE_PAGE_EXPAND, this.resizeMenu);
    };
    /**
     * @inheritDoc
     */
    MenuItem.prototype.render = function () {
        var item = this.state.item;
        var isSubMenu = this.state.isSubMenu;
        if (item.visibleDansMenu) {
            logger.debug("MenuItem.render item.id : ", item.id);
            var attributesLi = {};
            var active = false;
            if (typeof window !== "undefined") {
                var url = window.location.pathname;
                var ind = url.indexOf(this.getContextPath());
                if (ind > -1) {
                    url = url.substring(this.getContextPath().length, url.length);
                }
                var activeMenu = navigation_utils_1.NavigationUtils.getCurrentItem([this.state.item], url);
                if (activeMenu) {
                    active = true;
                }
            }
            /*on créer un identifiant pour la balise li*/
            attributesLi.id = this.getLiId();
            var isHidden = !(this.isVisible());
            var isActive = (active) ? " is-active" : "";
            var hidden = (isHidden) && !(active) ? " " + menu_constantes_1.MASKED_CLASSNAME : "";
            attributesLi.className = (isSubMenu) ? "sub-nav-item" : "nav-item";
            attributesLi.className = attributesLi.className + hidden + isActive;
            var expanded = window.innerWidth > 1200 ? true : !isHidden;
            attributesLi.role = (item.level < 2) ? "presentation" : null;
            var subMenu = React.createElement("div", null);
            if (item.url && navigation_utils_1.NavigationUtils.hasVisibleSubMenu(item)) {
                logger.warn("Le menu «" + this.i18n(item.text) + "» possède des sous menus, il ne devrait pas avoir d'url");
            }
            var menuName = item.text.replace(/\./g, "-");
            attributesLi.className += " menu-" + menuName;
            var closeOnLinkClick = this.props.closeOnLinkClick;
            if (this.hasSubMenu()) {
                subMenu = React.createElement(MenuNavigation, { items: item.submenu, level: item.level + 1, idParent: item.id, closeMenu: this.state.closeMenu, dataPassThru: this.state.dataPassThru, closeOnLinkClick: closeOnLinkClick });
            }
            return (React.createElement("li", tslib_1.__assign({}, attributesLi, { "aria-expanded": expanded, onKeyDown: this.handleKeyDown, style: this.state.style }),
                React.createElement(menu_link_1.MenuLink, { item: item, closeMenu: this.state.closeMenu, onClick: this.hideOrShowChildren, dataPassThru: this.props.dataPassThru, closeOnLinkClick: closeOnLinkClick }),
                subMenu));
        }
        else {
            return null;
        }
    };
    /**
     * Fait apparaitre ou disparaitre les sous menus
     */
    MenuItem.prototype.hideOrShowChildren = function () {
        var item = this.state.item;
        var liId = this.getLiId();
        var elem = document.getElementById(liId);
        if (elem) {
            var isVisible = navigation_utils_1.NavigationUtils.isVisible(elem);
            if (isVisible) {
                navigation_utils_1.NavigationUtils.hideElement(elem);
            }
            else {
                navigation_utils_1.NavigationUtils.showElement(elem);
            }
        }
    };
    /**
     * teste si le sous menu est visible ou non
     * @returns {boolean|any} le sous menu est visible
     */
    MenuItem.prototype.isVisible = function () {
        var liId = this.getLiId();
        var elem = document.getElementById(liId);
        if (elem) {
            return navigation_utils_1.NavigationUtils.isVisible(elem);
        }
        return false;
    };
    /**
     * test si le menu parent est visible
     * @returns {boolean} le menu parent est visible
     */
    MenuItem.prototype.isParentVisible = function () {
        var liId = this.getLiId();
        var ind = liId.lastIndexOf(menu_constantes_1.LVL_SEPARATOR);
        var parentLiId = liId.substring(0, ind);
        var parentLi = document.getElementById(parentLiId);
        if (parentLi) {
            return navigation_utils_1.NavigationUtils.isVisible(parentLi);
        }
        return false;
    };
    /*
     * Retourne l'identiant de la balise li du menu item
     * @returns {string} identifiant de la balise li
     */
    MenuItem.prototype.getLiId = function () {
        var item = this.state.item;
        var liId = item.id.substring(menu_constantes_1.MENU_ROOT.length - 1, item.id.length);
        return "li" + liId;
    };
    /**
     * Ferme le menu contenant le menu item
     */
    MenuItem.prototype.hideMenu = function () {
        var isSubMenu = this.state.isSubMenu;
        if (isSubMenu) {
            var item = this.state.item;
            if (this.hasSubMenu()) {
                this.hideOrShowChildren();
            }
            else {
                var liId = this.getLiId();
                var ind = liId.lastIndexOf(menu_constantes_1.LVL_SEPARATOR);
                var parentLiId = liId.substring(0, ind);
                var parentLi = document.getElementById(parentLiId);
                if (parentLi) {
                    navigation_utils_1.NavigationUtils.hideElement(parentLi);
                    var navId = "nav" + parentLiId.substring(2, parentLiId.length);
                    navigation_utils_1.NavigationUtils.setFocus(navId);
                }
            }
        }
    };
    /**
     * cache un menu et tous ses sous-menus
     * @param parentId identifiant de la balise li qui doit être cachée
     */
    MenuItem.prototype.hideAllMenu = function (parentId) {
        var elem = document.getElementById(parentId);
        if (elem) {
            navigation_utils_1.NavigationUtils.hideElement(elem);
        }
        /*On récupère le premier item du sous menu, si il n'existe pas, il n'y a pas de sous-menu*/
        var firstChildId = parentId + menu_constantes_1.LVL_SEPARATOR + 0;
        var childElem = document.getElementById(firstChildId);
        var ind = 0;
        if (childElem) {
            while (childElem) {
                var id = parentId + menu_constantes_1.LVL_SEPARATOR + ind;
                this.hideAllMenu(id);
                ind++;
                id = parentId + menu_constantes_1.LVL_SEPARATOR + ind;
                childElem = document.getElementById(id);
            }
        }
    };
    /**
     * ferme tous les menu parents et va au menu suivant
     */
    MenuItem.prototype.hideAllParentMenu = function () {
        var liId = this.getLiId();
        var ind = liId.indexOf(menu_constantes_1.LVL_SEPARATOR, 3);
        liId = liId.substring(0, ind);
        this.hideAllMenu(liId);
    };
    /**
     * teste si le menu a des sous menus
     * @returns {boolean} le menu a des sous menus
     */
    MenuItem.prototype.hasSubMenu = function () {
        return this.state.item.submenu && this.state.item.submenu.length > 0;
    };
    /**
     * Fonction appelée lors d'un appui de touche sur un élément de menu.
     * @param e évenèment déclencheur
     * @protected
     */
    MenuItem.prototype.handleKeyDown = function (event) {
        var keyCode = event.keyCode;
        var isVisible = this.isVisible();
        var isSubMenu = this.state.isSubMenu;
        switch (keyCode) {
            case key_codes_1.KeyCodes.DOWN_ARROW:
                /*si c'est un sous menu on rend visible ses items */
                if (!isSubMenu && !isVisible) {
                    if (this.hasSubMenu()) {
                        this.hideOrShowChildren();
                    }
                }
                break;
            case key_codes_1.KeyCodes.RIGHT_ARROW:
                /*si c'est un sous menu on cache/rend visible ses items s'il en a
                * ou on ferme le menu et on passe au suivant si il n'en a pas*/
                if (isSubMenu && !isVisible) {
                    if (this.hasSubMenu()) {
                        this.hideOrShowChildren();
                    }
                    else {
                        this.hideAllParentMenu();
                    }
                }
                break;
            case key_codes_1.KeyCodes.LEFT_ARROW:
                /*si c'est un item n'ayant pas de sous menu, on le cache*/
                if (isSubMenu) {
                    if (isVisible || !(this.hasSubMenu())) {
                        this.hideMenu();
                    }
                    else {
                        var liId = this.getLiId();
                        var ind = liId.lastIndexOf(menu_constantes_1.LVL_SEPARATOR);
                        liId = liId.substring(0, ind);
                        this.hideAllMenu(liId);
                    }
                }
                break;
            case key_codes_1.KeyCodes.ENTER:
                var navId = this.state.item.id;
                navId = navId + menu_constantes_1.LVL_SEPARATOR + "0";
                navigation_utils_1.NavigationUtils.setFocus(navId);
        }
    };
    MenuItem.defaultProps = {
        item: {},
        isSubMenu: false,
        isVisible: false
    };
    return MenuItem;
}(hornet_component_1.HornetComponent));
exports.MenuItem = MenuItem;
/**
 * Groupe d'éléments de menu
 * @type {ComponentClass<MenuNavigationProps>}
 */
var MenuNavigation = /** @class */ (function (_super) {
    tslib_1.__extends(MenuNavigation, _super);
    function MenuNavigation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MenuNavigation.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        var id = "nav" + menu_constantes_1.LVL_SEPARATOR + "0";
        var element = document.getElementById(id);
        if (element) {
            element.focus();
        }
    };
    /**
     * @inheritDoc
     */
    MenuNavigation.prototype.render = function () {
        var level = this.props.level;
        var isVisible = this.props.isVisible;
        logger.debug("MenuNavigation.render idParent : ", this.state.idParent);
        var infoComplementaires;
        // Menu de premier niveau
        if (this.state.level == 0) {
            infoComplementaires = this.state.infosComplementaires;
        }
        else {
            infoComplementaires = React.createElement("div", null);
        }
        var closeMenu = this.state.closeMenu;
        var isSubMenu = (this.state.level != 0);
        var indexKey = 0;
        var dataPassThru = this.props.dataPassThru;
        var closeOnLinkClick = this.props.closeOnLinkClick;
        var items = this.state.items.map(function (item) {
            if (item.visibleDansMenu) {
                indexKey++;
                return React.createElement(MenuItem, { item: item, isSubMenu: isSubMenu, key: indexKey + item.text + item.url, closeMenu: closeMenu, dataPassThru: dataPassThru, closeOnLinkClick: closeOnLinkClick });
            }
        });
        var classes = {
            "nav": true,
            "flex-container": true,
            "sub-nav-1": (level == 1),
            "sub-nav-2": (level == 2),
            "masked": !isVisible
        };
        var attributesUl = {};
        attributesUl.className = classNames(classes);
        if (level == 0) {
            /* le premier niveau de menu est horizontal */
            attributesUl.onKeyDown = this.onKeyDownHorizontalMenu;
        }
        else {
            /* les sous menus sont ensuite verticaux */
            attributesUl.onKeyDown = this.onKeyDownVerticalMenu;
        }
        attributesUl.role = (level == 0) ? "menubar" : "menu";
        attributesUl["aria-labelledby"] = (this.state.idParent) ? this.state.idParent : null;
        return (React.createElement("ul", tslib_1.__assign({}, attributesUl),
            items,
            infoComplementaires));
    };
    /**
     * @param id identifiant de l'élément de menu
     * @return {number} l'index de l'élément parent au niveau de menu zéro (0 pour le premier élément)
     */
    MenuNavigation.getRootParentIndex = function (id) {
        var beginIndex = menu_constantes_1.MENU_ROOT.length;
        var endIndex = id.indexOf(menu_constantes_1.LVL_SEPARATOR, beginIndex);
        if (endIndex < 0) {
            endIndex = id.length;
        }
        return parseInt(id.substr(beginIndex, endIndex));
    };
    /**
     * @param e évènement clavier
     * @returns {boolean} true lorsque l'évènement clavier à au moins l'un des modificateurs actifs (tels que Alt, Ctrl, etc...)
     */
    MenuNavigation.prototype.hasKeyModifier = function (e) {
        return (e != null && (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey));
    };
    /**
     * Fonction appelée lors d'un appui de touche sur un élément de menu horizontal.
     * @param e évenèment déclencheur
     * @protected
     */
    MenuNavigation.prototype.onKeyDownHorizontalMenu = function (e) {
        if (!this.hasKeyModifier(e)) {
            /* On ne prend en compte que les évènements clavier sans modificateur, pour ne pas surcharger
             * des raccourcis standards tels Alt+ArrowLeft */
            var keyCode = e.keyCode;
            var id = e.target["id"];
            if (id) {
                var lastSeparatorIndex = id.lastIndexOf(menu_constantes_1.LVL_SEPARATOR);
                var itemHierarchy = id.substr(0, lastSeparatorIndex + 1);
                var itemIndex = parseInt(id.substr(lastSeparatorIndex + 1, id.length));
                var items = this.state.items;
                /* Element de menu courant : peut être null lorsqu'on est sur un élément MenuInfosComplementaires */
                var item = items[itemIndex];
                var idToFocus = id;
                var preventDefault = true;
                switch (keyCode) {
                    case key_codes_1.KeyCodes.RIGHT_ARROW:
                        // on n'est pas sur le dernier item du niveau : vers item suivant de même niveau
                        /* Attention il y a éventuellement des MenuInfosComplementaires à la suite de items */
                        if (MenuNavigation.isElementExists(itemHierarchy + (itemIndex + 1))) {
                            idToFocus = itemHierarchy + (itemIndex + 1);
                        } // sinon retour au premier item de même niveau
                        else {
                            idToFocus = items[0].id;
                        }
                        break;
                    case key_codes_1.KeyCodes.LEFT_ARROW:
                        // on n'est pas sur le premier item du niveau : vers item précédent de même niveau
                        if (itemIndex > 0) {
                            idToFocus = items[itemIndex - 1].id;
                        } // sinon retour au dernier item de même niveau
                        else {
                            //indiceToFocus = items[items.length - 1].index;
                            var indexToFocus = items.length - 1;
                            /* On ne se base pas sur items.length car il y a éventuellement des MenuInfosComplementaires à la suite */
                            var last = false;
                            while (!last) {
                                //if (MenuNavigation.isElementExists(indiceToFocus + 1)) {
                                if (MenuNavigation.isElementExists(itemHierarchy + (indexToFocus + 1))) {
                                    //indiceToFocus++;
                                    indexToFocus++;
                                }
                                else {
                                    last = true;
                                }
                            }
                            idToFocus = itemHierarchy + indexToFocus;
                        }
                        break;
                    case key_codes_1.KeyCodes.DOWN_ARROW:
                        /*  sous-menu existant : on va au premier élément du sou-menu */
                        if (item && item.submenu && item.submenu[0]) {
                            //indiceToFocus = item.submenu[0].index;
                            idToFocus = item.submenu[0].id;
                        }
                        break;
                    case key_codes_1.KeyCodes.UP_ARROW:
                        // on ne fait un changement qu'à partir du niveau 2
                        break;
                    case key_codes_1.KeyCodes.ESCAPE:
                        navigation_utils_1.NavigationUtils.setFocus("menu-main");
                        break;
                    case key_codes_1.KeyCodes.ENTER:
                    case key_codes_1.KeyCodes.SPACEBAR:
                        idToFocus = id + menu_constantes_1.LVL_SEPARATOR + "0";
                    default:
                        preventDefault = false;
                }
                if (idToFocus != id) {
                    navigation_utils_1.NavigationUtils.setFocus(idToFocus);
                }
                /* On supprime le comportement par défaut pour les touches utilisées pour la navigation : pour éviter par exemple de faire défiler les ascenseurs */
                if (preventDefault) {
                    e.preventDefault();
                }
            }
        }
    };
    /**
     * Fonction appelée lors d'un appui de touche sur un élément de menu vertical
     * @param e
     * @protected
     */
    MenuNavigation.prototype.onKeyDownVerticalMenu = function (e) {
        if (!this.hasKeyModifier(e)) {
            /* On ne prend en compte que les évènements clavier sans modificateur, pour ne pas surcharger
             * des raccourcis standards tels Alt+ArrowLeft */
            var key = e.keyCode;
            var id = e.target["id"];
            if (id) {
                var lastSeparatorIndex = id.lastIndexOf(menu_constantes_1.LVL_SEPARATOR);
                var itemHierarchy = id.substr(0, lastSeparatorIndex + 1);
                var itemIndex = parseInt(id.substr(lastSeparatorIndex + 1, id.length));
                var items = this.state.items;
                var idToFocus = id;
                var preventDefault = true;
                switch (key) {
                    case key_codes_1.KeyCodes.RIGHT_ARROW:
                        /* Element de menu courant : peut être null lorsqu'on est sur un élément MenuInfosComplementaires */
                        var item = items[itemIndex];
                        /*  sous-menu existant : on va au premier élément du sous-menu */
                        if (item && item.submenu && item.submenu[0]) {
                            idToFocus = item.submenu[0].id;
                        }
                        else {
                            /* On va à l"élément de niveau 0 suivant */
                            var rootParentIndex = MenuNavigation.getRootParentIndex(id);
                            /* On ne se base pas sur items.length car il y a éventuellement des MenuInfosComplementaires à la suite */
                            if (MenuNavigation.isElementExists(menu_constantes_1.MENU_ROOT + (rootParentIndex + 1))) {
                                idToFocus = menu_constantes_1.MENU_ROOT + (rootParentIndex + 1);
                            } // sinon retour au premier item de niveau 0
                            else {
                                idToFocus = menu_constantes_1.MENU_ROOT + "0";
                            }
                        }
                        break;
                    case key_codes_1.KeyCodes.ESCAPE:
                        /* On va à l"élément parent */
                        idToFocus = this.state.idParent;
                        break;
                    case key_codes_1.KeyCodes.LEFT_ARROW:
                        /* premier niveau de sous-menu : on va à l'élément de niveau 0 précédent*/
                        if (this.state.level == 1) {
                            var rootParentIndex = MenuNavigation.getRootParentIndex(id);
                            // on n'est pas sur le premier item du niveau : vers item précédent de même niveau
                            if (rootParentIndex > 0) {
                                idToFocus = menu_constantes_1.MENU_ROOT + (rootParentIndex - 1);
                            } // sinon retour au dernier item de même niveau
                            else {
                                var indexToFocus = rootParentIndex;
                                var last = false;
                                while (!last) {
                                    if (MenuNavigation.isElementExists(menu_constantes_1.MENU_ROOT + (indexToFocus + 1))) {
                                        indexToFocus++;
                                    }
                                    else {
                                        last = true;
                                    }
                                }
                                idToFocus = menu_constantes_1.MENU_ROOT + (indexToFocus + 1);
                            }
                        }
                        else {
                            /* On va à l'élément parent */
                            idToFocus = this.state.idParent;
                        }
                        break;
                    case key_codes_1.KeyCodes.DOWN_ARROW:
                        // si on n'est pas sur le dernier item du niveau : vers item suivant de même niveau
                        if (itemIndex < (items.length - 1)) {
                            idToFocus = itemHierarchy + (itemIndex + 1);
                        } // sinon retour au premier item de même niveau
                        else {
                            idToFocus = items[0].id;
                        }
                        break;
                    case key_codes_1.KeyCodes.UP_ARROW:
                        // on n'est pas sur le premier item du niveau : vers item précédent de même niveau
                        if (itemIndex > 0) {
                            idToFocus = itemHierarchy + (itemIndex - 1);
                        } // sinon retour au dernier item de même niveau
                        else {
                            idToFocus = items[items.length - 1].id;
                        }
                        break;
                    case key_codes_1.KeyCodes.ENTER:
                    case key_codes_1.KeyCodes.SPACEBAR:
                        idToFocus = id + menu_constantes_1.LVL_SEPARATOR + "0";
                    default:
                        preventDefault = false;
                }
                if (idToFocus != id) {
                    navigation_utils_1.NavigationUtils.setFocus(idToFocus);
                }
                /* On stoppe si nécessaire la propagation pour éviter de redéclencher ce handler sur les éléments de menu parents */
                e.stopPropagation();
                /* On supprime le comportement par défaut pour les touches utilisées pour la navigation : pour éviter par exemple de faire défiler les ascenceurs */
                if (preventDefault) {
                    e.preventDefault();
                }
            }
        }
    };
    /**
     * Test si un element existe
     * @param id identifiant de l'élément à vérifier
     * @returns boolean
     * @protected
     */
    MenuNavigation.isElementExists = function (id) {
        return (document.getElementById(id) && document.getElementById(id).focus != null);
    };
    MenuNavigation.defaultProps = {
        items: [],
        level: 0
    };
    return MenuNavigation;
}(hornet_component_1.HornetComponent));
exports.MenuNavigation = MenuNavigation;

//# sourceMappingURL=menu-navigation.js.map
