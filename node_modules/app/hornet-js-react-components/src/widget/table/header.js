"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var array_utils_1 = require("hornet-js-utils/src/array-utils");
var React = require("react");
var classNames = require("classnames");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var menu_actions_1 = require("hornet-js-react-components/src/widget/table/menu-actions");
var toggle_columns_button_1 = require("hornet-js-react-components/src/widget/table/toggle-columns-button");
var table_state_1 = require("hornet-js-react-components/src/widget/table/table-state");
var confirm_1 = require("hornet-js-react-components/src/widget/dialog/confirm");
var paginate_datasource_1 = require("hornet-js-core/src/component/datasource/paginate-datasource");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-components.widget.table.header");
/**
 * Header de tableau
 */
var Header = /** @class */ (function (_super) {
    tslib_1.__extends(Header, _super);
    function Header(props, context) {
        var _this = _super.call(this, props, context) || this;
        if (!_this.props.id) {
            _this.state.id = _this.state.parentId;
        }
        _this.state.libelleNombreTotalItem = _this.state.libelleNombreTotalItem ?
            _this.state.libelleNombreTotalItem : "table.numberElementTitle";
        _this.state.items = [];
        _this.state.selectedItems = [];
        // gestion de l'event de changement de la liste des items du tableau
        _this.handleChangeDataTable = _this.handleChangeDataTable.bind(_this);
        _this.props.tableState.on(table_state_1.TableState.INDEX_CHANGE_EVENT, _this.handleChangeDataTable);
        // gestion de l'event d'edidtion du tableau
        _this.props.contentState.setMaxListeners(Infinity);
        _this.handleEdition = _this.handleEdition.bind(_this);
        _this.props.contentState.on(table_state_1.ContentState.EDITION_CLIC_EVENT, _this.handleEdition);
        _this.hiddenColumns = props.hiddenColumns;
        props.contentState.on(table_state_1.ContentState.TOGGLE_COLUMNS_EVENT, _this.handleChangeHiddenColumns);
        return _this;
    }
    Header.prototype.componentWillUnmount = function () {
        var _this = this;
        this.props.tableState.removeListener(table_state_1.TableState.INDEX_CHANGE_EVENT, this.handleChangeDataTable);
        this.props.contentState.removeListener(table_state_1.ContentState.EDITION_CLIC_EVENT, this.handleEdition);
        if (this.props.dataSourcesList) {
            this.props.dataSourcesList.map(function (dataSource, index) {
                _this.props.dataSourcesList[index].removeListener("select", _this.handleChangeDataTable);
            });
        }
    };
    Header.prototype.componentDidMount = function () {
        var _this = this;
        // gestion de l'event de selection des lignes du tableau
        // on s'abonne au select du dataSource de chaque content
        if (this.props.dataSourcesList && Array.isArray(this.props.dataSourcesList) && this.props.dataSourcesList.length > 0) {
            this.props.dataSourcesList.map(function (dataSource, index) {
                _this.props.dataSourcesList[index].setMaxListeners(Infinity);
                _this.props.dataSourcesList[index].on("select", _this.handleChangeDataTable);
            });
        }
        this.props.tableState.emit(table_state_1.TableState.RESIZE_EVENT, this.headerRef.clientWidth);
    };
    /**
     * @inheritDoc
     */
    Header.prototype.render = function () {
        var _this = this;
        logger.trace("render");
        var headerContainerProps = {
            id: this.state.id,
            className: classNames({
                "datatable-header-title": true,
                "flex-container": true,
                "badge-selected-items-before": this.state.contentState.hasCheckColumnMassSelection && this.getTotalSelectedItemsForAllDataSource() != 0
            }),
            "data-badge": this.getTotalSelectedItemsForAllDataSource(),
            tabIndex: this.state.tabIndex
        };
        return (React.createElement("div", tslib_1.__assign({}, headerContainerProps, { ref: function (instance) { _this.headerRef = instance; } }),
            React.createElement("div", { className: "datatable-title" },
                React.createElement("span", { className: "datatable-title-span" }, this.state.title + " " + this.i18n(this.state.libelleNombreTotalItem, { count: this.getTotalItemsForAllDataSource() }))),
            (!this.state.hideMenuActions) ? this.renderMenuActions() : null,
            React.createElement(confirm_1.Confirm, { ref: "alert", message: "", onClickCancel: this.closeAlert, onClickClose: this.closeAlert })));
    };
    /**
     * Méthode permettant de mettre à jour le nombre de colonnes
     * @param hiddenColumns
     */
    Header.prototype.handleChangeHiddenColumns = function (hiddenColumns) {
        this.hiddenColumns = hiddenColumns;
    };
    /**
     * Rendu HTML du menu des actions
     * @returns {any}
     */
    Header.prototype.renderMenuActions = function () {
        logger.trace("renderMenuActions");
        var children = this.getChildrenOf(menu_actions_1.MenuActions);
        var actions = [];
        // cas ou une seule action est déclarée
        if (children.props && !children.length) {
            actions.push(children);
        }
        else {
            actions = children;
        }
        // Détection de la présence du toggleColumnsButton
        var toggleColumnsButton = this.getComponentBy(toggle_columns_button_1.ToggleColumnsButton);
        var WrappedToggleColumns = null;
        if (toggleColumnsButton) {
            var key = this.state.id + "toggleColumnsButton";
            WrappedToggleColumns = Header.wrap(toggle_columns_button_1.ToggleColumnsButton, toggleColumnsButton, toggleColumnsButton.props, {
                id: this.state.id,
                key: key,
                tabIndex: -1,
                columns: this.props.columns,
                contentState: this.props.contentState,
                hiddenColumns: this.hiddenColumns
            });
        }
        var menuActionsProps = {
            actions: actions,
            items: this.state.items,
            showAlert: this.showAlert,
            showIconInfo: this.props.showIconInfo,
            selectedItems: this.getSelectedItemsForAllContent(),
            id: this.state.id + "-menu-action",
            columns: this.props.columns,
            toggleColumnsButton: WrappedToggleColumns,
            contentState: this.props.contentState
        };
        return (React.createElement(menu_actions_1.MenuActions, tslib_1.__assign({}, menuActionsProps)));
    };
    /**
     * cache le menuActions lorsque la table est en cours d'edition.
     * @param lineIndex
     */
    Header.prototype.handleEdition = function (lineIndex) {
        this.setState({ hideMenuActions: lineIndex !== undefined && lineIndex !== null });
    };
    /**
     *
     * @param selectedItems
     * @param items
     */
    Header.prototype.handleChangeDataTable = function (selectedItems, items) {
        this.setState({ selectedItems: selectedItems, items: items ? items : this.state.items });
    };
    /**
     * Méthode déclenchant la fermeture de la fenêtre modale de suppresion d'un partenaire
     */
    Header.prototype.closeAlert = function () {
        this.refs.alert.close();
    };
    /**
     * Méthode déclenchant la fermeture de la fenêtre modale de suppresion d'un partenaire
     */
    Header.prototype.validateAlert = function (fct) {
        this.refs.alert.close(fct);
    };
    /***
     * Déclenche l'affichage de la modale de suppression d'un partenaire
     * @param message
     * @param title
     * @param {Function} fct fonction exécutée sur la validation
     */
    Header.prototype.showAlert = function (message, title, fct) {
        var _this = this;
        this.refs.alert.setMessage(message);
        this.refs.alert.setTitle(title);
        this.refs.alert.setOnClickOk(function () {
            _this.validateAlert(fct);
        }).open();
    };
    /**
     * fonction qui retourne la liste des items selectionés sur l'ihm lors de la pagination
     * @returns {any[]}
     */
    Header.prototype.getSelectedItemsForAllContent = function () {
        var _this = this;
        logger.trace("getSelectedItemsForAllContent");
        var resultList = [];
        // recupere la liste de tous les items selectionés dans les dataSources des contents
        this.props.dataSourcesList.map(function (dataSource, index) {
            resultList = array_utils_1.ArrayUtils.unionWith(_this.props.dataSourcesList[index].selected, resultList, _this.state.contentState.keyColumnMassSelection);
        });
        // intersection des items affichés avec les items selectionés dans le dataSource
        resultList = array_utils_1.ArrayUtils.intersectionWith(resultList, this.state.items, this.state.contentState.keyColumnMassSelection);
        return resultList;
    };
    /**
     * Retourne la somme totale des items de tous les dataSource de tous les contents
     * @returns {number}
     */
    Header.prototype.getTotalItemsForAllDataSource = function () {
        logger.trace("getTotalItemsForAllDataSource");
        var result = 0;
        this.props.dataSourcesList.map(function (dataSource) {
            var nbItem = 0;
            if (dataSource) {
                // si le dataSource est de type PaginateDataSource, on prend le totalItems sinon on prend le result.length
                if (dataSource instanceof paginate_datasource_1.PaginateDataSource) {
                    var pagDt = dataSource;
                    nbItem = pagDt && pagDt.pagination && pagDt.pagination.totalItems ? pagDt.pagination.totalItems : 0;
                }
                else {
                    nbItem = dataSource.results ? dataSource.results.length : 0;
                }
                result += nbItem;
            }
        });
        return result;
    };
    /**
     * Retourne la somme totale des items de tous les dataSource de tous les contents
     * @returns {number}
     */
    Header.prototype.getTotalSelectedItemsForAllDataSource = function () {
        logger.trace("getTotalSelectedItemsForAllDataSource");
        var result = 0;
        this.props.dataSourcesList.map(function (dataSource) {
            if (dataSource) {
                // si le dataSource est de type PaginateDataSource, on prend le totalItems sinon on prend le result.length
                result += (dataSource.selected) ? dataSource.selected.length : 0;
            }
        });
        return result;
    };
    return Header;
}(hornet_component_1.HornetComponent));
exports.Header = Header;

//# sourceMappingURL=header.js.map
