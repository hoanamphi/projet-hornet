"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var React = require("react");
var classNames = require("classnames");
var accordion_1 = require("hornet-js-react-components/src/widget/accordion/accordion");
var abstract_group_component_1 = require("hornet-js-react-components/src/widget/group/abstract-group-component");
var _ = require("lodash");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.widget.accordion.accordions");
var Accordions = /** @class */ (function (_super) {
    tslib_1.__extends(Accordions, _super);
    function Accordions(props, context) {
        var _this = _super.call(this, props, context) || this;
        /** liste des instances Accordion*/
        _this.accordionList = [];
        _this.scrollToFocus = function (strDomId) {
            var domNode = document.getElementById(strDomId);
            //on se positionne sur l'element ayant l'erreur
            if (domNode) {
                window.scroll(domNode.offsetLeft, domNode.offsetTop);
            }
        };
        /**
         * Action sur le focus de l'accordion
         * @param index
         * @param event
         * @param targetEvent
         */
        _this.handleFocusAccordion = function (index, event, targetEvent) {
            var strDomId = targetEvent.id; // ID de l'element dans le DOM qui declenche le focus
            var isAccordionElement = strDomId.indexOf(accordion_1.TAB_ID_NAME); //vérifie si l'element est un header d'accordion
            if (isAccordionElement == -1) {
                //controle si l'accordion est deja ouvert
                if (!_this.state.visibleAccordion[index]) {
                    _this.handleClickAccordion(index, strDomId, _this.scrollToFocus);
                }
            }
            else {
                var tabIndex_1 = _.cloneDeep(_this.state.tabIndex);
                _this.state.children.map(function (child, i) {
                    tabIndex_1[i] = (i == index) ? 0 : -1;
                });
                _this.setState({ tabIndex: tabIndex_1 });
            }
        };
        _this.state.visibleAccordion = _this.initializeAccordions();
        _this.state.tabIndex = [];
        _this.state.tabIndex.push(0);
        return _this;
    }
    Accordions.prototype.initializeAccordions = function () {
        var visibleAccordion = [];
        React.Children.map(this.state.children, function (child) {
            visibleAccordion.push(child.props.isOpen);
        });
        return visibleAccordion;
    };
    Accordions.prototype.componentWillReceiveProps = function (nextProps, nextContext) {
        _super.prototype.componentWillReceiveProps.call(this, nextProps, nextContext);
    };
    /**
     * @inheritDoc
     */
    Accordions.prototype.render = function () {
        logger.trace("Rendu accordion, Nombre de composants fils =", React.Children.count(this.state.children));
        this.state.totalAccordion = React.Children.count(this.state.children);
        var classNameUl = classNames({
            "accordion": true
        });
        return (React.createElement("div", null,
            React.createElement("ul", { className: classNameUl, id: this.state.id }, this.renderAccordion())));
    };
    /**
     * controle de l'action sur le clique
     * @param index
     * @param strDomId
     * @param callback function
     */
    Accordions.prototype.handleClickAccordion = function (index, strDomId, callback) {
        var _this = this;
        if (strDomId === void 0) { strDomId = ''; }
        var accordion;
        var visibleAccordion = _.cloneDeep(this.state.visibleAccordion);
        if (this.state.multiSelectable) {
            visibleAccordion[index] = !visibleAccordion[index];
            if (!visibleAccordion[index]) {
                this.handleBeforeHideAccordion(index);
            }
        }
        else {
            var cpt = React.Children.count(this.state.children);
            for (var i = 0; i < cpt; i++) {
                if (this.state.visibleAccordion[i]) {
                    this.handleBeforeHideAccordion(i);
                }
                visibleAccordion[i] = (index == i) ? !visibleAccordion[i] : false;
            }
        }
        this.setState({ visibleAccordion: visibleAccordion }, function () {
            accordion = _.find(_this.accordionList, { props: { panelIndex: index } });
            if (accordion && accordion.state.isOpen && _this.props.afterShowAccordion) {
                _this.props.afterShowAccordion(accordion, index);
            }
            if (typeof callback === 'function') {
                callback(strDomId);
            }
        });
    };
    Accordions.prototype.handleBeforeHideAccordion = function (index) {
        var accordion = _.find(this.accordionList, { props: { panelIndex: index } });
        if (accordion && this.props.beforeHideAccordion) {
            this.props.beforeHideAccordion(accordion, index);
        }
    };
    /**
     * Rendu de l'acorodion
     */
    Accordions.prototype.renderAccordion = function () {
        var _this = this;
        return React.Children.map(this.state.children, function (child, index) {
            if (child.type === accordion_1.Accordion) {
                if (_this.state.tabIndex[index] == null || typeof (_this.state.tabIndex[index]) == "undefined") {
                    _this.state.tabIndex[index] = -1;
                }
                var defaultKey = _this.state.id + "-" + index;
                var key = Accordions.generateKey(child, defaultKey);
                var props = {
                    id: _this.state.id + "-",
                    key: key,
                    panelIndex: index,
                    isOpen: _this.state.visibleAccordion[index],
                    tabIndex: (_this.state.tabIndex[index]),
                    handleClickAccordion: _this.handleClickAccordion,
                    handleFocusAccordion: _this.handleFocusAccordion,
                    totalAccordion: _this.state.children.length,
                    ref: function (accordion) {
                        if (accordion) {
                            _this.accordionList.push(accordion);
                        }
                    }
                };
                return React.cloneElement(child, props);
            }
        });
    };
    Accordions.defaultProps = {
        id: "accordion",
        multiSelectable: false
    };
    return Accordions;
}(abstract_group_component_1.GroupComponent));
exports.Accordions = Accordions;

//# sourceMappingURL=accordions.js.map
