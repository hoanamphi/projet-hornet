"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var React = require("react");
var abstract_field_1 = require("hornet-js-react-components/src/widget/form/abstract-field");
var modal_1 = require("hornet-js-react-components/src/widget/dialog/modal");
var _ = require("lodash");
var moment = require("moment");
var date_utils_1 = require("hornet-js-utils/src/date-utils");
var input_field_1 = require("hornet-js-react-components/src/widget/form/input-field");
var key_codes_1 = require("hornet-js-components/src/event/key-codes");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.widget.form.calendar-fied");
var RcCalendar = null;
var defaultLocale = date_utils_1.DateUtils.default_locale;
if (!hornet_js_utils_1.Utils.isServer) {
    logger.trace("Execution sur le CLIENT(NAVIGATEUR)");
    RcCalendar = require("rc-calendar");
    /* Patch de la méthode getTitleString utilisée pour afficher la date correspondant au jour survolé dans le calendrier */
    var rcCalendarUtil = require("rc-calendar/lib/util/index");
    if (rcCalendarUtil && rcCalendarUtil.getTitleString) {
        rcCalendarUtil.getTitleString = function (value) {
            /* On renvoie une chaîne vide car le formattage de la date dépend de la locale qui est propre à chaque
             instance de calendar. */
            return "";
        };
    }
}
else {
    logger.trace("Execution sur le SERVEUR");
}
/**
 * Composant Calendrier
 */
var CalendarField = /** @class */ (function (_super) {
    tslib_1.__extends(CalendarField, _super);
    function CalendarField(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.hasKeyPress = false;
        var calendarLocale = hornet_js_utils_1.Utils.getCls("hornet.internationalization") ?
            _this.i18n("calendar") : { "dateFormat": "DD/MM/YYYY" };
        /*récupération de la locale d'internationalisation*/
        var internationalisation = hornet_js_utils_1.Utils.getCls("hornet.internationalization");
        var language;
        if (internationalisation) {
            language = internationalisation.locale;
        }
        else {
            language = defaultLocale;
        }
        /* attribut HTML size du champ de saisie */
        var inputSize = calendarLocale.dateFormat.length;
        _this.state.isVisible = false;
        _this.state.calendarLocale = calendarLocale;
        _this.state.language = language;
        _this.state.inputSize = inputSize;
        if (!props.placeHolder) {
            _this.state.placeHolder = _this.i18n("calendar.placeHolder");
        }
        _this.state.currentValue = "";
        _this.state.messageValidation = _this.i18n("form.validation.format", { field: _this.state.label });
        return _this;
    }
    /**
     * Récupère le format d'affichage des dates
     */
    CalendarField.prototype.getFormat = function () {
        var internationalisation = hornet_js_utils_1.Utils.getCls("hornet.internationalization");
        var dateFormat = internationalisation.messages.calendar.dateFormat;
        return dateFormat;
    };
    /**
     * Génère le rendu spécifique du champ : un datePicker
     * @returns {any}
     */
    CalendarField.prototype.renderWidget = function () {
        var _this = this;
        logger.trace("render CalendarField");
        var reactIconTag;
        var reactCalendarDialogueTag;
        if (this.state.isDatePicker) {
            reactIconTag =
                React.createElement("button", { className: "agenda icon", type: "button", onClick: this.showCalendar, title: this.state.title || this.state.calendarLocale.agendaTitle, disabled: this.state.readOnly || this.state.disabled, "aria-haspopup": true, value: "calendar" },
                    React.createElement("img", { src: CalendarField.genUrlTheme("/img/calendar/icon_calendar.svg"), alt: this.state.title || this.state.calendarLocale.agendaTitle }));
            /*RcCalendar prend un Moment en paramètre*/
            var date = _.clone(this.state.currentValue);
            var currentDate = void 0;
            if (!date) {
                currentDate = moment();
            }
            else {
                currentDate = moment(date, this.state.calendarLocale.dateFormat);
            }
            if (!currentDate.isValid()) {
                currentDate = moment();
            }
            currentDate.locale(this.state.language);
            var format = this.getFormat();
            if (format instanceof Array) {
                format = format[0];
            }
            reactCalendarDialogueTag =
                React.createElement(modal_1.Modal, { ref: "maModal", underlayClickExits: true, escapeKeyExits: true, title: this.state.calendarLocale.choiceDate }, !hornet_js_utils_1.Utils.isServer ?
                    React.createElement(RcCalendar, { formatter: format, defaultValue: currentDate, onSelect: this.setValueAndCloseCalendar, locale: this.state.calendarLocale, format: format, showDateInput: false }) :
                    null);
        }
        var htmlProps = this.getHtmlProps();
        var formatedValue = this.state.currentValue.length >= 1
            ? this.state.currentValue
            : "";
        htmlProps = _.assign(htmlProps, {
            type: "text",
            size: this.state.inputSize,
            value: formatedValue,
            onChange: this.handleInputChange,
            onKeyPress: this.handleInputKeyPress,
            onBlur: this.handleInputLeave
        });
        if (htmlProps.label == htmlProps.title) {
            htmlProps.title = undefined;
        }
        htmlProps.label = undefined;
        var hasError = this.hasErrors() ? " has-error" : "";
        var placeHolder = (!this.state.disabled && !this.state.readOnly)
            ? this.state.placeHolder
            : null;
        return (React.createElement("div", { className: "calendar-container" },
            React.createElement("input", tslib_1.__assign({}, htmlProps, { ref: function (elt) { return _this.registerHtmlElement(elt); }, className: "calendar-input" + hasError, placeholder: placeHolder })),
            !this.state.readOnly && !this.state.disabled && this.state.currentValue ? this.renderResetButton() : null,
            reactIconTag,
            reactCalendarDialogueTag));
    };
    /**
     * @override
     */
    CalendarField.prototype.setCurrentValue = function (value) {
        var _this = this;
        var res = value || "";
        if (typeof value === "number") {
            res = this.formatCalendarDate(value, this.state.calendarLocale);
        }
        else if (value instanceof Date) {
            res = this.formatCalendarDate(value.getTime(), this.state.calendarLocale);
        }
        this.setState({ currentValue: res, valued: (value !== "" && value), errors: [] }, function () {
            if (_this.state.onValueChange)
                _this.state.onValueChange(_this.state.currentValue);
        });
        return this;
    };
    /**time
     * @override
     */
    CalendarField.prototype.resetValue = function () {
        var _this = this;
        var res = this.formatCalendarDate(null, this.state.calendarLocale);
        this.setState({ currentValue: res, valued: false }, function () {
            if (_this.state.onSelect) {
                if (_this.state.onSelect) {
                    _this.state.onSelect(res);
                }
            }
            if (_this.state.onChange) {
                _this.state.onChange(null);
            }
            if (_this.state.onValueChange) {
                _this.state.onValueChange(_this.state.currentValue);
            }
            if (_this.htmlElement && _this.htmlElement.onchange) {
                _this.htmlElement.onchange();
            }
        });
    };
    /**
     * Méthode délenchée lors d'une intéraction avec le champ input du composant Calendar
     * @param e
     */
    CalendarField.prototype.handleInputChange = function (e) {
        var _this = this;
        /* L'attribut DOM onChange est éventuellement aussi renseigné sur le composant */
        if (this.state.onChange) {
            this.state.onChange(e);
        }
        var input = e.target;
        if (input.value && !this.state.valued) {
            this.setState({ valued: true });
        }
        else if (!input.value && this.state.valued) {
            this.setState({ valued: false });
        }
        if (this.state.currentValue != input.value) {
            this.setState({ currentValue: input.value }, function () {
                if (_this.state.onValueChange)
                    _this.state.onValueChange(_this.state.currentValue);
            });
        }
    };
    /**
     * Méthode délenchée lorsque l'utilisateur quitte l'input du composant Calendar
     * @param e
     */
    CalendarField.prototype.handleInputLeave = function (e) {
        var _this = this;
        /* transforme la date au format définit */
        var input = e.target;
        var text = input.value;
        if (text.length > 0) {
            var format = this.getFormat();
            var time = moment(text, format, true);
            if (time.isValid()) {
                if (format instanceof Array) {
                    var newText = time.format(format[0]);
                    this.setState({ currentValue: newText }, function () {
                        if (_this.state.onValueChange)
                            _this.state.onValueChange(_this.state.currentValue);
                    });
                }
                else {
                    var newText = time.format(format);
                    this.setState({ currentValue: newText });
                }
            }
            else {
                if (this.state.valideOnForm) {
                    this.setState({ currentValue: text }, function () {
                        if (_this.state.onValueChange)
                            _this.state.onValueChange(_this.state.currentValue);
                    });
                }
                else {
                    if (this.hasKeyPress) {
                        this.setState({ errors: [{ field: this.state.name, text: this.state.messageValidation }] }, function () {
                            _this.htmlElement.focus();
                        });
                        this.hasKeyPress = false;
                    }
                    else {
                        this.setState({ currentValue: "", errors: [] }, function () {
                            if (_this.state.onValueChange)
                                _this.state.onValueChange(_this.state.currentValue);
                        });
                    }
                }
            }
        }
        if (this.props.onBlur) {
            this.props.onBlur(e);
        }
    };
    /**
     * Controle des touches claviers
     * @param e
     */
    CalendarField.prototype.handleInputKeyPress = function (e) {
        var _this = this;
        var text = e.target.value;
        var time = moment(text, this.getFormat());
        if (this.state.onKeyPress) {
            this.state.onKeyPress(event);
        }
        var key = e.key;
        if (key == key_codes_1.KEYNAMES.ArrowDown) {
            if (time.isValid()) {
                time.add(1, "days");
                this.setState({ currentValue: time.toDate() }, function () {
                    if (_this.state.onValueChange)
                        _this.state.onValueChange(_this.state.currentValue);
                });
            }
            e.preventDefault();
        }
        else if (key == key_codes_1.KEYNAMES.ArrowUp) {
            if (time.isValid()) {
                time.add(1, "days");
                this.setState({ currentValue: time.toDate() }, function () {
                    if (_this.state.onValueChange)
                        _this.state.onValueChange(_this.state.currentValue);
                });
            }
            e.preventDefault();
        }
        else if (key == key_codes_1.KEYNAMES.Home) {
            this.setState({ currentValue: new Date() }, function () {
                if (_this.state.onValueChange)
                    _this.state.onValueChange(_this.state.currentValue);
            });
            e.preventDefault();
        }
        else if ((/[-.\/]/.test(key)) || (/\d/.test(key))
            || ((key.toUpperCase() == "A" || key.toUpperCase() == "C" || key.toUpperCase() == "V" || key.toUpperCase() == "X") && e.ctrlKey)) {
            if (key != "Tab") {
                this.hasKeyPress = true;
            }
        }
        else if (key != key_codes_1.KEYNAMES.Enter) {
            e.stopPropagation();
            e.preventDefault();
        }
    };
    /**
     * @param time temps en millisecondes depuis Epoch
     * @param calendarLocale propriétés localisées du calendrier
     */
    CalendarField.prototype.formatCalendarDate = function (time, calendarLocale) {
        var strValue;
        try {
            if (time) {
                var format = this.getFormat();
                strValue = moment(time).format(format);
            }
        }
        catch (err) {
            logger.trace("Erreur pour formater la date suivante:", err);
        }
        if (!strValue) {
            strValue = "";
        }
        logger.trace("Date formatée : ", strValue + "  -- à partir de la valeur", time);
        return strValue;
    };
    /**
     * Met à jour la valeur et déclenche la fermeture de la popup de calendrier
     * @param value {Moment} instance de Moment
     */
    CalendarField.prototype.setValueAndCloseCalendar = function (value) {
        var _this = this;
        if (value != null) {
            this.setState({
                currentValue: this.formatCalendarDate(value, this.state.calendarLocale),
                valued: value != ""
            }, function () {
                _this.hideCalendar();
                if (_this.state.onSelect) {
                    _this.state.onSelect(value);
                }
                if (_this.state.onValueChange) {
                    _this.state.onValueChange(_this.state.currentValue);
                }
            });
        }
        else {
            if (this.state.onSelect) {
                this.state.onSelect(value);
            }
            if (this.state.onValueChange) {
                this.state.onValueChange(value);
            }
        }
    };
    /**
     * Permet de mettre à jour la valeur du datePicker
     * @param value
     * @returns {this}
     */
    CalendarField.prototype.setValue = function (value) {
        this.setState({
            currentValue: this.formatCalendarDate(value, this.state.calendarLocale),
            valued: value != ""
        });
        return this;
    };
    /**
     * Permet d'afficher la modal contenant le calendier
     * @returns {Calendar}
     */
    CalendarField.prototype.showCalendar = function () {
        if (!this.state.disabled && !this.state.readOnly) {
            this.refs.maModal.open();
        }
        return this;
    };
    /**
     * Permet de masquer la modal contenant le calendier
     * @returns {Calendar}
     */
    CalendarField.prototype.hideCalendar = function () {
        this.refs.maModal.close();
        return this;
    };
    CalendarField.prototype.getCurrentValue = function () {
        if (this.state.valideOnForm) {
            return hornet_js_utils_1.Utils.dateUtils.parseInTZ(this.state.currentValue, this.getFormat(), hornet_js_utils_1.Utils.dateUtils.TZ_EUROPE_PARIS) || this.state.currentValue;
        }
        else {
            return hornet_js_utils_1.Utils.dateUtils.parseInTZ(this.state.currentValue, this.getFormat(), hornet_js_utils_1.Utils.dateUtils.TZ_EUROPE_PARIS);
        }
    };
    CalendarField.defaultProps = _.assign(abstract_field_1.AbstractField.defaultProps, {
        disabled: false,
        isDatePicker: true,
        valideOnForm: true
    });
    return CalendarField;
}(input_field_1.InputField));
exports.CalendarField = CalendarField;

//# sourceMappingURL=calendar-field.js.map
