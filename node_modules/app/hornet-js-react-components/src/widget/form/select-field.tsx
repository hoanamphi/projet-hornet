/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */

/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */

import * as React from "react";
import {
    HornetBasicFormFieldProps, HornetClickableProps,
    HornetWrittableProps
} from "src/widget/form/abstract-field";

import { AbstractFieldDatasource }  from "hornet-js-react-components/src/widget/form/abstract-field-datasource";
import {
    IHornetComponentDatasource,
    HornetComponentChoicesProps
} from "hornet-js-components/src/component/ihornet-component";
import { HornetComponentDatasourceProps }  from "hornet-js-react-components/src/widget/component/hornet-component";
import * as _ from "lodash";
import { ObjectUtils } from "hornet-js-utils/src/object-utils";

/**
 * Propriétés d'un champ de formulaire de type groupe de boutons radios
 */
export interface SelectFieldProps extends HornetWrittableProps,
    HornetClickableProps,
    HornetBasicFormFieldProps,
    HornetComponentDatasourceProps,
    HornetComponentChoicesProps {
    data?: any;
    labelClass?: string;
    valueKey?: string;
    labelKey?: string;
    name: string;
}

/**
 * Définition d'un choix
 */
export interface SelectChoice {
    /** Valeur du choix : peut être une chaîne de caractères vide pour un libellé 'Aucun(e)" par exemple */
    value: string;
    /** Libellé */
    label?: string;

    name: string;
}


/**
 * Composant liste déroulante
 */
export class SelectField<P extends SelectFieldProps> extends AbstractFieldDatasource<SelectFieldProps, any> implements IHornetComponentDatasource {

    readonly props: Readonly<SelectFieldProps>;

    static defaultProps = _.assign(_.cloneDeep(AbstractFieldDatasource.defaultProps), {
        labelClass: "blocLabelUp",
        valueKey: "value",
        labelKey: "label"
    });

    constructor(props: P, context?: any) {
        super(props, context);
        if (this.state.dataSource && this.state.data) {
            throw new Error("Le SelectField " + this.state.name + " possède une props dataSource et une props data");
        }
    }

    /**
     * Génère le rendu spécifique du champ : une liste déroulante dont les éléments correspondent au tableau dataSource
     * @returns {any}
     */
    renderWidget(): JSX.Element {
        let hasError = this.hasErrors() ? " has-error" : "";
        let htmlProps = this.getHtmlProps();
        _.assign(htmlProps, { "className": htmlProps[ "className" ] ? htmlProps[ "className" ] + " selectfield" + hasError : " selectfield" + hasError , value: this.state.currentValue});

        let hasData = this.state.data && this.state.data.length > 0;
        let hasDataSource = this.state.dataSource && this.state.dataSource.results && this.state.dataSource.results.length > 0;

        if (this.state.currentValue == undefined) {
            if (hasDataSource && this.state.items && Array.isArray(this.state.items)) {
                (htmlProps as any).value = this.state.items[0][this.state.valueKey];
            } else if (hasData) {
                (htmlProps as any).value = this.state.data[0][this.state.valueKey];
            }
        }

        return (
            <select onChange={(e) => { this.handleChange(e) }} ref={(elt) => this.registerHtmlElement(elt)} {...htmlProps}>
                {hasDataSource ? this.renderOptionsDataSource() : null}
                {hasData ? this.state.data.map(this.renderOption) : null}
            </select>
        );
    }


    // Setters
    setData(data: SelectChoice[] | any[], cb?): this {
        this.setState({ data: data }, cb);
        return this;
    }

    setValueKey(key: string, cb?): this {
        this.setState({ valueKey: key }, cb);
        return this;
    }

    setLabelKey(key: string, cb?): this {
        this.setState({ labelKey: key }, cb);
        return this;
    }

    /**
     * Override
     * @param state
     */
    processHtmlProps(state: SelectFieldProps): void {

        super.processHtmlProps(state);
        if (state.readOnly === true) {
            state.disabled = true;
        }
    }

    /**
     * Génère le rendu du selectField à partir d'un dataSource
     * @returns {any}
     */
    protected renderOptionsDataSource(): JSX.Element {
        if (this.state.items && this.state.items.length > 0) {
            return this.state.items.map(this.renderOption);
        }
    }

    /**
     * Génère le rendu d'un radio bouton et son libellé
     * @param choice choix sélectionnable
     * @returns {any}
     */
    protected renderOption(choice: SelectChoice): JSX.Element {
        let _value = ObjectUtils.getSubObject(choice, this.state.valueKey);
        let _label = ObjectUtils.getSubObject(choice, this.state.labelKey);
        let value: string = (_value != null && _value.toString) ? _value.toString() : "";
        let label: string = (_label != null && _label.toString) ? _label.toString() : value;

        let optionsProps = {
            key: this.state.name + "-" + label + "-" + value,
            value: value
        };

        return <option {...optionsProps}>{label}</option>;
    }

    /**
     *
     * @param value
     */
    protected selectItemByValue(value) {
        let hasDataSource = this.state.dataSource && this.state.dataSource.results && this.state.dataSource.results.length > 0;
        if (hasDataSource) {
            for (let index = 0; index < this.state.dataSource.results.length; index++) {
                let element = this.state.dataSource.results[ index ];
                if (element[ this.state.valueKey ] == value) {
                    this.state.dataSource.select(element);
                    break;
                }
            }
        }
    }

    /**
     * @override
     */
    setCurrentValue(value: any): this {
        super.setCurrentValue(value);
        this.selectItemByValue(value);
        return this;
    }

    /**
     * @override
     */
    protected handleChange(e: React.ChangeEvent<HTMLElement>) {
        this.setCurrentValue((e.target as any).value);
    }
}
