"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var React = require("react");
var classNames = require("classnames");
var _ = require("lodash");
var dom_adapter_1 = require("hornet-js-react-components/src/widget/form/dom-adapter");
var field_error_1 = require("hornet-js-react-components/src/widget/form/field-error");
var html_attributes_1 = require("hornet-js-react-components/src/widget/form/html-attributes");
var tool_tip_1 = require("hornet-js-react-components/src/widget/tool-tip/tool-tip");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.widget.form.abstract-field");
var InlineStyle;
(function (InlineStyle) {
    InlineStyle[InlineStyle["NONE"] = 0] = "NONE";
    InlineStyle[InlineStyle["FIELD"] = 1] = "FIELD";
    InlineStyle[InlineStyle["ALL"] = 2] = "ALL";
})(InlineStyle = exports.InlineStyle || (exports.InlineStyle = {}));
/**
 * Représente un champ de formulaire.
 */
var AbstractField = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractField, _super);
    function AbstractField(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.makeState(_this.state);
        return _this;
    }
    AbstractField.prototype.componentDidMount = function () {
        this.mounted = true;
        if (this.htmlElement) {
            this.htmlElement.addEventListener("focus", this.handleSimulateScroll);
        }
        else {
            if (this.multipleElement) {
                for (var element in this.multipleElement) {
                    this.multipleElement[element].addEventListener("focus", this.handleSimulateScroll);
                }
            }
        }
    };
    AbstractField.prototype.componentWillUnmount = function () {
        this.mounted = false;
        if (this.htmlElement) {
            this.htmlElement.removeEventListener("focus", this.handleSimulateScroll);
        }
        else {
            if (this.multipleElement) {
                for (var element in this.multipleElement) {
                    this.multipleElement[element].removeEventListener("focus", this.handleSimulateScroll);
                }
            }
        }
    };
    /**
     * Génère l'état interne du composant à partir des propriétés indiquées
     * @param props
     */
    AbstractField.prototype.makeState = function (state) {
        this.processHtmlProps(state);
    };
    // Setters
    AbstractField.prototype.setAbbr = function (abbr, callback) {
        if (abbr !== this.state.abbr) {
            this.setState({ abbr: abbr }, callback);
        }
        return this;
    };
    AbstractField.prototype.setGroupClass = function (groupClass, callback) {
        if (groupClass !== this.state.groupClass) {
            this.setState({ groupClass: groupClass }, callback);
        }
        return this;
    };
    AbstractField.prototype.setLabelClass = function (labelClass, callback) {
        if (labelClass !== this.state.labelClass) {
            this.setState({ labelClass: labelClass }, callback);
        }
        return this;
    };
    AbstractField.prototype.setFieldClass = function (fieldClass, callback) {
        if (fieldClass !== this.state.fieldClass) {
            this.setState({ fieldClass: fieldClass }, callback);
        }
        return this;
    };
    AbstractField.prototype.setToolTip = function (toolTip, callback) {
        if (toolTip !== this.state.toolTip) {
            this.setState({ toolTip: toolTip }, callback);
        }
        return this;
    };
    AbstractField.prototype.setIcoToolTip = function (icoToolTip, callback) {
        if (icoToolTip !== this.state.icoToolTip) {
            this.setState({ icoToolTip: icoToolTip }, callback);
        }
        return this;
    };
    AbstractField.prototype.setPrefix = function (prefix, callback) {
        if (prefix !== this.state.prefix) {
            this.setState({ prefix: prefix }, callback);
        }
        return this;
    };
    AbstractField.prototype.setSuffix = function (suffix, callback) {
        if (suffix !== this.state.suffix) {
            this.setState({ suffix: suffix }, callback);
        }
        return this;
    };
    AbstractField.prototype.setMarkRequired = function (markRequired, callback) {
        if (this.state.markRequired === markRequired)
            return this;
        this.setState({ markRequired: markRequired }, callback);
        return this;
    };
    AbstractField.prototype.setrequiredLabel = function (requiredLabel, callback) {
        if (requiredLabel !== this.state.requiredLabel) {
            this.setState({ requiredLabel: requiredLabel }, callback);
        }
        return this;
    };
    AbstractField.prototype.setImgFilePath = function (imgFilePath, callback) {
        if (imgFilePath !== this.state.imgFilePath) {
            this.setState({ imgFilePath: imgFilePath }, callback);
        }
        return this;
    };
    AbstractField.prototype.setErrorComponent = function (errorComponent, callback) {
        this.setState({ errorComponent: errorComponent }, callback);
        return this;
    };
    AbstractField.prototype.setErrors = function (errors, callback) {
        if (!this.state.errors && !errors)
            return this;
        this.setState({ errors: errors }, callback);
        return this;
    };
    /**
     * @override
     */
    AbstractField.prototype.setAttribute = function (name, value) {
        _super.prototype.setAttribute.call(this, name, value);
        /* L'adaptateur DOM met à jour l'élément dans le DOM : on met ici à jour l'état interne du composant */
        var newState = {};
        newState[name] = value;
        if (newState[name] !== this.state[name]) {
            this.setState(newState);
        }
        return this;
    };
    /**
     * @override
     */
    AbstractField.prototype.setCurrentChecked = function (value) {
        _super.prototype.setCurrentChecked.call(this, value);
        /* L'adaptateur DOM met à jour l'élément dans le DOM : on met ici à jour l'état interne du composant */
        this.setState({ currentChecked: value });
        return this;
    };
    /**
     * @override
     */
    AbstractField.prototype.setCurrentValue = function (value) {
        _super.prototype.setCurrentValue.call(this, value);
        /* L'adaptateur DOM met à jour l'élément dans le DOM : on met ici à jour l'état interne du composant */
        this.setState({ currentValue: value });
        return this;
    };
    /**
     * @override
     */
    AbstractField.prototype.setReadOnly = function (value) {
        if (this.state.readOnly === value)
            return this;
        this.setState({ readOnly: value });
        return this;
    };
    /**
     * @override
     */
    AbstractField.prototype.setDisabled = function (value) {
        if (this.state.disabled === value)
            return this;
        this.setState({ disabled: value });
        return this;
    };
    AbstractField.prototype.hasErrors = function () {
        var fieldErrors = null;
        if (this.state.errors) {
            fieldErrors = this.state.errors.filter(function (error) {
                return (error.field == this.state.name || error.additionalInfos.linkedFieldsName == this.state.name);
            }, this);
        }
        if (fieldErrors && (fieldErrors.length > 0)) {
            return true;
        }
        return false;
    };
    /**
     * @inheritDoc
     */
    AbstractField.prototype.render = function () {
        var type = this.state.type;
        if (type) {
            type = type.toLowerCase();
        }
        var cx = classNames(this.state.groupClass, "abstractfield-container", {
            "inline": this.state.inline == InlineStyle.ALL,
            "readonly": this.state.readOnly
        });
        /* On ne génère pas le rendu du label et des div conteneurs lorsque le champ est caché */
        return ((type == "hidden") ? this.renderWidget() :
            React.createElement("div", { className: cx },
                this.state.label ? this.renderLabel(this.state.id, this.state.name, this.state.label, this.state.required) : null,
                this.renderField()));
    };
    /**
     * Met à jour l'état interne avec les nouvelles propriétés.
     * Surcharge la méthode parente : les attributs HTML standards sont initialisés via la fonction générique setAttribute.
     * @param nextProps nouvelles propriétés
     * @param nextContext nouveau contexte
     * @override
     */
    AbstractField.prototype.componentWillReceiveProps = function (nextProps, nextContext) {
        for (var key in nextProps) {
            /* On doit s'assurer que chaque propriété a effectivement changé, car componentWillReceiveProps peut aussi
             * être appelée alors qu'aucune propriété n'a changé (cf.http://facebook.github.io/react/blog/2016/01/08/A-implies-B-does-not-imply-B-implies-A.html)
             * Dans ce cas cela poserait problème, car l'état pourrait avaoir été modifié
             * via un setter alors que la propriété utilisée initialement pour le constructeur n'a pas changé.*/
            if (this.props[key] != nextProps[key]) {
                if (key in html_attributes_1.HTML_ATTRIBUTES) {
                    /* Propriété HTML standard */
                    this.setAttribute(key, nextProps[key]);
                }
                else {
                    /* Propriété spécifique hornet : un 'setter' est certainement présent */
                    var setterName = _.camelCase("set " + (key));
                    if (this[setterName]) {
                        this[setterName](nextProps[key]);
                    }
                    else {
                        var state = void 0;
                        state[key] = nextProps[key];
                        this.setState(state);
                    }
                }
            }
        }
    };
    /**
     * Génère le rendu des erreurs de validation éventuelles
     */
    AbstractField.prototype.renderErrors = function () {
        var fieldErrorProps = {
            errors: this.state.errors,
            fieldName: this.state.name,
            hideError: this.state.hideError
        };
        // get the field error component by state ?
        var Error = this.state.errorComponent;
        return React.createElement(Error, tslib_1.__assign({}, fieldErrorProps));
    };
    /**
     * Génère le rendu du libellé pour le champ
     * @param fieldId identifiant du champ
     * @param fieldName nom du champ
     * @param label libellé à afficher
     * @param required indique si le champ est obligatoire
     * @returns {any}
     */
    AbstractField.prototype.renderLabel = function (fieldId, fieldName, label, required) {
        var urlTheme = this.state.imgFilePath || AbstractField.genUrlTheme(), urlIcoTooltip = urlTheme + this.state.icoToolTip;
        if (this.state.abbr && !this.state.lang) {
            logger.warn("Field ", fieldName, " Must have lang with abbr configuration");
        }
        var ariaDescribedby = { "aria-describedby": fieldName + "Tooltip" };
        return (React.createElement("div", { className: this.state.labelClass + " label-container" },
            React.createElement("label", tslib_1.__assign({ htmlFor: fieldId, id: fieldName + "Label", className: "label-content" }, this.state.toolTip ? ariaDescribedby : null),
                (this.state.abbr) ?
                    React.createElement("abbr", { lang: this.state.lang, title: this.state.abbr },
                        React.createElement("span", { className: "label-abbr" }, label)) : React.createElement("span", { className: "label" }, label),
                required && this.state.markRequired ?
                    React.createElement("span", { className: "label-required" },
                        React.createElement("abbr", { title: this.getRequiredLabel() }, "*")) : null,
                this.state.toolTip ?
                    React.createElement(tool_tip_1.ToolTip, { alt: this.state.toolTip, src: urlIcoTooltip, idSpan: fieldName + "Tooltip" }) : null)));
    };
    AbstractField.prototype.getRequiredLabel = function () {
        var requiredLabel = this.state.requiredLabel;
        if (!requiredLabel) {
            var i18nRequiredLabel = this.i18n("form.requiredLabel");
            if (i18nRequiredLabel) {
                requiredLabel = i18nRequiredLabel;
            }
            else {
                requiredLabel = "Obligatoire";
            }
        }
        return requiredLabel;
    };
    /**
     * Applique certaines règles par défaut sur les propriétés HTML standards
     * @param propriétés à traiter. Cet objet est éventuellement modifié.
     */
    AbstractField.prototype.processHtmlProps = function (state) {
        if (state) {
            /* Si l'id n'est pas explicitement spécifié, on lui affecte la même valeur que le nom, car il sera utilisé
             * comme ancre pour les messages d'erreur de validation */
            if (state.name && !state.id) {
                state.id = state.name;
            }
            /* Lorsque le champ est requis, ajoute automatiquement la propriété "aria-required" pour assurer le maximum
             de compatibilité avec les outils d'accessibilité */
            // if (state.required === true) {
            //     state[ "aria-required" ] = true;
            // }
        }
    };
    /**
     * @returns {TResult} les propriétés html standard de ce champ
     */
    AbstractField.prototype.getHtmlProps = function () {
        /* On n'inclut pas les propriétés spécifiques qui ne concernent pas un champ HTML standard */
        var htmlProps = { name: "" };
        for (var key in this.state) {
            if (key in html_attributes_1.HTML_ATTRIBUTES) {
                htmlProps[key] = this.state[key];
            }
        }
        if (this.hasErrors()) {
            htmlProps["aria-describedby"] = this.state.name + "-error";
        }
        this.processHtmlProps(htmlProps);
        delete htmlProps["label"];
        return htmlProps;
    };
    /**
     * Génère le rendu des élements assurant la saisie des valeurs
     * @returns {any}
     */
    AbstractField.prototype.renderField = function () {
        return (React.createElement("div", { className: this.state.fieldClass + " abstractfield-field-content" },
            this.state.prefix ? React.createElement("span", { className: "abstractfield-field-prefix" }, this.state.prefix) : null,
            this.renderWidget(),
            this.state.suffix ? React.createElement("span", { className: "abstractfield-field-suffix" }, this.state.suffix) : null,
            this.renderErrors()));
    };
    /**
     *  Lorsque le champ prends le focus on verifie qu'il n'est pas caché par le bandeau
     *  si c'est le cas on effecteur un scroll du double de la hauteur du bandeau
     */
    AbstractField.prototype.handleSimulateScroll = function () {
        if (this.htmlElement || this.multipleElement) {
            var elementWithFocusPosTop = this.htmlElement ? this.htmlElement.getBoundingClientRect().top : this.multipleElement[0].getBoundingClientRect().top;
            var stickyElmtPos = (document.getElementById("banner")) ? document.getElementById("banner").offsetHeight : null;
            if (elementWithFocusPosTop <= stickyElmtPos) {
                window.scrollBy(0, -(window.innerHeight / 2));
            }
        }
    };
    /** Valeurs par défaut des propriétés */
    AbstractField.defaultProps = {
        /* Le libellé occupe la moitié du neoud parent */
        labelClass: "",
        /* Le champ occupe la moitié du neoud parent */
        fieldClass: "",
        icoToolTip: "/img/tooltip/tooltip.svg",
        markRequired: true,
        errorComponent: field_error_1.FieldError,
        lang: (hornet_js_utils_1.Utils.getCls("hornet.internationalization") && hornet_js_utils_1.Utils.getCls("hornet.internationalization").lang) ? hornet_js_utils_1.Utils.getCls("hornet.internationalization").lang : "fr",
        inline: InlineStyle
    };
    AbstractField.Inline = InlineStyle;
    return AbstractField;
}(dom_adapter_1.DomAdapter));
exports.AbstractField = AbstractField;

//# sourceMappingURL=abstract-field.js.map
