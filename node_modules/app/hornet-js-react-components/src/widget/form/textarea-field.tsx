/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */

/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */

import * as React from "react";
import {
    AbstractField, HornetWrittableProps,
    HornetClickableProps, HornetBasicFormFieldProps
} from "src/widget/form/abstract-field";
import * as _ from "lodash";
import { Picto }  from "hornet-js-react-components/src/img/picto";
import * as classNames from "classnames";
import { InputField }  from "hornet-js-react-components/src/widget/form/input-field";
import { VALUE_CHANGED_EVENT } from "./event";
import { fireHornetEvent } from "hornet-js-core/src/event/hornet-event";
import * as ReactDOM from "react-dom";
import { Alert }  from "hornet-js-react-components/src/widget/dialog/alert";
/**
 * Champ de formulaire Hornet de type zone de texte (textarea)
 */

export interface TextAreaFieldProps extends HornetWrittableProps,
    HornetClickableProps,
    HornetBasicFormFieldProps {
    resettable?: boolean;
    displayCharNumber?: boolean;
    extendable?: boolean;
    maxChar?: number;
    showAlert?: boolean;
    alertMessage?: string;
    alertTitle?: string;
    charLabel?: string;
}

export class TextAreaField extends AbstractField<TextAreaFieldProps, any> {

    protected refChar;
    protected element;
    protected errorShowed: boolean = false;

    public readonly props: Readonly<TextAreaFieldProps>;

    static defaultProps = _.assign(_.cloneDeep(AbstractField.defaultProps), {
        rows: 6,
        resettable: true,
        displayCharNumber: true,
        extendable: true,
        showAlert: true
    });

    /**
     * @inheritDoc
     */
    shouldComponentUpdate(nextProps, nextState) {
        return this.state.valued != nextState.valued || this.state.currentValue != nextState.currentValue || this.state.errors != nextState.errors;
        ;
    }

    /**
     * @inheritDoc
     */
    componentDidMount() {
        this.setClientHeight();
    }

    /**
     * Génère le rendu spécifique du champ
     * @returns {any}
     * @override
     */
    renderWidget(): JSX.Element {

        let htmlProps = this.getHtmlProps();
        let hasError = this.hasErrors() ? " has-error" : "";
        _.assign(htmlProps, {"className": htmlProps["className"] ? htmlProps["className"] + hasError : hasError});

        return (
            <div className={"textarea-container"}>
                {this.state.displayCharNumber ? <div className="textarea-character-value" ref={(elt) => {
                    this.refChar = elt
                }}></div> : null}
                <textarea onChange={this.valueChange} ref={
                    (elt) => {
                        this.registerHtmlElement(elt);
                        this.element = elt
                    }} {...htmlProps}>
                    {this.state.currentValue}
                </textarea>
                {this.state.resettable && this.state.valued && !this.state.readOnly && !this.state.disabled ? this.renderResetButton() :
                    <div/>}
                <Alert ref="alert" message={""}
                       onClickClose={this.closeAlert}/>
            </div>
        );
    }

    /**
     * rendu html du bouton reset
     * @returns {any}
     */
    renderResetButton(): JSX.Element {

        let htmlProps = _.cloneDeep(this.getHtmlProps());

        let hidden = htmlProps["type"] == "hidden";

        let classList: ClassDictionary = {
            "input-reset textarea-reset": true,
            "input-reset-hidden": (!this.isValued() || hidden)
        };

        let aProps: any = {};
        if (this.isValued()) {
            aProps["onClick"] = this.resetValue;
        }

        return (
            <span className={classNames(classList)}
                  role="button"
                  aria-hidden={!this.state.valued}
                  id={this.props.id || this.props.name + "ResetButton"}
            >
                <a {...aProps}>
                    <img src={Picto.grey.close} alt="reset"/>
                </a>
            </span>
        );
    }

    /**
     * règle la taille du textarea en fonction du texte présent à l'intérieur de celui ci
     * @param event
     */
    private setClientHeight(event?): void {
        if (this.props.extendable) {
            let text = event ? event.target.value : this.element.textContent;
            if (text !== undefined && text !== null) {
                let height = (text.split("\n").length + 1 ) * 25;
                let finalHeight = this.props.maxLength && this.props.maxLength < this.state.height ? this.props.maxLength : height;
                this.element.style.height = finalHeight + "px";
                this.element.height = finalHeight;

                // recalcul de la hauteur à l'aide de la taille du scroll
                let elem = document.getElementById(this.element.id) as any;
                let elemheight = elem.height;
                //cas de lapparition du scroll
                while (elemheight < this.element.scrollHeight) {
                    elemheight = elemheight + 25;
                }
                let elemFinalHeight = this.props.maxLength && this.props.maxLength < this.state.height ? this.props.maxLength : elemheight;
                elem.style.height = elemFinalHeight + "px";
                elem.height = elemFinalHeight;

            }
        }
    }

    /**
     * Calcule si le champs à une valeur ou non
     * @param event
     */
    valueChange(event: any) {

        if (this.state.extendable) {
            this.setClientHeight(event)
        }

        // mise à jour du texte d'affichage du nombre de caractère
        let value = event.target.value;
        if (value !== 0) {
            this.refChar.innerHTML = this.props.charLabel ?
                this.props.charLabel.replace('{count}', value.length) :
                this.i18n("textarea.charLabel", {count: value.length});
        } else {
            this.refChar.innerHTML = "";
        }

        //affichage de l'alerte indiquant que le nombre de caractère est dépassé
        if (this.props.maxChar && value.length > this.props.maxChar && !this.errorShowed) {

            if (this.props.showAlert) {
                //affichage de l'alerte
                let message = this.props.alertMessage ?
                    this.props.alertMessage.replace('{count}', value.length).replace('{maxChar}', this.props.maxChar.toString()) :
                    this.i18n("textarea.alertMessage", {count: value.length, maxChar: this.props.maxChar});
                let title = this.props.alertTitle ?
                    this.props.alertTitle.replace('{count}', value.length).replace('{maxChar}', this.props.maxChar.toString()) :
                    this.i18n("textarea.alertTitle", {count: value.length, maxChar: this.props.maxChar});

                this.showAlert(message, title);
            }

            this.refChar.className = this.refChar.className.replace(" textarea-too-many-char", "");
            this.refChar.className += " textarea-too-many-char";
        }
        if (value.length <= this.props.maxChar && this.errorShowed) {
            this.errorShowed = false;
            this.refChar.className = this.refChar.className.replace(" textarea-too-many-char", "");
        }

        if (event.target.value && !this.state.valued) {
            this.setState({valued: true, currentValue: value});
        } else if (!event.target.value && this.state.valued) {
            this.setState({valued: false});
        }
    }

    /**
     * Surcharge de la méthode
     * @param value
     * @returns {InputField}
     */
    setCurrentValue(value: any): this {
        super.setCurrentValue(value);
        this.setState({valued: (value !== "" && value), currentValue: value});
        return this;
    }

    /**
     * teste si le champs n'est pas vide
     * @returns {boolean|any}
     */
    isValued(): boolean {
        return this.state.valued || (this.props as any).value;
    }

    /**
     * Permet de rendre à null la valeur du champ
     */
    resetValue(): void {

        if(this.htmlElement && this.htmlElement.onchange) {
            this.htmlElement.onchange();
        }
        this.refChar.innerHTML = "";
        this.htmlElement.value = "";
        fireHornetEvent(VALUE_CHANGED_EVENT.withData(this.htmlElement));
        this.setState({valued: false}, () => {
            this.setClientHeight();
        });
    }

    /**
     * Méthode déclenchant la fermeture de l'alerte
     */
    protected closeAlert(): void {
        this.errorShowed = true;
        (this.refs.alert as Alert).close();
    }

    /***
     * Déclenche l'affichage de l'alerte
     * @param message
     * @param title
     * @param {Function} fct fonction exécutée sur la validation
     */
    protected showAlert(message: string, title: string): void {
        (this.refs.alert as Alert).setMessage(message);
        (this.refs.alert as Alert).setTitle(title);
        (this.refs.alert as Alert).setOnClickOk(() => {
            this.closeAlert();
        }).open();
    }
}