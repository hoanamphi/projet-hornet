"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-core - Ensemble des composants qui forment le coeur de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var nodeUtil = require("util");
var _ = require("lodash");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.event.hornet-event");
/* Inclusion du polyfill pour support du constructeur CustomEvent pour IE >= 9 */
if (typeof window !== "undefined" && typeof window.CustomEvent !== "function" && document.createEvent) {
    (function () {
        function CustomEvent(event, params) {
            params = params || { bubbles: false, cancelable: false, detail: undefined };
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
            return evt;
        }
        CustomEvent.prototype = window.Event.prototype;
        window.CustomEvent = CustomEvent;
    })();
}
/**
 * Reprend la structure de la classe Event JavaScript
 */
var BaseEvent = /** @class */ (function () {
    function BaseEvent(type, eventInitDict) {
    }
    BaseEvent.prototype.initEvent = function (eventTypeArg, canBubbleArg, cancelableArg) { };
    ;
    BaseEvent.prototype.preventDefault = function () { };
    BaseEvent.prototype.stopImmediatePropagation = function () { };
    BaseEvent.prototype.stopPropagation = function () { };
    ;
    return BaseEvent;
}());
exports.BaseEvent = BaseEvent;
if (!hornet_js_utils_1.Utils.isServer) {
    nodeUtil.inherits(BaseEvent, Event);
}
var HornetEvent = /** @class */ (function (_super) {
    tslib_1.__extends(HornetEvent, _super);
    function HornetEvent(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        return _this;
    }
    /**
     * @returns {HornetEvent<EventDetailInterface>} un clone de cet évènement
     */
    HornetEvent.prototype.clone = function () {
        var cloned = new HornetEvent(this.name);
        /* On ne peut cloner les autres attributs : cela déclenche une erreur de type Illegal invocation*/
        return cloned;
    };
    /**
     * @param data détail de l'évènement à créer
     * @returns {HornetEvent} un clone de cet évènement alimenté avec le détail indiqué
     */
    HornetEvent.prototype.withData = function (data) {
        /* Avec Chrome 50, on ne peut utiliser clone ou cloneDeep sur une instance de Event :
        en effet Event.toString() renvoie  [object Event], et cette signature ne fait pas partie des éléments
        clonables de lodash
        (cf. lodash.baseCLone() : https://github.com/lodash/lodash/blob/master/dist/lodash.js#L2330
        et https://github.com/lodash/lodash/blob/master/dist/lodash.js#L70)
        */
        //var cloneEvent = _.clone(this, 1);
        var cloneEvent = this.clone();
        cloneEvent.detail = data;
        return cloneEvent;
    };
    return HornetEvent;
}(BaseEvent));
exports.HornetEvent = HornetEvent;
function listenWindowEvent(eventName, callback, capture) {
    if (capture === void 0) { capture = true; }
    window.addEventListener(eventName, callback, capture);
}
exports.listenWindowEvent = listenWindowEvent;
function listenOnceWindowEvent(eventName, callback, capture) {
    if (capture === void 0) { capture = true; }
    var wrapped = function () {
        // on supprime le listener pour simuler l'écoute unique de l'évènement
        removeWindowEvent(eventName, wrapped, capture);
        callback.apply(undefined, arguments);
    };
    listenWindowEvent(eventName, wrapped, capture);
}
exports.listenOnceWindowEvent = listenOnceWindowEvent;
function removeWindowEvent(eventName, callback, capture) {
    if (capture === void 0) { capture = true; }
    window.removeEventListener(eventName, callback, capture);
}
exports.removeWindowEvent = removeWindowEvent;
function listenHornetEvent(event, callback, capture) {
    if (capture === void 0) { capture = true; }
    if (!hornet_js_utils_1.Utils.isServer) {
        listenWindowEvent(event.name, callback, capture);
    }
    else {
        logger.warn("HornetEvent.listenHornetEvent can't be called from nodejs !!");
    }
}
exports.listenHornetEvent = listenHornetEvent;
function listenOnceHornetEvent(event, callback, capture) {
    if (capture === void 0) { capture = true; }
    if (!hornet_js_utils_1.Utils.isServer) {
        listenOnceWindowEvent(event.name, callback, capture);
    }
    else {
        logger.warn("HornetEvent.listenOnceHornetEvent can't be called from nodejs !!");
    }
}
exports.listenOnceHornetEvent = listenOnceHornetEvent;
function removeHornetEvent(event, callback, capture) {
    if (capture === void 0) { capture = true; }
    if (!hornet_js_utils_1.Utils.isServer) {
        removeWindowEvent(event.name, callback, capture);
    }
    else {
        logger.warn("HornetEvent.removeWindowEvent can't be called from nodejs !!");
    }
}
exports.removeHornetEvent = removeHornetEvent;
function fireHornetEvent(event, eventOptions) {
    if (eventOptions === void 0) { eventOptions = {}; }
    if (!hornet_js_utils_1.Utils.isServer) {
        var ev = new CustomEvent(event.name, _.assign({
            detail: event.detail
        }, {
            bubbles: true,
            cancelable: true
        }, eventOptions));
        window.dispatchEvent(ev);
    }
    else {
        logger.warn("HornetEvent.fireHornetEvent can't be called from nodejs !!");
    }
}
exports.fireHornetEvent = fireHornetEvent;
exports.ASYNCHRONOUS_REQUEST_EVENT = new HornetEvent("ASYNCHRONOUS_REQUEST");
exports.ASYNCHRONOUS_REQUEST_EVENT_COMPONENT = new HornetEvent("ASYNCHRONOUS_REQUEST_COMPONENT");
var ServiceEvent = /** @class */ (function () {
    function ServiceEvent() {
    }
    ServiceEvent.setRequestInProgress = function (inProgress) {
        fireHornetEvent(exports.ASYNCHRONOUS_REQUEST_EVENT.withData({ inProgress: inProgress }));
    };
    ServiceEvent.setRequestComponentInProgress = function (inProgress) {
        fireHornetEvent(exports.ASYNCHRONOUS_REQUEST_EVENT_COMPONENT.withData({ inProgress: inProgress }));
    };
    return ServiceEvent;
}());
exports.ServiceEvent = ServiceEvent;
exports.CHANGE_URL_WITH_DATA_EVENT = new HornetEvent("CHANGE_URL_WITH_DATA_EVENT");
exports.UNAUTHORIZE_ERROR_EVENT = new HornetEvent("UNAUTHORIZE_ERROR_EVENT");

//# sourceMappingURL=hornet-event.js.map
