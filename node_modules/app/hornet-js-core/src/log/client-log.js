"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * hornet-js-core - Ensemble des composants qui forment le coeur de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var ClientLog = /** @class */ (function () {
    function ClientLog() {
    }
    /**
     * Cette fonction retourne la fonction d'initialisation des loggers de l'application côté ClientLog.
     *
     * @param logConfig  configuration log
     */
    ClientLog.getLoggerBuilder = function (logConfig) {
        var appenders = [];
        ClientLog.configHornetLoggerHelp();
        ClientLog.configHornetJsLogState();
        if (logConfig && Object.keys(logConfig).length) {
            ClientLog.defaultRemote = ClientLog.getLoggerKeyValue("LOG remote", logConfig.remote, ClientLog.defaultRemote);
            ClientLog.defaultLogLevel = ClientLog.getLoggerKeyValue("LOG level", logConfig.level, ClientLog.defaultLogLevel);
            if (logConfig.appenders && Object.keys(logConfig.appenders).length) {
                Object.keys(logConfig.appenders).forEach(function (keyAppender) {
                    var appender = logConfig.appenders[keyAppender];
                    if (appender.type === "BrowserConsole") {
                        appenders.push(ClientLog.configureBrowserConsole(appender));
                    }
                    else if (appender.type === "Ajax") {
                        appenders.push(ClientLog.configureAjaxConsole(appender));
                    }
                    else {
                        console.warn("LOGGER WEB : LOGGER TYPE NOT SUPPORT : ", appender.type);
                    }
                });
            }
            else {
                console.warn("LOGGER WEB : APPENDER NOT DEFINED");
            }
        }
        else {
            console.warn("LOGGER WEB : CONFIGURATION NOT DEFINED");
        }
        var logLevel = hornet_js_utils_1.Utils.log4js.Level.INFO.toLevel(ClientLog.setHornetJsLogLevel());
        var remoteLog = ClientLog.setHornetJsRemoteLog();
        if (!appenders.length) {
            console.warn("LOGGER WEB : NONE APPENDER DEFINED, APPLY DEFAULT APPENDER BrowserConsoleAppender");
            var consoleAppender = new hornet_js_utils_1.Utils.log4js.BrowserConsoleAppender();
            var logLayout = ClientLog.getConsoleLayout(ClientLog.setHornetJsLogLayout());
            consoleAppender.setLayout(logLayout);
            appenders.push(consoleAppender);
        }
        return function (category) {
            var _this = this;
            this.log4jsLogger = hornet_js_utils_1.Utils.log4js.getLogger(category);
            this.log4jsLogger.setLevel(logLevel);
            appenders.forEach(function (appender) {
                if (!(appender instanceof hornet_js_utils_1.Utils.log4js.AjaxAppender)
                    || ((appender instanceof hornet_js_utils_1.Utils.log4js.AjaxAppender) && remoteLog)) {
                    _this.log4jsLogger.addAppender(appender);
                }
            });
        };
    };
    ClientLog.configureAjaxConsole = function (appender) {
        if (appender.layout) {
            if (appender.layout.type === "pattern" && appender.layout.pattern) {
                ClientLog.defaultRemoteLogLayout = ClientLog.getLoggerKeyValue("AjaxAppender layout.pattern", appender.layout.pattern, ClientLog.defaultRemoteLogLayout);
            }
            else {
                ClientLog.defaultRemoteLogLayout = ClientLog.getLoggerKeyValue("AjaxAppender layout.type", appender.layout.type, ClientLog.defaultRemoteLogLayout);
            }
        }
        ClientLog.defaultRemoteLogThreshold = ClientLog.getLoggerKeyValue("AjaxAppender threshold", appender.threshold, ClientLog.defaultRemoteLogThreshold);
        ClientLog.defaultRemoteLogTimeout = ClientLog.getLoggerKeyValue("AjaxAppender timeout", appender.timeout, ClientLog.defaultRemoteLogTimeout);
        if (appender.url.indexOf("http") > -1) {
            // On traite les urls complètes, correspond à une url distante autre que celle du serveur d'appli
            ClientLog.defaultRemoteUrl = ClientLog.getLoggerKeyValue("AjaxAppender url", appender.url, ClientLog.defaultRemoteUrl);
        }
        else {
            // l'url remote est le serveur applicatif
            ClientLog.defaultRemoteUrl = ClientLog.getLoggerKeyValue("AjaxAppender url", hornet_js_utils_1.Utils.buildContextPath(appender.url), ClientLog.defaultRemoteUrl);
        }
        var remoteLogUrl = ClientLog.setHornetJsRemoteLogUrl(ClientLog.defaultRemoteUrl);
        var remoteLogLayout = ClientLog.setHornetJsRemoteLogLayout();
        var remoteStackErrorLog = ClientLog.setHornetJsStacksLog();
        var ajaxAppender = new hornet_js_utils_1.Utils.log4js.AjaxAppender(remoteLogUrl);
        ajaxAppender.setLayout(ClientLog.getConsoleLayout(remoteLogLayout.layout));
        ajaxAppender.setThreshold(remoteLogLayout.threshold);
        ajaxAppender.setTimeout(remoteLogLayout.timeout);
        return ajaxAppender;
    };
    ClientLog.configureBrowserConsole = function (appender) {
        if (appender.layout) {
            if (appender.layout.type === "pattern" && appender.layout.pattern) {
                ClientLog.defaultLogLayout = ClientLog.getLoggerKeyValue("BrowserConsoleAppender layout.pattern", appender.layout.pattern, ClientLog.defaultLogLayout);
            }
            else {
                ClientLog.defaultLogLayout = ClientLog.getLoggerKeyValue("BrowserConsoleAppender layout.type", appender.layout.type, ClientLog.defaultLogLayout);
            }
        }
        var consoleAppender = new hornet_js_utils_1.Utils.log4js.BrowserConsoleAppender();
        var logLayout = ClientLog.getConsoleLayout(ClientLog.setHornetJsLogLayout());
        consoleAppender.setLayout(logLayout);
        return consoleAppender;
    };
    ClientLog.getLoggerKeyValue = function (confKey, value, defaultValue) {
        if (!value && String(value) !== "false") {
            console.warn("LOGGER WEB : KEY NOT DEFINED : ", confKey, ", DEFAULT VALUE APPLY : ", defaultValue);
        }
        return value || defaultValue;
    };
    ClientLog.configHornetLoggerHelp = function () {
        if (!window.getHornetLoggerHelp) {
            window.getHornetLoggerHelp = function () {
                var level = "Level : \
                    \n\t ALL\
                    \n\t TRACE\
                    \n\t DEBUG\
                    \n\t INFO\
                    \n\t WARN\
                    \n\t ERROR\
                    \n\t FATAL\
                    \n\t OFF";
                var layout = "\n\n Layout : \
                    \n\t BASIC : default\
                    \n\t SIMPLE\
                    \n\t THIN\
                    \n\t JSON\
                    \n\t XML\
                    \n\t HTML\
                    \n\t VOID - eq pattern - see pattern format";
                var pattern = "\n\n Pattern format : \
                    \n\t %r - time in toLocaleTimeString format \
                    \n\t %p - log level \
                    \n\t %c - log category\
                    \n\t %h - hostname\
                    \n\t %m - log data\
                    \n\t %d - date in various formats\
                    \n\t %% - %\
                    \n\t %n - newline\
                    \n\t %x{<tokenname>} - add dynamic tokens to your log. Tokens are specified in the tokens parameter\
                    \n\t %[ and %] - define a colored bloc";
                console.log(level + layout + pattern);
            };
        }
    };
    ClientLog.configHornetJsLogState = function () {
        if (!window.getHornetJsLogState) {
            window.getHornetJsLogState = function () {
                if (window.localStorage) {
                    console.log("\n Log Level :", window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_LEVEL_KEY) || ClientLog.defaultLogLevel, "\n Log Layout :", window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_LAYOUT_KEY) || ClientLog.defaultLogLayout, "\n Remote :", window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_KEY) || ClientLog.defaultRemote, "\n Remote Log Layout :", window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_KEY) || ClientLog.defaultRemoteLogLayout, "\n Remote Log Threshold :", window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_THRESHOLD_KEY) || ClientLog.defaultRemoteLogThreshold, "\n Remote Log Timeout :", window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_TIMEOUT_KEY) || ClientLog.defaultRemoteLogTimeout, "\n Remote Url :", window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_URL_KEY) || ClientLog.defaultRemoteUrl);
                }
                else {
                    console.log("\n Log Level :", ClientLog.defaultLogLevel, "\n Log Layout :", ClientLog.defaultLogLayout, "\n Remote :", ClientLog.defaultRemote, "\n Remote Log Layout :", ClientLog.defaultRemoteLogLayout, "\n Remote Log Threshold :", ClientLog.defaultRemoteLogThreshold, "\n Remote Log Timeout :", ClientLog.defaultRemoteLogTimeout, "\n Remote Url :", ClientLog.defaultRemoteUrl);
                }
            };
        }
    };
    ClientLog.setHornetJsLogLevel = function () {
        if (window.localStorage) {
            if (!window.setHornetJsLogLevel) {
                window.setHornetJsLogLevel = function (level) {
                    var logLevel = ClientLog.testParamLocalStorage(level, ClientLog.defaultLogLevel);
                    var newLogLevel = hornet_js_utils_1.Utils.log4js.Level.INFO.toLevel(logLevel, ClientLog.defaultLogLevel).toString();
                    console.log("New log level :", newLogLevel, ". Reload page (F5) to activate");
                    window.localStorage.setItem(ClientLog.LOCAL_STORAGE_LOGGER_LEVEL_KEY, newLogLevel);
                };
            }
            return window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_LEVEL_KEY) || ClientLog.defaultLogLevel;
        }
        else {
            console.log("ERREUR: Browser doesn't support LocalStorage");
            return ClientLog.defaultLogLevel;
        }
    };
    /**
     * Met a disposition une fonction sur le browser (window.setStacksErrorsLogs)
     * Appelée depuis du code client, cette fonction permet de changer  l'option de paramétrage
     * pour activer ou désactiver la generation des stacks dans les logs d'erreur
     * Cette option est stockée dans le navigateur au niveau du localStorage,
     * elle peut donc aussi être modifié manuellement par l'utilisateur
     */
    ClientLog.setHornetJsStacksLog = function () {
        if (window.localStorage) {
            if (!window.setHornetJsStacksLog) {
                window.setHornetJsStacksLog = function (enableValue) {
                    var enableStacks = (!enableValue || enableValue === "null" || enableValue === "undefined") ? ClientLog.defaultStackLogEnabled : enableValue;
                    console.log("New value for enableStacksErrorsLog :", enableValue, ". Reload page (F5) to activate");
                    window.localStorage.setItem(ClientLog.LOCAL_STORAGE_LOGGER_STACK_ENABLED, enableStacks);
                };
            }
        }
        else {
            console.log("ERREUR: Browser doesn't support LocalStorage");
        }
    };
    ClientLog.setHornetJsLogLayout = function () {
        if (window.localStorage) {
            if (!window.setHornetJsLogLayout) {
                window.setHornetJsLogLayout = function (layout) {
                    var logLayout = ClientLog.testParamLocalStorage(layout, ClientLog.defaultLogLayout);
                    console.log("New log layout :", logLayout, ". Reload page (F5) to activate");
                    window.localStorage.setItem(ClientLog.LOCAL_STORAGE_LOGGER_LAYOUT_KEY, logLayout);
                };
            }
            return window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_LAYOUT_KEY) || ClientLog.defaultLogLayout;
        }
        else {
            console.log("ERREUR: Browser doesn't support LocalStorage");
            return ClientLog.defaultLogLayout;
        }
    };
    ClientLog.setHornetJsRemoteLog = function () {
        if (window.localStorage) {
            if (!window.setHornetJsRemoteLog) {
                window.setHornetJsRemoteLog = function (remote) {
                    var logRemote = ClientLog.testParamLocalStorage(remote, ClientLog.defaultRemote);
                    console.log("Remote log (De)Activation :", logRemote, ". Reload page (F5) to activate");
                    window.localStorage.setItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_KEY, logRemote.toString());
                };
            }
            return (window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_KEY)) === "true" || ClientLog.defaultRemote;
        }
        else {
            console.log("ERREUR: Browser doesn't support LocalStorage");
            return ClientLog.defaultRemote;
        }
    };
    ClientLog.setHornetJsRemoteLogLayout = function () {
        if (window.localStorage) {
            if (!window.setHornetJsRemoteLogLayout) {
                window.setHornetJsRemoteLogLayout = function (layout, threshold, timeout) {
                    var logLayout = ClientLog.testParamLocalStorage(layout, ClientLog.defaultRemoteLogLayout);
                    var logTreshold = parseInt(threshold) || ClientLog.defaultRemoteLogThreshold;
                    var logTimeout = parseInt(timeout) || ClientLog.defaultRemoteLogTimeout;
                    console.log("New remote log layout :", logLayout, " thresold :", logTreshold, ", logTimeout :", logTimeout, ". Reload page (F5) to activate");
                    window.localStorage.setItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_KEY, logLayout.toString());
                    window.localStorage.setItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_THRESHOLD_KEY, logTreshold.toString());
                    window.localStorage.setItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_TIMEOUT_KEY, logTimeout.toString());
                };
            }
            return {
                layout: window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_KEY) || ClientLog.defaultRemoteLogLayout,
                threshold: window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_THRESHOLD_KEY) || ClientLog.defaultRemoteLogThreshold,
                timeout: window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_TIMEOUT_KEY) || ClientLog.defaultRemoteLogTimeout
            };
        }
        else {
            console.log("ERREUR: Browser doesn't support LocalStorage");
            return {
                layout: ClientLog.defaultRemoteLogLayout,
                threshold: ClientLog.defaultRemoteLogThreshold,
                timeout: ClientLog.defaultRemoteLogTimeout
            };
        }
    };
    ClientLog.setHornetJsRemoteLogUrl = function (defaultUrl) {
        if (window.localStorage) {
            if (!window.setHornetJsRemoteLogUrl) {
                window.setHornetJsRemoteLogUrl = function (url) {
                    var logRemoteUrl = ClientLog.testParamLocalStorage(url, defaultUrl);
                    console.log("New remote url :", logRemoteUrl, ". Reload page (F5) to activate");
                    window.localStorage.setItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_URL_KEY, logRemoteUrl.toString());
                };
            }
            return window.localStorage.getItem(ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_URL_KEY) || defaultUrl;
        }
        else {
            console.log("ERREUR: Browser doesn't support LocalStorage");
            return defaultUrl;
        }
    };
    ClientLog.testParamLocalStorage = function (value, defaultValue) {
        return (!value || value === "null" || value === "undefined") ? defaultValue : value;
    };
    ClientLog.getConsoleLayout = function (logLayout) {
        var newLayout = new hornet_js_utils_1.Utils.log4js.BasicLayout();
        if (logLayout) {
            var isPatternLayout = void 0;
            if (logLayout.indexOf("%") === -1) {
                // on ne traite pas les patterns
                logLayout = logLayout.toLocaleUpperCase();
                isPatternLayout = false;
            }
            else {
                isPatternLayout = true;
            }
            if (logLayout === "BASIC") {
                newLayout = new hornet_js_utils_1.Utils.log4js.BasicLayout();
            }
            else if (logLayout === "SIMPLE") {
                newLayout = new hornet_js_utils_1.Utils.log4js.SimpleLayout();
            }
            else if (logLayout === "THIN") {
                newLayout = new hornet_js_utils_1.Utils.log4js.ThinLayout();
            }
            else if (logLayout === "JSON") {
                newLayout = new hornet_js_utils_1.Utils.log4js.JSONLayout();
            }
            else if (logLayout === "XML") {
                newLayout = new hornet_js_utils_1.Utils.log4js.XMLLayout();
            }
            else if (logLayout === "HTML") {
                newLayout = new hornet_js_utils_1.Utils.log4js.HtmlLayout();
            }
            else {
                if (isPatternLayout) {
                    newLayout = new hornet_js_utils_1.Utils.log4js.PatternLayout(logLayout);
                }
                else {
                    newLayout = ClientLog.getDefaultConsoleLayout();
                    console.warn("PATTERN LAYOUT NOT FOUND : '", logLayout, "' APPLY DEFAULT");
                }
            }
        }
        else {
            newLayout = ClientLog.getDefaultConsoleLayout();
            console.warn("LAYOUT NOT FOUND, APPLY DEFAULT");
        }
        return newLayout;
    };
    ClientLog.getDefaultConsoleLayout = function () {
        var defaultLayout;
        if (ClientLog.defaultRemote) {
            defaultLayout = ClientLog.getConsoleLayout(ClientLog.defaultRemoteLogLayout);
        }
        else {
            defaultLayout = ClientLog.getConsoleLayout(ClientLog.defaultLogLayout);
        }
        return defaultLayout;
    };
    ClientLog.LOCAL_STORAGE_LOGGER_LEVEL_KEY = "hornet-js.logger.level";
    ClientLog.LOCAL_STORAGE_LOGGER_LAYOUT_KEY = "hornet-js.logger.layout";
    ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_KEY = "hornet-js.logger.remote";
    ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_KEY = "hornet-js.logger.remote.layout";
    ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_THRESHOLD_KEY = "hornet-js.logger.remote.threshold";
    ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_LAYOUT_TIMEOUT_KEY = "hornet-js.logger.remote.timeout";
    ClientLog.LOCAL_STORAGE_LOGGER_REMOTE_URL_KEY = "hornet-js.logger.remote.url";
    ClientLog.LOCAL_STORAGE_LOGGER_STACK_ENABLED = "hornet-js.logger.stackEnabled";
    ClientLog.defaultRemote = false;
    ClientLog.defaultLogLevel = "ERROR";
    ClientLog.defaultLogLayout = "BASIC";
    ClientLog.defaultRemoteLogLayout = "JSON";
    ClientLog.defaultRemoteLogThreshold = 100;
    ClientLog.defaultRemoteLogTimeout = 3000;
    ClientLog.defaultRemoteUrl = hornet_js_utils_1.Utils.buildContextPath("/log");
    ClientLog.defaultStackLogEnabled = "false";
    return ClientLog;
}());
exports.ClientLog = ClientLog;

//# sourceMappingURL=client-log.js.map
