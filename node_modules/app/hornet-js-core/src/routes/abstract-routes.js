"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-core - Ensemble des composants qui forment le coeur de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var _ = require("lodash");
var technical_error_1 = require("hornet-js-utils/src/exception/technical-error");
var codes_error_1 = require("hornet-js-utils/src/exception/codes-error");
var media_type_1 = require("hornet-js-core/src/protocol/media-type");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.routes.abstract-routes");
/** Routes type */
exports.RouteType = {
    PAGE: "PAGE_ROUTE",
    DATA: "DATA_ROUTE"
};
exports.PUBLIC_ROUTE = [];
exports.PRIVATE_ROUTE = ["*"];
exports.DEFAULT_AUTHORIZATION = exports.PRIVATE_ROUTE;
exports.DEFAULT_METHOD = "get";
var RouteAction = /** @class */ (function () {
    function RouteAction() {
        /** Attributs de la route déclenchant l'action */
        this.attributes = {};
        /** Utilisateur connecté */
        this.user = hornet_js_utils_1.Utils.getCls("hornet.user");
    }
    /**
     * Renvoie l'objet contenant les éléments nécessaires à la validation des données transmises à cette action.
     * Renvoie null par défaut : à surcharger éventuellement dans la classe action implémentée.
     * @returns {null} une instance de ActionValidation ou null
     */
    RouteAction.prototype.getDataValidator = function () {
        return null;
    };
    /**
     * Renvoie les données entrantes éventuelles, récupérées par défaut directement dans le corps de la requête.
     * A sucharger si nécessaire.
     * @return {any} un objet contenant les données transmises à cette action
     */
    RouteAction.prototype.getPayload = function () {
        return this.req.body;
    };
    /**
     * Renvoie le MediaType issu de l'entête de la requête.
     * @return {any} un objet contenant les données transmises à cette action
     */
    RouteAction.prototype.getMediaType = function () {
        return media_type_1.MediaTypes.fromMime(this.req.get('Accept'));
    };
    return RouteAction;
}());
exports.RouteAction = RouteAction;
var RouteActionService = /** @class */ (function (_super) {
    tslib_1.__extends(RouteActionService, _super);
    function RouteActionService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RouteActionService.prototype.getService = function () {
        return this.service;
    };
    return RouteActionService;
}(RouteAction));
exports.RouteActionService = RouteActionService;
var RouteInfos = /** @class */ (function () {
    function RouteInfos(type, attributes, service) {
        if (attributes === void 0) { attributes = {}; }
        this.attributes = {};
        this.type = type;
        _.assign(this.attributes, attributes);
        if (service) {
            this.service = service;
        }
    }
    RouteInfos.prototype.getRouteType = function () {
        return this.type;
    };
    RouteInfos.prototype.getAttributes = function () {
        return this.attributes;
    };
    RouteInfos.prototype.getService = function () {
        return this.service;
    };
    return RouteInfos;
}());
exports.RouteInfos = RouteInfos;
var PageRouteInfos = /** @class */ (function (_super) {
    tslib_1.__extends(PageRouteInfos, _super);
    function PageRouteInfos(viewComponent, attributes, service) {
        var _this = _super.call(this, exports.RouteType.PAGE, attributes, service) || this;
        _this.viewComponent = viewComponent;
        return _this;
    }
    PageRouteInfos.prototype.getViewComponent = function () {
        return this.viewComponent;
    };
    return PageRouteInfos;
}(RouteInfos));
exports.PageRouteInfos = PageRouteInfos;
var DataRouteInfos = /** @class */ (function (_super) {
    tslib_1.__extends(DataRouteInfos, _super);
    function DataRouteInfos(action, attributes, service) {
        var _this = _super.call(this, exports.RouteType.DATA, attributes, service) || this;
        _this.action = action;
        return _this;
    }
    DataRouteInfos.prototype.getAction = function () {
        return this.action;
    };
    return DataRouteInfos;
}(RouteInfos));
exports.DataRouteInfos = DataRouteInfos;
/** Routes Declaration */
var AbstractRoutes = /** @class */ (function () {
    function AbstractRoutes() {
        this.pageRoutes = {};
        this.dataRoutes = {};
        this.lazyRoutes = {};
        this.subRoutes = {};
    }
    AbstractRoutes.prototype.resolveAuthorizationAndMethod = function (authorizationOrMethod, method) {
        var auth, meth;
        if (_.isString(authorizationOrMethod)) {
            auth = exports.DEFAULT_AUTHORIZATION;
            meth = authorizationOrMethod;
        }
        else {
            if (_.isUndefined(authorizationOrMethod)) {
                auth = exports.DEFAULT_AUTHORIZATION;
            }
            else {
                auth = authorizationOrMethod;
            }
            if (_.isString(method)) {
                meth = method;
            }
            else {
                meth = exports.DEFAULT_METHOD;
            }
        }
        return { authorization: auth, method: meth };
    };
    AbstractRoutes.prototype.addPageRoute = function (path, handler, authorization) {
        var args = this.resolveAuthorizationAndMethod(authorization, exports.DEFAULT_METHOD);
        if (!this.pageRoutes[path])
            this.pageRoutes[path] = {};
        this.pageRoutes[path][args.method.toLowerCase()] = { authorization: args.authorization, handler: handler };
    };
    AbstractRoutes.prototype.addDataRoute = function (path, handler, authorizationOrMethod, method) {
        var args = this.resolveAuthorizationAndMethod(authorizationOrMethod, method);
        if (!this.dataRoutes[path])
            this.dataRoutes[path] = {};
        this.dataRoutes[path][args.method.toLowerCase()] = { authorization: args.authorization, handler: handler };
    };
    AbstractRoutes.prototype.addLazyRoutes = function (path, subRoutesFile) {
        this.lazyRoutes[path] = subRoutesFile;
    };
    AbstractRoutes.prototype.getPageRoutes = function () {
        return this.pageRoutes;
    };
    AbstractRoutes.prototype.getDataRoutes = function () {
        return this.dataRoutes;
    };
    AbstractRoutes.prototype.getLazyRoutes = function () {
        return this.lazyRoutes;
    };
    AbstractRoutes.prototype.addSubRoute = function (path, subRoutesFile) {
        this.subRoutes[path] = subRoutesFile;
    };
    AbstractRoutes.prototype.getSubRoutes = function () {
        return this.subRoutes;
    };
    /**
     * Permet de charger les routes depuis une liste de répertoires
     * @param paths
     * @returns route module
     */
    AbstractRoutes.prototype.getDefaultRouteLoader = function (paths) {
        return function (name) {
            logger.trace("defaultRouteLoader(" + name + ")");
            var index = _.findIndex(paths, function (path) {
                try {
                    return require.main.require(path + name);
                }
                catch (e) {
                    // not throw error for module not found (parse all paths)
                    if (e.code !== "MODULE_NOT_FOUND") {
                        throw new technical_error_1.TechnicalError('ERR_TECH_' + codes_error_1.CodesError.ROUTE_ERROR, { errorMessage: e.message });
                    }
                }
            });
            if (index == -1) {
                logger.error("Unknow route " + name + " in paths " + paths);
                throw new technical_error_1.TechnicalError('ERR_TECH_' + codes_error_1.CodesError.ROUTE_ERROR, { errorMessage: codes_error_1.CodesError.DEFAULT_ERROR_MSG });
            }
            return require.main.require(paths[index] + name);
        };
    };
    return AbstractRoutes;
}());
exports.AbstractRoutes = AbstractRoutes;

//# sourceMappingURL=abstract-routes.js.map
