"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-core - Ensemble des composants qui forment le coeur de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var events = require("events");
var _ = require("lodash");
var promise_api_1 = require("hornet-js-utils/src/promise-api");
var technical_error_1 = require("hornet-js-utils/src/exception/technical-error");
var codes_error_1 = require("hornet-js-utils/src/exception/codes-error");
var object_utils_1 = require("hornet-js-utils/src/object-utils");
var datasource_option_1 = require("hornet-js-core/src/component/datasource/options/datasource-option");
var datasource_config_1 = require("hornet-js-core/src/component/datasource/config/service/datasource-config");
var datasource_config_page_1 = require("hornet-js-core/src/component/datasource/config/service/datasource-config-page");
var DataSourceStatus;
(function (DataSourceStatus) {
    DataSourceStatus[DataSourceStatus["Dummy"] = 0] = "Dummy";
    DataSourceStatus[DataSourceStatus["Initialized"] = 1] = "Initialized";
})(DataSourceStatus = exports.DataSourceStatus || (exports.DataSourceStatus = {}));
/***
 * @classdesc Classe de base des datasources
 * elle contient une methode pour récupérer des datas, varie selon le type de datasource;
 * elle implémente une methode qui transforme les données récupérées selon une classe de mapping  {@link DataSourceMap} afin de l'exploiter directement par l'IHM.
 * liste des events déclenchés par le datasource lorsque les opérations sont effectuées:
 * -init
 * -fetch
 * -add
 * -delete
 * -select
 * -sort
 * -filter
 * -error see{@link CodesError.DATASOURCE*}
 * @class
 * @extends EventEmitter
 */
var DataSource = /** @class */ (function (_super) {
    tslib_1.__extends(DataSource, _super);
    /***
     * @param {DataSourceConfig|DataSourceConfigPage|Array<T>}
     *        config : accepte soit une liste de l'éléments Array<T>, soit un service DataSourceConfig | DataSourceConfigPage
     * @param {DataSourceMap} keysMap  : utilisée pour la transformation des resultats du fetch.
     * @param {DataSourceOption[]} options : liste de paramètres supplémentaires à transmettre au fetch
     * Pour un config de type
     */
    function DataSource(config, keysMap, options) {
        if (keysMap === void 0) { keysMap = {}; }
        var _this = _super.call(this) || this;
        _this.config = config;
        _this.keysMap = keysMap;
        _this.options = options;
        /***
         * tableau de résultats du datasource
         * @instance
         */
        _this.datasourceResults = [];
        /***
         * backup des résultats du datasource
         * @instance
         */
        _this._results_backup = [];
        /***
         * mode filtre
         * @instance
         */
        _this._filtering_flag = false;
        /**
         * Indique si le datasource courant est de type DataSourceArray.
         */
        _this.isDataSourceArray = false;
        /**
         * Sauvegarde des argument du fetch pour rejouer lors du tri
         */
        _this.fetchArgsSaved = null;
        /**
         * nom des argument du fetch pour rejouer lors du tri en lui ajoutant le sortData
         */
        _this.fetchAttrName = "criteres";
        _this._status = DataSourceStatus.Dummy;
        _this.config = config;
        if (!_this.config) {
            _this.config = [];
        }
        if (_this.config instanceof datasource_config_1.DataSourceConfig) {
            _this.scope = _this.config.scope;
            _this.method = _this.config.scope[_this.config.methodName];
            _this.fetchAttrName = _this.config.fetchAttrName || "criteres";
        }
        if (_this.config instanceof datasource_config_page_1.DataSourceConfigPage) {
            _this.scope = _this.config.page.getService();
            _this.method = _this.config.method;
            _this.fetchAttrName = _this.config.fetchAttrName || "criteres";
        }
        if (_this.config instanceof Array) {
            _this.isDataSourceArray = true;
            _this.init();
        }
        var init = _.find(options, function (option) {
            return option instanceof datasource_option_1.InitAsync;
        });
        var sort = _.find(options, function (option) {
            return option instanceof datasource_option_1.DefaultSort;
        });
        _this.defaultSort = sort ? sort : null;
        _this.initAsync = init ? init : null;
        return _this;
    }
    /***
     * Méthode qui déclenche un fetch appelé pour initialiser un datasource.
     * @param {any} args  paramètres à renseigner pour l'appel de la méthode de récupération des données.
     * Déchenche un event init
     */
    DataSource.prototype.init = function (args) {
        (this.initAsync && this.initAsync.isAsync) ? this.initData(args) : this.initDataSync(args);
    };
    /***
     * Méthode qui déclenche un fetch appelé pour initialiser un datasource.
     * @param {any} args  paramètres à renseigner pour l'appel de la méthode de récupération des données.
     * Déchenche un event init
     */
    DataSource.prototype.initDataSync = function (args) {
        var _this = this;
        if (this.isDataSourceArray) {
            this.addDataSync(false, this.config);
            //nettoyage
            this.config = [];
            this.emit("init", this.results);
            this._status = DataSourceStatus.Initialized;
            return this.results;
        }
        else {
            this.fetchData(false, args).then(function () {
                _this.emit("init", _this.results);
                _this._status = DataSourceStatus.Initialized;
                return _this.results;
            });
        }
    };
    /***
     * Méthode qui déclenche un fetch appelé pour initialiser un datasource.
     * @param {any} args  paramètres à renseigner pour l'appel de la méthode de récupération des données.
     * Déchenche un event init
     */
    DataSource.prototype.initData = function (args) {
        var _this = this;
        return this.isDataSourceArray ? this.addData(false, this.config).then(function () {
            //nettoyage
            _this.config = [];
            _this.emit("init", _this.results);
            _this._status = DataSourceStatus.Initialized;
            return _this.results;
        }).catch(function (error) {
            throw error;
        }) : this.fetchData(false, args).then(function () {
            _this.emit("init", _this.results);
            _this._status = DataSourceStatus.Initialized;
            return _this.results;
        });
    };
    /**
     * On considère que les données sont dèjà présentes dans le datasource, on envoie juste l'event fetch au composant
     * pour forcer le rendu avec ses anciennes données.
     */
    DataSource.prototype.reload = function () {
        var _this = this;
        promise_api_1.Promise.resolve().then(function () {
            _this.emit("fetch", _this.results);
        });
    };
    Object.defineProperty(DataSource.prototype, "selected", {
        /**
         * renvoie la valeur selectionnée courante.
         */
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
        },
        enumerable: true,
        configurable: true
    });
    /***
    * Méthode qui retourne des items du result d'un datasource.
    * {@link https://lodash.com/docs/#every}
    * @param criteria
    * @return renvoie les éléments trouvés
    */
    DataSource.prototype.findAll = function (criteria) {
        return _.filter(this.results, criteria);
    };
    /**
     * supprime l'item du dataSource
     * @param item
     */
    DataSource.prototype.removeUnSelectedItem = function (item) {
        if (!item)
            return;
        if (this._selected instanceof Array) {
            _.remove(this._selected, item);
        }
        else {
            if (item === this._selected) {
                this._selected = undefined;
            }
        }
    };
    Object.defineProperty(DataSource.prototype, "results", {
        /**
         * renvoie le tableau des résultats.
         */
        get: function () {
            return this.datasourceResults;
        },
        /**
         * enregistre les résultats dans le datasource
         * @param {any[]} results les données du data source (post-transformation {@link DataSource#transformData}).
         */
        set: function (results) {
            this.datasourceResults = results;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "status", {
        get: function () {
            return this._status;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * renvoie le tri par defaut
     */
    DataSource.prototype.getDefaultSort = function () {
        return this.defaultSort;
    };
    /***
     * Méthode qui implémente la méthode de récupération des datas (une par type de datasource)
     * Déchenche un event fetch
     * @param {Boolean} triggerFetch  déclenche un évènement "fetch" après l'opération si true.
     * @param {any} args  paramètres à renseigner pour l'appel de la méthode de récupération des données.
     * @param {boolean} noSave indicateur pour sauvegarder ou non les paramètres du fetch pour les rejouer sur un sort service
     * @example
     * dataSource.on("fetch", (MappedResult)=>{
     *       //staff
     *   })
     * dataSource.fetch();
     * @void
     */
    DataSource.prototype.fetch = function (triggerFetch, args, noSave) {
        //suppression de l'historique de selection
        // le mae n'est pas prêt...
        this.selectClean(!noSave);
        if (!noSave) {
            this.fetchArgsSaved = args;
        }
        this.fetchData(triggerFetch, args);
    };
    /***
     * Méthode qui déclenche les events
     **/
    DataSource.prototype.emitEvent = function (name) {
        var _this = this;
        var arg = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            arg[_i - 1] = arguments[_i];
        }
        if (this._status === DataSourceStatus.Dummy) {
            this._status = DataSourceStatus.Initialized;
        }
        setTimeout(function () {
            _this.emit.apply(_this, [name].concat(arg));
        }, 0);
    };
    /***
     * Méthode qui implémente la méthode de récupération des datas (une par type de datasource)
     * @param {Boolean} triggerFetch déclenche un évènement "fetch" après l'opération si true.
     * @param {any[]} ...args paramètres à renseigner pour l'appel de la méthode de récupération des données.
     * @return {T} une promesse de type result de T.
     * @example
     * dataSource.on("fetch", (MappedResult)=>{
     *       //staff
     *   })
     * dataSource.fetch();
     * @void
     */
    DataSource.prototype.fetchData = function (triggerFetch, args) {
        var _this = this;
        this.emit("loadingData", true);
        var fetchOptions = _.filter(this.options, function (option) {
            return option.sendToFetch();
        });
        var fetchArgs = (typeof args !== "undefined") ? [args].concat(fetchOptions) : fetchOptions;
        var p = this.isDataSourceArray ?
            //déclenchement de l'event fetch (si demandé) avec le result du data source en datasourceArray
            promise_api_1.Promise.resolve().then(function () {
                if (triggerFetch) {
                    if (_this.defaultSort && !(args && args["sort"])) {
                        var options = { sortDatas: _this.defaultSort.sort, compare: _this.defaultSort };
                        _this.sortData(options);
                    }
                    _this.emit("fetch", _this.results);
                }
                else {
                    return false;
                }
            }) :
            //déclenchement de l'event fetch (si demandé) avec datasourceService
            //après la requete de service, une transformation sera appliquée sur les données récoltées
            this.method.apply(this.scope, fetchArgs)
                .then(function (result) {
                return _this.transformData([result]).then(function (res) {
                    //affectation des data dans le result du datasource
                    _this.results = res;
                    var args = fetchArgs[0];
                    if (_this.defaultSort && !(args && args["sort"])) {
                        var options = { sortDatas: _this.defaultSort.sort, compare: _this.defaultSort };
                        _this.sortData(options);
                    }
                    triggerFetch ? _this.emit("fetch", _this.results) : null;
                    return _this.results;
                }).catch(function (e) {
                    var error = new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_FETCH_ERROR, null, e);
                    _this.emit("error", error);
                });
            });
        return p.finally(function () {
            _this.emitEvent("loadingData", false);
        });
    };
    /***
     * Ajout un élément ou des éléments au result du datasource
     * cette action déclenche l'évènement add.
     * @param {Boolean} triggerFetch déclenche un évènement "fetch" après l'opération si true.
     * @param {(T|T[])[]} items correspond aux données à ajouter, un appel à la méthode {@link DataSource#transformData} sera effectué
     * @example
     * dataSource.on("add", (IncreasedResult)=>{
     *       //staff
     *   })
     * dataSource.add();
     * @void
     */
    DataSource.prototype.add = function (triggerFetch) {
        var _this = this;
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            items[_i - 1] = arguments[_i];
        }
        this.addData.apply(this, [triggerFetch].concat(items)).then(function (result) {
            _this.emit("add", result);
            return _this.results;
        }).catch(function (e) {
            var error = new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_ADD_ERROR, null, e);
            _this.emit("error", error);
        });
    };
    /***
     * Ajout un élément ou des éléments au result du datasource
     * @param {Boolean} triggerFetch déclenche un évènement "fetch" après l'opération si true.
     * @param {(T|T[])[]} items correspond aux données à ajouter, un appel à la méthode {@link DataSource#transformData} sera effectué
     * @return une promise du result modifié
     */
    DataSource.prototype.addData = function (triggerFetch) {
        var _this = this;
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            items[_i - 1] = arguments[_i];
        }
        this.emit("loadingData", true);
        return promise_api_1.Promise.resolve().then(function () {
            return _this.transformData(items).then(function (result) {
                try {
                    _this.datasourceResults = _this.datasourceResults.concat(result);
                    if (_this.defaultSort) {
                        var options = { sortDatas: _this.defaultSort.sort, compare: _this.defaultSort };
                        _this.sortData(options);
                    }
                    if (triggerFetch)
                        _this.emit("fetch", _this.results);
                    return _this.datasourceResults;
                }
                catch (e) {
                    var error = new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_ADD_ERROR, null, e);
                    _this.emit("error", error);
                }
            });
        }).finally(function () {
            _this.emitEvent("loadingData", false);
        });
    };
    /***
     * Ajout un élément ou des éléments au result du datasource
     * @param {Boolean} triggerFetch déclenche un évènement "fetch" après l'opération si true.
     * @param {(T|T[])[]} items correspond aux données à ajouter, un appel à la méthode {@link DataSource#transformData} sera effectué
     * @return {any[]} result modifié
     */
    DataSource.prototype.addDataSync = function (triggerFetch) {
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            items[_i - 1] = arguments[_i];
        }
        this.emit("loadingData", true);
        var res = null;
        try {
            var result = this.transformDataSync(items);
            this.datasourceResults = this.datasourceResults.concat(result);
            if (this.defaultSort) {
                var options = { sortDatas: this.defaultSort.sort, compare: this.defaultSort };
                this.sortData(options);
            }
            if (triggerFetch)
                this.emit("fetch", this.results);
            res = this.datasourceResults;
        }
        catch (e) {
            var error = new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_ADD_ERROR, null, e);
            this.emit("error", error);
        }
        this.emit("loadingData", false);
        return res;
    };
    /***
     * enlève un élément ou des éléments au result du datasource
     * cette action déclenche l'évènement delete
     * @param {Boolean} triggerFetch déclenche un évènement "fetch" après l'opération si true.
     * @param {(T|T[])[]} items correspond aux données à ajouter, un appel à la méthode {@link DataSource#transformData} sera effectué
     * @void
     */
    DataSource.prototype.delete = function (triggerFetch) {
        var _this = this;
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            items[_i - 1] = arguments[_i];
        }
        this.deleteData.apply(this, [triggerFetch].concat(items)).then(function (result) {
            _this.emit("delete", result);
            return _this.results;
        }).catch(function (e) {
            var error = new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_DELETE_ERROR, null, e);
            _this.emit("error", error);
        });
    };
    /**
     * supprime toutes les données du datasource.
     */
    DataSource.prototype.deleteAll = function () {
        this.selectClean(true);
        this.results = [];
        this.emit("delete", this.results);
    };
    /***
     * enlève un élément ou des éléments au result du datasource
     * @param {Boolean} triggerFetch déclenche un évènement "fetch" après l'opération si true.
     * @param {(T|T[])[]} items correspond aux données à supprimer, un appel à la méthode {@link DataSource#transformData} sera effectué
     * @return {Promise<Array<<any>>} une promise du result modifié
     */
    DataSource.prototype.deleteData = function (triggerFetch) {
        var _this = this;
        if (triggerFetch === void 0) { triggerFetch = false; }
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            items[_i - 1] = arguments[_i];
        }
        this.emit("loadingData", true);
        return promise_api_1.Promise.resolve().then(function () {
            return _this.transformData(items).then(function (result) {
                _.map(result, function (item) {
                    _.remove(_this.datasourceResults, item);
                });
                if (triggerFetch)
                    _this.emit("fetch", _this.results);
                return _this.results;
            }).catch(function (e) {
                var error = new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_DELETE_ERROR, null, e);
                _this.emit("error", error);
            });
        }).finally(function () {
            _this.emitEvent("loadingData", false);
        });
    };
    /**
     * permet de normaliser les elements du spread
     * @param {(T|T[])[]} data : les paramètres à normaliser
     */
    DataSource.prototype.getSpreadValues = function (data) {
        var _data = data;
        if (_data.length == 0)
            return [];
        //for spread operator
        if (_data[0] instanceof Array) {
            _data = _data[0];
        }
        return _data;
    };
    /***
     * méthode qui convertie les données brutes en données exploitable par l'IHM.
     * @param {(T|T[])[]} data les données brutes.
     * @return {Promise<Array<<any>>} renvoie les données transformées à partir des données brutes et la classe de mapping  {@link DataSourceMap}
     */
    DataSource.prototype.transformData = function (data) {
        var _this = this;
        return promise_api_1.Promise.resolve().then(function () {
            return _this.transformDataSync(data);
        });
    };
    /***
     * méthode qui convertie les données brutes en données exploitable par l'IHM.
     * @param {(T|T[])[]} data les données brutes.
     * @return {Array<any>} renvoie les données transformées à partir des données brutes et la classe de mapping  {@link DataSourceMap}
     */
    DataSource.prototype.transformDataSync = function (data) {
        var _this = this;
        if (data["errors"]) {
            var error = new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_RESPONSE_ERROR, data["errors"]);
            this.emit("error", error);
            throw error;
        }
        var _data = this.getSpreadValues(data);
        if (!this.keysMap || Object.keys(this.keysMap) == 0) {
            return _data;
        }
        return _data.map(function (item) {
            if (item) {
                var resultKeys_1 = {};
                Object.keys(_this.keysMap).map(function (key) {
                    resultKeys_1[key] = object_utils_1.ObjectUtils.getSubObject(item, _this.keysMap[key]);
                });
                return resultKeys_1;
            }
        });
    };
    /**
     * Fonction de tri
     * @param {SortData[]} sort  données de tri
     * @param {(a: any, b: any) => number} Fonction de comparaison.
     */
    DataSource.prototype.sortData = function (options) {
        if (options.compare) {
            var exec = options.compare;
            if (options.compare.compare) {
                exec = options.compare.compare;
            }
            if (options.compare.initCompare) {
                if (typeof options.compare.initCompare == "function") {
                    exec = options.compare.initCompare;
                }
                else {
                    exec = options.compare.getCompareFunction(options.compare.initCompare);
                }
            }
            this.results = this.results.sort(exec.bind(options.sortDatas, options.sortDatas));
        }
        else {
            var keys = [];
            var directions = [];
            for (var i = 0; i < options.sortDatas.length; i++) {
                keys.push(options.sortDatas[i].key);
                directions.push(options.sortDatas[i].dir ? "desc" : "asc");
            }
            this.results = _.orderBy(this.results, keys, directions);
        }
    };
    /***
     * Fonction de tri
     * @param {SortData[]} sortData.
     * @param {(a: any, b: any) => number} Fonction de comparaison.
     * @example
     * dataSource.on("sort", (SortedResult)=>{
     *       //staff
     *   })
     * dataSource.sort(sortData);
     * @void
     */
    DataSource.prototype.sort = function (options) {
        var _this = this;
        this.emit("loadingData", true);
        promise_api_1.Promise.resolve().then(function () {
            try {
                if (_this.isDataSourceArray) {
                    if (_this.defaultSort)
                        _this.defaultSort.sort = options.sortDatas;
                    options.compare = options.compare || _this.defaultSort;
                    _this.sortData(options);
                    _this.emitEvent("sort", _this.results, options.sortDatas);
                    return _this.results;
                }
                else {
                    return _this.fetchData(false, _this.getFetchArgs("sort", options.sortDatas))
                        .then(function (results) {
                        _this.emitEvent("sort", _this.results, options.sortDatas);
                        return results;
                    });
                }
            }
            catch (e) {
                var error = new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_SORT_ERROR, null, e);
                _this.emit("error", error);
            }
        }).finally(function () {
            _this.emitEvent("loadingData", false);
        });
    };
    /***
     * Renvoie un sous-ensemble des resultats filtrés
     * @param config correspond soit aux critères de filtrage soit à une fonction (appelée à chaque itération) {@link https://lodash.com/docs/#filter}
     * @param cancelFilterHistory false si on souhaite garder un historique des filtres true sinon. false par défaut
     * @example
     * dataSource.on("filter", (filteredResult)=>{
     *       //staff
     *   })
     * dataSource.filter(config, cancelFilterHistory);
     * @void
     */
    DataSource.prototype.filter = function (config, cancelFilterHistory) {
        var _this = this;
        if (cancelFilterHistory === void 0) { cancelFilterHistory = false; }
        this.emit("loadingData", true);
        if (this.isDataSourceArray) {
            if (cancelFilterHistory) {
                if (!this._filtering_flag) {
                    //backup
                    this._results_backup = this.datasourceResults;
                    this._filtering_flag = true;
                }
                else {
                    //restore
                    this.datasourceResults = this._results_backup;
                }
            }
        }
        promise_api_1.Promise.resolve().then(function () {
            try {
                if (_this.isDataSourceArray) {
                    _this.datasourceResults = _.filter(_this.results, config);
                    _this.emitEvent("filter", _this.results);
                }
                else {
                    _this.fetchData(false, _this.getFetchArgs("filter", config)).then(function () {
                        _this.emitEvent("filter", _this.results);
                    });
                }
            }
            catch (e) {
                var error = new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_FILTER_ERROR, null, e);
                _this.emit("error", error);
            }
        }).finally(function () {
            _this.emitEvent("loadingData", false);
        });
    };
    /***
     * Annule tous les filtres et restaure les valeurs d'origine.
     * dataSource.cancelFilter();
     * @void
     */
    DataSource.prototype.cancelFilter = function () {
        if (this._filtering_flag) {
            this.datasourceResults = this._results_backup;
        }
    };
    /***
     * Permet de selectionner un element ou des elements du datasource
     * déclenche un evènement "select".
     * @param args correspond aux éléments sélectionnées
     * @param index dans le cas de la selection d'une ligne
     * @example
     * dataSource.on("select", (selectedItems)=>{
     *       //staff
     *   })
     * dataSource.select(items);
     * @void
     */
    DataSource.prototype.select = function (args) {
        this._selected = args;
        this.emit("select", this.selected);
    };
    /***
     * Supprime toute sélection dans le datasource.
     * @void
     */
    DataSource.prototype.selectClean = function (flag) {
        if (flag) {
            this.select(undefined);
        }
        this._selected = undefined;
    };
    /**
     * reconstitue un objet parametre du fetch
     * @param {string} attrName nom de l'attribut ajouter
     * @param {objet} value valeur de l'attribut ajouter
     * @param {objet=} param
     */
    DataSource.prototype.getFetchArgs = function (attrName, value, param) {
        var fetchArgs = value;
        if (param || this.fetchArgsSaved) {
            if (value) {
                fetchArgs = param || {};
                if (!param) {
                    fetchArgs[this.fetchAttrName] = this.fetchArgsSaved;
                }
                fetchArgs[attrName] = value;
            }
            else {
                fetchArgs = param || this.fetchArgsSaved;
            }
        }
        return fetchArgs;
    };
    return DataSource;
}(events.EventEmitter));
exports.DataSource = DataSource;

//# sourceMappingURL=datasource.js.map
