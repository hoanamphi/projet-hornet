"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * hornet-js-core - Ensemble des composants qui forment le coeur de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var sort_data_1 = require("hornet-js-core/src/component/sort-data");
var technical_error_1 = require("hornet-js-utils/src/exception/technical-error");
var codes_error_1 = require("hornet-js-utils/src/exception/codes-error");
var hornet_js_utils_1 = require("hornet-js-utils");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.component.datasource.options.datasource-option");
var CompareMethod;
(function (CompareMethod) {
    CompareMethod[CompareMethod["COMPARE_DEFAULT"] = 1] = "COMPARE_DEFAULT";
    CompareMethod[CompareMethod["COMPARE_WITH_LOWERCASE"] = 2] = "COMPARE_WITH_LOWERCASE";
    CompareMethod[CompareMethod["COMPARE_WITH_UPPERCASE"] = 3] = "COMPARE_WITH_UPPERCASE";
})(CompareMethod = exports.CompareMethod || (exports.CompareMethod = {}));
/**
 * Option de tri par defaut dans un datasourcede
 */
var DefaultSort = /** @class */ (function () {
    /***
     * @param {SortData[]} sort  données de tri
     * @param {(a: any, b: any) => number} Fonction de comparaison (optionnel).
     * @param {boolean} sendFetch définit si l'option doit être envoyée au fetch ou pas.
     *
     */
    function DefaultSort(sort, initCompare, sendFetch) {
        if (initCompare === void 0) { initCompare = CompareMethod.COMPARE_DEFAULT; }
        if (sendFetch === void 0) { sendFetch = false; }
        this.sort = sort;
        this.initCompare = initCompare;
        this.sendFetch = sendFetch;
        this.compare = function (sort, a, b) {
            if (arguments.length < 3) {
                var msg = "3 arguments sont necessaires [sortData, a, b]";
                logger.error(msg);
                throw new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_SORT_ARGS_ERROR, { errorMessage: codes_error_1.CodesError.DEFAULT_ERROR_MSG }, null);
            }
            if (this.initCompare && typeof this.initCompare == "function") {
                return this.initCompare(a, b);
            }
            else {
                var sortDatas = sort ? sort : (this.sort && this.sort.length > 0) ? this.sort : [];
                var result_1;
                sortDatas.every(function (sortData) {
                    var aValue = a[sortData["key"]];
                    var bValue = b[sortData["key"]];
                    if (aValue < bValue) {
                        result_1 = (sortData.dir == sort_data_1.SortDirection.ASC) ? -1 : 1;
                        return false;
                    }
                    if (aValue == bValue) {
                        return true;
                    }
                    if (aValue > bValue) {
                        result_1 = (sortData.dir == sort_data_1.SortDirection.ASC) ? 1 : -1;
                        return false;
                    }
                });
                return result_1;
            }
        };
        this.compareUpperCase = function (sort, a, b) {
            if (arguments.length < 3) {
                var msg = "3 arguments sont necessaires [sortData, a, b]";
                logger.error(msg);
                throw new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_SORT_ARGS_ERROR, { errorMessage: codes_error_1.CodesError.DEFAULT_ERROR_MSG }, null);
            }
            var sortDatas = sort ? sort : (this.sort && this.sort.length > 0) ? this.sort : [];
            var result;
            sortDatas.every(function (sortData) {
                var aValue = a[sortData["key"]];
                var bValue = b[sortData["key"]];
                aValue = (typeof a[sortData["key"]] == "string") ? a[sortData["key"]].toUpperCase() : (typeof a[sortData["key"]] == "undefined") ? "" : a[sortData["key"]];
                bValue = (typeof b[sortData["key"]] == "string") ? b[sortData["key"]].toUpperCase() : (typeof b[sortData["key"]] == "undefined") ? "" : b[sortData["key"]];
                if (aValue < bValue) {
                    result = (sortData.dir == sort_data_1.SortDirection.ASC) ? -1 : 1;
                    return false;
                }
                if (aValue == bValue) {
                    return true;
                }
                if (aValue > bValue) {
                    result = (sortData.dir == sort_data_1.SortDirection.ASC) ? 1 : -1;
                    return false;
                }
            });
            return result;
        };
        this.compareLowerCase = function (sort, a, b) {
            if (arguments.length < 3) {
                var msg = "3 arguments sont necessaires [sortData, a, b]";
                logger.error(msg);
                throw new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_SORT_ARGS_ERROR, { errorMessage: codes_error_1.CodesError.DEFAULT_ERROR_MSG }, null);
            }
            var sortDatas = sort ? sort : (this.sort && this.sort.length > 0) ? this.sort : [];
            var result;
            sortDatas.every(function (sortData) {
                var aValue = a[sortData["key"]];
                var bValue = b[sortData["key"]];
                aValue = (typeof a[sortData["key"]] == "string") ? a[sortData["key"]].toLowerCase() : (typeof a[sortData["key"]] == "undefined") ? "" : a[sortData["key"]];
                bValue = (typeof b[sortData["key"]] == "string") ? b[sortData["key"]].toLowerCase() : (typeof b[sortData["key"]] == "undefined") ? "" : b[sortData["key"]];
                if (aValue < bValue) {
                    result = (sortData.dir == sort_data_1.SortDirection.ASC) ? -1 : 1;
                    return false;
                }
                if (aValue == bValue) {
                    return true;
                }
                if (aValue > bValue) {
                    result = (sortData.dir == sort_data_1.SortDirection.ASC) ? 1 : -1;
                    return false;
                }
            });
            return result;
        };
    }
    /**
     * définit si l'option doit être envoyée au fetch ou pas
     * @returns {boolean}
     */
    DefaultSort.prototype.sendToFetch = function () {
        return this.sendFetch;
    };
    DefaultSort.prototype.getCompareFunction = function (number) {
        switch (number) {
            case CompareMethod.COMPARE_WITH_LOWERCASE:
                return this.compareLowerCase;
            case CompareMethod.COMPARE_WITH_UPPERCASE:
                return this.compareUpperCase;
            default:
                return this.compare;
        }
    };
    return DefaultSort;
}());
exports.DefaultSort = DefaultSort;
var SpinnerOption = /** @class */ (function () {
    /**
     * @param {SpinnerType} type : type de spinner
     * @param {boolean} sendFetch définit si l'option doit être envoyée au fetch ou pas.
     */
    function SpinnerOption(type, sendFetch) {
        this.type = type;
        this.sendFetch = sendFetch;
    }
    /**
     * définit si l'option doit etre envoyée au fetch ou pas
     * @returns {boolean}
     */
    SpinnerOption.prototype.sendToFetch = function () {
        return false;
    };
    return SpinnerOption;
}());
exports.SpinnerOption = SpinnerOption;
/**
 * Mode d'initialisation de l'init dans un datasource
 */
var InitAsync = /** @class */ (function () {
    /**
     * @param {boolean} isAsync : type d'initialisation
     * @param {boolean} sendFetch définit si l'option doit être envoyée au fetch ou pas.
     */
    function InitAsync(isAsync, sendFetch) {
        this.isAsync = isAsync;
        this.sendFetch = sendFetch;
    }
    /**
     * définit si l'option doit etre envoyée au fetch ou pas
     * @returns {boolean}
     */
    InitAsync.prototype.sendToFetch = function () {
        return false;
    };
    return InitAsync;
}());
exports.InitAsync = InitAsync;

//# sourceMappingURL=datasource-option.js.map
