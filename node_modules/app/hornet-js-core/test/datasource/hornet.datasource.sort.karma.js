"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var datasource_1 = require("hornet-js-core/src/component/datasource/datasource");
var decorators_1 = require("hornet-js-test/src/decorators");
var base_test_1 = require("hornet-js-test/src/base-test");
var test_run_1 = require("hornet-js-test/src/test-run");
var hornet_test_assert_1 = require("hornet-js-test/src/hornet-test-assert");
var sort_data_1 = require("hornet-js-core/src/component/sort-data");
var datasource_option_1 = require("hornet-js-core/src/component/datasource/options/datasource-option");
var DatasourceSortTest = /** @class */ (function (_super) {
    tslib_1.__extends(DatasourceSortTest, _super);
    function DatasourceSortTest() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.data = [
            {
                key: 4,
                value: "d"
            }, {
                key: 5,
                value: "e"
            }, {
                key: 2,
                value: "b"
            }, {
                key: 1,
                value: "a"
            }, {
                key: 3,
                value: "c"
            }
        ];
        _this.dataForCustomSort = [
            {
                key: 402,
                value: "d"
            }, {
                key: 54,
                value: "e"
            }, {
                key: 2018,
                value: "b"
            }, {
                key: 100,
                value: "a"
            }, {
                key: 37,
                value: "c"
            }
        ];
        _this.dataForCustomSortUpperCase = [
            {
                key: 402,
                value: "Dimanche"
            }, {
                key: 54,
                value: "dejeuner"
            }, {
                key: 55,
                value: "distance"
            }, {
                key: 2018,
                value: "artichaud"
            }, {
                key: 100,
                value: "Association"
            }, {
                key: 101,
                value: "atchoum"
            }
        ];
        _this.dataVille = [
            {
                lib: "BUDAPEST"
            }, {
                lib: "ABIDJAN"
            }, {
                lib: "PARIS"
            }, {
                lib: "BRASILIA"
            }
        ];
        return _this;
    }
    DatasourceSortTest.prototype.testCase1 = function () {
        this.dataSource = new datasource_1.DataSource(this.data);
        var results = this.dataSource.results;
        hornet_test_assert_1.HornetTestAssert.assertEquals(results.length, 5, "Datasource ne retourne pas suffisamment de résultat par rapport à data");
        this.end();
    };
    ;
    DatasourceSortTest.prototype.testCase2 = function () {
        var _this = this;
        this.dataSource = new datasource_1.DataSource(this.data);
        this.dataSource.on("sort", function (sortedResult) {
            hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSource.results, sortedResult, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("a", _this.dataSource.results[0].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("b", _this.dataSource.results[1].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("c", _this.dataSource.results[2].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("d", _this.dataSource.results[3].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("e", _this.dataSource.results[4].value, "");
            _this.end();
        });
        this.dataSource.sort({ sortDatas: [new sort_data_1.SortData("value", sort_data_1.SortDirection.ASC)] });
    };
    DatasourceSortTest.prototype.testCase3 = function () {
        var _this = this;
        this.dataSource = new datasource_1.DataSource(this.data);
        this.dataSource.on("sort", function (sortedResult) {
            hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSource.results, sortedResult, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("a", _this.dataSource.results[4].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("b", _this.dataSource.results[3].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("c", _this.dataSource.results[2].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("d", _this.dataSource.results[1].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("e", _this.dataSource.results[0].value, "");
            _this.end();
        });
        this.dataSource.sort({ sortDatas: [new sort_data_1.SortData("value", sort_data_1.SortDirection.DESC)] });
    };
    DatasourceSortTest.prototype.testCase4 = function () {
        var _this = this;
        this.dataSource = new datasource_1.DataSource(this.dataForCustomSort);
        this.dataSource.on("sort", function (sortedResult) {
            hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSource.results, sortedResult, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("c", _this.dataSource.results[0].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("e", _this.dataSource.results[1].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("a", _this.dataSource.results[2].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("d", _this.dataSource.results[3].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("b", _this.dataSource.results[4].value, "");
            _this.end();
        });
        // this.dataSource.sort({compare: this.sortMethode});
        this.dataSource.sort({ compare: this.sortMethode });
    };
    DatasourceSortTest.prototype.testCase5 = function () {
        var _this = this;
        var sort = new datasource_option_1.DefaultSort([new sort_data_1.SortData("key"), new sort_data_1.SortData("value", sort_data_1.SortDirection.ASC)], this.sortMethode);
        this.dataSource = new datasource_1.DataSource(this.dataForCustomSort, {}, [sort]);
        this.dataSource.on("fetch", function (result) {
            hornet_test_assert_1.HornetTestAssert.assertEquals("c", result[0].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("e", result[1].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("a", result[2].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("d", result[3].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("b", result[4].value, "");
            _this.end();
        });
        this.dataSource.fetch(true);
    };
    DatasourceSortTest.prototype.testCase6 = function () {
        var _this = this;
        var sort = new datasource_option_1.DefaultSort([new sort_data_1.SortData("value", sort_data_1.SortDirection.ASC)]);
        this.dataSource = new datasource_1.DataSource(this.data, {}, [sort]);
        this.dataSource.on("fetch", function (result) {
            hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSource.results, result, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("a", _this.dataSource.results[0].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("b", _this.dataSource.results[1].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("c", _this.dataSource.results[2].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("d", _this.dataSource.results[3].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("e", _this.dataSource.results[4].value, "");
            _this.end();
        });
        this.dataSource.fetch(true);
    };
    DatasourceSortTest.prototype.testCase7 = function () {
        var _this = this;
        var sort = new datasource_option_1.DefaultSort([new sort_data_1.SortData("value", sort_data_1.SortDirection.ASC)], datasource_option_1.CompareMethod.COMPARE_WITH_UPPERCASE);
        this.dataSource = new datasource_1.DataSource(this.dataForCustomSortUpperCase, {}, [sort]);
        this.dataSource.on("fetch", function (result) {
            hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSource.results, result, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("artichaud", _this.dataSource.results[0].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("Association", _this.dataSource.results[1].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("atchoum", _this.dataSource.results[2].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("dejeuner", _this.dataSource.results[3].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("Dimanche", _this.dataSource.results[4].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("distance", _this.dataSource.results[5].value, "");
            _this.end();
        });
        this.dataSource.fetch(true);
    };
    DatasourceSortTest.prototype.testCase8 = function () {
        var _this = this;
        var sort = new datasource_option_1.DefaultSort([new sort_data_1.SortData("value", sort_data_1.SortDirection.ASC)], datasource_option_1.CompareMethod.COMPARE_WITH_LOWERCASE);
        this.dataSource = new datasource_1.DataSource(this.dataForCustomSortUpperCase, {}, [sort]);
        this.dataSource.on("fetch", function (result) {
            hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSource.results, result, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("artichaud", _this.dataSource.results[0].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("Association", _this.dataSource.results[1].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("atchoum", _this.dataSource.results[2].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("dejeuner", _this.dataSource.results[3].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("Dimanche", _this.dataSource.results[4].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("distance", _this.dataSource.results[5].value, "");
            _this.end();
        });
        this.dataSource.fetch(true);
    };
    DatasourceSortTest.prototype.testCase9 = function () {
        var _this = this;
        var sort = new datasource_option_1.DefaultSort([new sort_data_1.SortData("value", sort_data_1.SortDirection.DESC)]);
        this.dataSource = new datasource_1.DataSource(this.data, {}, [sort]);
        this.dataSource.on("fetch", function (result) {
            hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSource.results, result, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("a", _this.dataSource.results[4].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("b", _this.dataSource.results[3].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("c", _this.dataSource.results[2].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("d", _this.dataSource.results[1].value, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("e", _this.dataSource.results[0].value, "");
            _this.end();
        });
        this.dataSource.fetch(true);
    };
    DatasourceSortTest.prototype.testCase10 = function () {
        var _this = this;
        var sort = new datasource_option_1.DefaultSort([new sort_data_1.SortData("lib", sort_data_1.SortDirection.ASC)]);
        this.dataSource = new datasource_1.DataSource(this.dataVille, {}, [sort]);
        this.dataSource.on("fetch", function (result) {
            hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSource.results, result, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("ABIDJAN", _this.dataSource.results[0].lib, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("BRASILIA", _this.dataSource.results[1].lib, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("BUDAPEST", _this.dataSource.results[2].lib, "");
            hornet_test_assert_1.HornetTestAssert.assertEquals("PARIS", _this.dataSource.results[3].lib, "");
            _this.dataSource.on("sort", function (result) {
                hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSource.results, result, "");
                hornet_test_assert_1.HornetTestAssert.assertEquals("ABIDJAN", _this.dataSource.results[3].lib, "");
                hornet_test_assert_1.HornetTestAssert.assertEquals("BRASILIA", _this.dataSource.results[2].lib, "");
                hornet_test_assert_1.HornetTestAssert.assertEquals("BUDAPEST", _this.dataSource.results[1].lib, "");
                hornet_test_assert_1.HornetTestAssert.assertEquals("PARIS", _this.dataSource.results[0].lib, "");
                _this.end();
            });
            _this.dataSource.sort({ sortDatas: [new sort_data_1.SortData("lib", sort_data_1.SortDirection.DESC)] });
        });
        this.dataSource.fetch(true);
    };
    DatasourceSortTest.prototype.sortMethode = function (sortData, a, b) {
        return a.key - b.key;
    };
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test initialisation d'un datasource"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase1", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test tri ascendant d'un datasource"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase2", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test tri descendant d'un datasource"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase3", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test tri ascendant d'un datasource à partir d'une méthode de comparaison"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase4", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test tri ascendant d'un datasource à partir d'une méthode de comparaison sur Init"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase5", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test tri ascendant d'un datasource sur Init"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase6", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test tri ascendant d'un datasource sur Init avec methodes de comparaison UPERCASE"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase7", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test tri ascendant d'un datasource sur Init avec methodes de comparaison LOWERCASE"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase8", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test tri descendant d'un datasource sur Init"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase9", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test tri ASC par défaut, puis action de tri DESC"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], DatasourceSortTest.prototype, "testCase10", null);
    DatasourceSortTest = tslib_1.__decorate([
        decorators_1.Decorators.describe("Class de test pour le sort des datasources")
    ], DatasourceSortTest);
    return DatasourceSortTest;
}(base_test_1.BaseTest));
//lancement des Tests
test_run_1.runTest(new DatasourceSortTest());

//# sourceMappingURL=hornet.datasource.sort.karma.js.map
