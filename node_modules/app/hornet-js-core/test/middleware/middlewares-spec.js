"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * hornet-js-core - Ensemble des composants qui forment le coeur de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var test_utils_1 = require("hornet-js-test/src/test-utils");
var hornet_js_utils_1 = require("hornet-js-utils");
var Middlewares = require("hornet-js-core/src/middleware/middlewares");
var proxyquire = require("proxyquire").noCallThru();
var expect = test_utils_1.TestUtils.chai.expect;
var sinon = test_utils_1.TestUtils.sinon;
var CsrfMiddleware = Middlewares.CsrfMiddleware;
hornet_js_utils_1.Utils.setConfigObj({});
describe("Middleware CsrfMiddleware", function () {
    describe("middleware ", function () {
        var csrfToken;
        beforeEach(function () {
            csrfToken = test_utils_1.TestUtils.randomString();
            sinon.stub(CsrfMiddleware, "generateToken").returns(csrfToken);
        });
        afterEach(function () {
            CsrfMiddleware.generateToken.restore();
        });
        it("should validate header csrf on POST", function () {
            // arrange
            var req = {
                getSession: function () {
                    return {
                        getAttribute: function (key) { return csrfToken; }, setAttribute: function (key, val) {
                            csrfToken = val;
                        }
                    };
                },
                method: "POST",
                headers: { "x-csrf-token": csrfToken }
            };
            var res = sinon.spy();
            var next = sinon.spy();
            res.status = sinon.spy();
            res.end = sinon.spy();
            // Act
            CsrfMiddleware.middleware(req, res, next);
            // Assert
            expect(next).to.have.been.calledOnce;
            expect(res.status).to.not.have.been.called;
            expect(res.end).to.not.have.been.called;
            expect(req.getSession().getAttribute(CsrfMiddleware.CSRF_SESSION_KEY)).to.eql(csrfToken);
            expect(req.generateCsrfToken).to.not.exist;
        });
        it("should validate header csrf on PATCH", function () {
            // arrange
            var req = {
                getSession: function () {
                    return {
                        getAttribute: function (key) { return csrfToken; }, setAttribute: function (key, val) {
                            csrfToken = val;
                        }
                    };
                },
                method: "PATCH",
                headers: { "x-csrf-token": csrfToken }
            };
            var res = sinon.spy();
            var next = sinon.spy();
            res.status = sinon.spy();
            res.end = sinon.spy();
            // Act
            CsrfMiddleware.middleware(req, res, next);
            // Assert
            expect(next).to.have.been.calledOnce;
            expect(res.status).to.not.have.been.called;
            expect(res.end).to.not.have.been.called;
            expect(req.generateCsrfToken).to.not.exist;
        });
        it("should validate body csrf on DELETE", function () {
            // arrange
            var req = {
                getSession: function () {
                    return {
                        getAttribute: function (key) { return csrfToken; }, setAttribute: function (key, val) {
                            csrfToken = val;
                        }
                    };
                },
                method: "DELETE",
                headers: {},
                body: { "x-csrf-token": csrfToken }
            };
            var res = sinon.spy();
            var next = sinon.spy();
            res.status = sinon.spy();
            res.end = sinon.spy();
            // Act
            CsrfMiddleware.middleware(req, res, next);
            // Assert
            expect(next).to.have.been.calledOnce;
            expect(res.status).to.not.have.been.called;
            expect(res.end).to.not.have.been.called;
            expect(req.getSession().getAttribute(CsrfMiddleware.CSRF_SESSION_KEY)).to.eql(csrfToken);
            expect(req.generateCsrfToken).to.not.exist;
        });
        it("should find invalid csrf on PUT", function () {
            // arrange
            var sessionToken = "2" + test_utils_1.TestUtils.randomString();
            var req = {
                getSession: function () {
                    return {
                        getAttribute: function (key) { return sessionToken; }, setAttribute: function (key, val) {
                            sessionToken = val;
                        }
                    };
                },
                method: "PUT",
                headers: { "x-csrf-token": csrfToken }
            };
            var res = sinon.spy();
            var next = sinon.spy();
            res.status = sinon.spy();
            res.end = sinon.spy();
            // Act
            CsrfMiddleware.middleware(req, res, next);
            // Assert
            expect(next).to.not.have.been.called;
            expect(res.status).to.have.been.calledWithExactly(417);
            expect(res.end).to.have.been.called;
            expect(req.getSession().getAttribute(CsrfMiddleware.CSRF_SESSION_KEY)).to.eql(sessionToken);
            expect(req.generateNewCsrfTokken).to.not.exist;
        });
        it("should not validate on GET", function () {
            hornet_js_utils_1.Utils.setCls = function (key, value, localStorageName) {
                sinon.stub();
            };
            var CsrfMiddleware = Middlewares.CsrfMiddleware;
            // arrange
            var req = {
                getSession: function () {
                    return {
                        getAttribute: function (key) { return csrfToken; },
                        setAttribute: function (key, val) {
                            csrfToken = val;
                        }
                    };
                },
                method: "GET"
            };
            var res = sinon.spy();
            var next = sinon.spy();
            res.status = sinon.spy();
            res.end = sinon.spy();
            // Act
            CsrfMiddleware.middleware(req, res, next);
            expect(CsrfMiddleware.generateToken).to.exist;
            CsrfMiddleware.generateToken();
            // Assert
            expect(next).to.have.been.calledOnce;
            expect(res.status).to.not.have.been.called;
            expect(res.end).to.not.have.been.called;
        });
    });
    describe("isTokenValid", function () {
        it("should validate token", function () {
            var incomingCsrf = "1" + test_utils_1.TestUtils.randomString();
            var sessionCsrf = incomingCsrf;
            // Act
            var valid = CsrfMiddleware.isTokenValid(incomingCsrf, sessionCsrf);
            // assert
            expect(valid).to.equal(true);
        });
        it("should not validate token", function () {
            var incomingCsrf = "1" + test_utils_1.TestUtils.randomString();
            var sessionCsrf = "1" + incomingCsrf;
            // Act
            var valid = CsrfMiddleware.isTokenValid(incomingCsrf, sessionCsrf);
            // assert
            expect(valid).to.equal(false);
        });
    });
});

//# sourceMappingURL=middlewares-spec.js.map
