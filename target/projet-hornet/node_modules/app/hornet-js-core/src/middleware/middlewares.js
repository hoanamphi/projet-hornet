"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-core - Ensemble des composants qui forment le coeur de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var path = require("path");
var isEnvProduction = (process.env["NODE_ENV"] === "production");
function isSecurityEnabled(envProduction, logger) {
    var enabled = false;
    if (hornet_js_utils_1.Utils.config.get("security")) {
        if (hornet_js_utils_1.Utils.config.get("security.enabled") || envProduction) {
            enabled = true;
            logger.trace("SECURITY MIDDLEWARE CONFIGURATION :  Configuration de la sécurité...");
        }
        else {
            logger.warn("SECURITY MIDDLEWARE CONFIGURATION : La sécurité est désactivé!!!");
        }
    }
    else {
        logger.warn("SECURITY MIDDLEWARE CONFIGURATION : La sécurité n'est pas configurée!!!");
    }
    return enabled;
}
function checkSecurityConfiguration(key, enabledKey, middlewareName, logger) {
    var enabled = false;
    if (hornet_js_utils_1.Utils.config.has(key)) {
        if (enabledKey) {
            key = key + ".enabled";
        }
        if (hornet_js_utils_1.Utils.config.getOrDefault(key, true)) {
            logger.debug("SECURITY MIDDLEWARE CONFIGURATION : ajout du middleware " + middlewareName);
            enabled = true;
        }
        else {
            logger.warn("SECURITY MIDDLEWARE CONFIGURATION : Le middleware " + middlewareName + " n'est pas activé");
        }
    }
    else {
        logger.warn("SECURITY MIDDLEWARE CONFIGURATION : Le middleware " + middlewareName + " n'est pas configuré");
    }
    return enabled;
}
function sanitizeErrorThrownInDomain(error) {
    if (error) {
        delete error["error@context"];
        delete error["domain"];
    }
}
// ------------------------------------------------------------------------------------------------------------------- //
/**
 * Classe abstraite de gestion d'un middleware dans une application Hornet
 * Cette classe doit être héritée par chaque middleware
 *
 * Attention : la classe héritant de AbstractHornetMiddleware doit définir le constructeur suivant :
 *          constructor() {
 *              [...]
 *              super(appConfig, PREFIX_OPTIONNEL, FN_OPTIONNEL);
 *              [...]
 *          }
 *
 * > Par défaut, la fonction "insertMiddleware(app)" utilise le PREFIX et FN fournis : app.use(PREFIX, FN)
 *
 * > Pour des cas particuliers, il est possible de surcharger cette méthode pour ajouter autant de middlewares qu'on veut :
 *      public insertMiddleware(app) {
 *          app.use("/exemple", (req, res, next) => { [ ... ] });
 *          app.use((req, res, next) => { .... });
 *          ...
 *      }
 */
var AbstractHornetMiddleware = /** @class */ (function () {
    /**
     * Constructeur
     *
     * @param middlewareFunction
     * @param prefix
     * @param config server configuration
     */
    function AbstractHornetMiddleware(middlewareFunction, prefix, config) {
        this.prefix = prefix;
        this.middlewareFunction = middlewareFunction;
        this.config = config;
    }
    /**
     * Méthode appelée automatiquement lors de l'initialisation du serveur afin d'ajouter un middleware
     * @param app
     */
    AbstractHornetMiddleware.prototype.insertMiddleware = function (app) {
        if (this.prefix !== null && this.prefix !== undefined) {
            app.use(this.prefix, this.middlewareFunction);
        }
        else {
            app.use(this.middlewareFunction);
        }
    };
    return AbstractHornetMiddleware;
}());
exports.AbstractHornetMiddleware = AbstractHornetMiddleware;
var AbstractHornetSubMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractHornetSubMiddleware, _super);
    function AbstractHornetSubMiddleware() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractHornetSubMiddleware.prototype.insertRouterMiddleware = function (router) {
        if (this.prefix !== null && this.prefix !== undefined) {
            router.use(this.prefix, this.middlewareFunction);
        }
        else {
            router.use(this.middlewareFunction);
        }
    };
    return AbstractHornetSubMiddleware;
}(AbstractHornetMiddleware));
exports.AbstractHornetSubMiddleware = AbstractHornetSubMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      HornetContextInitializerMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var abstract_routes_1 = require("hornet-js-core/src/routes/abstract-routes");
var HornetContextInitializerMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(HornetContextInitializerMiddleware, _super);
    function HornetContextInitializerMiddleware() {
        var _this = this;
        var callbacksStorage = hornet_js_utils_1.Utils.getContinuationStorage();
        var dataPathPrefix = hornet_js_utils_1.Utils.buildContextPath(hornet_js_utils_1.Utils.config.getOrDefault("fullSpa.name", AbstractHornetMiddleware.APP_CONFIG.routesDataContext));
        _this = _super.call(this, function (req, res, next) {
            callbacksStorage.bindEmitter(req);
            callbacksStorage.bindEmitter(res);
            callbacksStorage.run(function () {
                callbacksStorage.set("hornet.request", req);
                callbacksStorage.set("hornet.response", res);
                callbacksStorage.set("hornet.routeType", parseUrl.original(req).pathname.indexOf(dataPathPrefix) === 0 ? abstract_routes_1.RouteType.DATA : abstract_routes_1.RouteType.PAGE);
                var currentUrl = parseUrl.original(req).pathname;
                var relativePathname = currentUrl.replace(hornet_js_utils_1.Utils.getContextPath(), "");
                callbacksStorage.set("hornet.routePath", relativePathname);
                callbacksStorage.set("hornet.currentUrl", currentUrl);
                next();
            });
        }) || this;
        return _this;
    }
    return HornetContextInitializerMiddleware;
}(AbstractHornetMiddleware));
exports.HornetContextInitializerMiddleware = HornetContextInitializerMiddleware;
var HornetContextInitializerSubMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(HornetContextInitializerSubMiddleware, _super);
    function HornetContextInitializerSubMiddleware(config, prefix) {
        var _this = this;
        var dataPathPrefix = hornet_js_utils_1.Utils.buildContextPath("/" + prefix + (config || AbstractHornetMiddleware.APP_CONFIG).routesDataContext);
        _this = _super.call(this, function (req, res, next) {
            hornet_js_utils_1.Utils.setCls("hornet.routeType", parseUrl.original(req).pathname.indexOf(dataPathPrefix) === 0 ? abstract_routes_1.RouteType.DATA : abstract_routes_1.RouteType.PAGE);
            next();
        }, null, config) || this;
        return _this;
    }
    return HornetContextInitializerSubMiddleware;
}(AbstractHornetSubMiddleware));
exports.HornetContextInitializerSubMiddleware = HornetContextInitializerSubMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      LoggerTIDMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var uuid = require("uuid");
var LoggerTIDMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(LoggerTIDMiddleware, _super);
    function LoggerTIDMiddleware() {
        return _super.call(this, function (req, res, next) {
            hornet_js_utils_1.Utils.setCls("hornet.tid", uuid.v4().substr(0, 8));
            next();
        }) || this;
    }
    return LoggerTIDMiddleware;
}(AbstractHornetMiddleware));
exports.LoggerTIDMiddleware = LoggerTIDMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      LoggerUserMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var LoggerUserMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(LoggerUserMiddleware, _super);
    function LoggerUserMiddleware() {
        return _super.call(this, function (req, res, next) {
            hornet_js_utils_1.Utils.setCls("hornet.user", req.user);
            next();
        }) || this;
    }
    LoggerUserMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.LoggerUserMiddleware");
    return LoggerUserMiddleware;
}(AbstractHornetMiddleware));
exports.LoggerUserMiddleware = LoggerUserMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      WelcomePageRedirectMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var parseUrl = require("parseurl");
var WelcomePageRedirectMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(WelcomePageRedirectMiddleware, _super);
    function WelcomePageRedirectMiddleware() {
        var _this = this;
        var contextPath = hornet_js_utils_1.Utils.buildContextPath("/").replace(/(^.*)([^\/]+)\/+$/g, "$1$2");
        var welcomePage = hornet_js_utils_1.Utils.buildContextPath(hornet_js_utils_1.Utils.appSharedProps.get("welcomePageUrl")).replace(/(^.*)([^\/]+)\/+$/g, "$1$2");
        _this = _super.call(this, function (req, res, next) {
            var pathname = parseUrl.original(req).pathname.replace(/(^.*)([^\/]+)\/+$/g, "$1$2");
            if (pathname === contextPath && welcomePage !== contextPath) {
                return res.redirect(welcomePage);
            }
            else {
                next();
            }
        }) || this;
        return _this;
    }
    WelcomePageRedirectMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.WelcomePageRedirectMiddleware");
    return WelcomePageRedirectMiddleware;
}(AbstractHornetMiddleware));
exports.WelcomePageRedirectMiddleware = WelcomePageRedirectMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      WithoutSlashPageRedirectMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var WithoutSlashPageRedirectMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(WithoutSlashPageRedirectMiddleware, _super);
    function WithoutSlashPageRedirectMiddleware() {
        var _this = this;
        var contextPath = hornet_js_utils_1.Utils.getContextPath();
        _this = _super.call(this, function (req, res, next) {
            var pathname = parseUrl.original(req).pathname;
            if (pathname === contextPath) {
                return res.redirect(contextPath + "/");
            }
            else {
                next();
            }
        }) || this;
        return _this;
    }
    return WithoutSlashPageRedirectMiddleware;
}(AbstractHornetMiddleware));
exports.WithoutSlashPageRedirectMiddleware = WithoutSlashPageRedirectMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      StaticNodeHttpHeaderMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var StaticNodeHttpHeaderMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(StaticNodeHttpHeaderMiddleware, _super);
    function StaticNodeHttpHeaderMiddleware() {
        var _this = this;
        var staticUrl = hornet_js_utils_1.Utils.buildStaticPath("/").replace(hornet_js_utils_1.Utils.getContextPath(), "");
        _this = _super.call(this, function (req, res, next) {
            res.setHeader("X-Static-From", "app");
            next();
        }, staticUrl) || this;
        return _this;
    }
    StaticNodeHttpHeaderMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.StaticNodeHttpHeaderMiddleware");
    return StaticNodeHttpHeaderMiddleware;
}(AbstractHornetMiddleware));
exports.StaticNodeHttpHeaderMiddleware = StaticNodeHttpHeaderMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      StaticPathMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var express = require("express");
var StaticPathMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(StaticPathMiddleware, _super);
    function StaticPathMiddleware() {
        var _this = this;
        var appConfig = AbstractHornetMiddleware.APP_CONFIG;
        var staticPath = path.join(appConfig.serverDir, appConfig.staticPath);
        var staticUrl = hornet_js_utils_1.Utils.buildStaticPath("/").replace(hornet_js_utils_1.Utils.getContextPath(), "");
        StaticPathMiddleware.logger.trace("Emplacement des ressources statiques '" + staticUrl + "' :", staticPath);
        _this = _super.call(this, express.static(staticPath, { fallthrough: false }), staticUrl) || this;
        return _this;
    }
    StaticPathMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.StaticPathMiddleware");
    return StaticPathMiddleware;
}(AbstractHornetMiddleware));
exports.StaticPathMiddleware = StaticPathMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      StaticPathErrorMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var StaticPathErrorMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(StaticPathErrorMiddleware, _super);
    function StaticPathErrorMiddleware() {
        var _this = this;
        var staticUrl = hornet_js_utils_1.Utils.buildStaticPath("/").replace(hornet_js_utils_1.Utils.getContextPath(), "");
        _this = _super.call(this, function (err, req, res, next) {
            res.status(404).send("Resource not found").end();
            StaticPathErrorMiddleware.logger.error("Ressource statique non trouvée", err);
        }, staticUrl) || this;
        return _this;
    }
    StaticPathErrorMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.StaticPathErrorMiddleware");
    return StaticPathErrorMiddleware;
}(AbstractHornetMiddleware));
exports.StaticPathErrorMiddleware = StaticPathErrorMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      BodyParserJsonMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var bodyParser = require("body-parser");
var BodyParserJsonMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(BodyParserJsonMiddleware, _super);
    function BodyParserJsonMiddleware() {
        return _super.call(this, bodyParser.json({ limit: hornet_js_utils_1.Utils.config.getOrDefault("server.bodyParserLimit", "50mb") })) || this;
    }
    return BodyParserJsonMiddleware;
}(AbstractHornetMiddleware));
exports.BodyParserJsonMiddleware = BodyParserJsonMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      BodyParserUrlEncodedMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var BodyParserUrlEncodedMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(BodyParserUrlEncodedMiddleware, _super);
    function BodyParserUrlEncodedMiddleware() {
        return _super.call(this, bodyParser.urlencoded({
            extended: true,
            limit: hornet_js_utils_1.Utils.config.getOrDefault("server.bodyParserLimit", "50mb")
        })) || this;
    }
    return BodyParserUrlEncodedMiddleware;
}(AbstractHornetMiddleware));
exports.BodyParserUrlEncodedMiddleware = BodyParserUrlEncodedMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      SessionMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var session_manager_1 = require("hornet-js-core/src/session/session-manager");
var SessionMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(SessionMiddleware, _super);
    function SessionMiddleware() {
        var _this = this;
        var sessionConfiguration = {
            trustProxy: hornet_js_utils_1.Utils.config.getOrDefault("server.trustProxy", false),
            store: AbstractHornetMiddleware.APP_CONFIG.sessionStore || null,
            // secret: Utils.config.get('cookie.secret'),
            secret: null,
            cookie: {
                route: hornet_js_utils_1.Utils.config.getOrDefault("server.route", null),
                domain: hornet_js_utils_1.Utils.config.getOrDefault("cookie.domain", null),
                path: hornet_js_utils_1.Utils.config.getOrDefault("cookie.path", hornet_js_utils_1.Utils.buildContextPath("/")),
                httpOnly: hornet_js_utils_1.Utils.config.getOrDefault("cookie.httpOnly", true),
                secure: (isEnvProduction && hornet_js_utils_1.Utils.config.getOrDefault("cookie.secure", false))
            },
            sessionTimeout: hornet_js_utils_1.Utils.config.getOrDefault("server.sessionTimeout", 1800000),
            alwaysSetCookie: hornet_js_utils_1.Utils.config.getOrDefault("cookie.alwaysSetCookie", false),
            saveUnmodifiedSession: null // laisse le session-manager décider en fonction du type de store
        };
        _this = _super.call(this, session_manager_1.SessionManager.middleware(sessionConfiguration)) || this;
        return _this;
    }
    return SessionMiddleware;
}(AbstractHornetMiddleware));
exports.SessionMiddleware = SessionMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      MulterMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var multer = require("multer");
var custom_store_engine_1 = require("hornet-js-core/src/upload/custom-store-engine");
var MulterMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(MulterMiddleware, _super);
    function MulterMiddleware() {
        return _super.call(this, multer({
            storage: hornet_js_utils_1.Utils.config.getOrDefault("server.uploadAntivirus", false) ?
                new custom_store_engine_1.CustomStoreEngine()
                : multer.memoryStorage(),
            limits: {
                fileSize: hornet_js_utils_1.Utils.config.getOrDefault("server.uploadFileSize", 10000)
            }
        }).any()) || this;
    }
    return MulterMiddleware;
}(AbstractHornetMiddleware));
exports.MulterMiddleware = MulterMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      SecurityMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var hpp = require("hpp");
var helmet = require("helmet");
var SecurityMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(SecurityMiddleware, _super);
    function SecurityMiddleware() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SecurityMiddleware.prototype.insertMiddleware = function (app) {
        if (isSecurityEnabled(isEnvProduction, SecurityMiddleware.logger)) {
            // Enlève le header 'x-powered-by' pour éviter de montrer que le site est généré par express
            app.disable("x-powered-by");
            this.hppConfiguration(app);
            this.ieNoOpenConfiguration(app);
            this.noSniffConfiguration(app);
            this.cspConfiguration(app);
            this.frameguardConfiguration(app);
            this.xssFilterConfiguration(app);
            this.hpkpConfiguration(app);
            this.hstsConfiguration(app);
            this.referrerPolicyConfiguration(app);
        }
    };
    SecurityMiddleware.prototype.hppConfiguration = function (app) {
        // Suppression des doublons de paramètres GET
        if (checkSecurityConfiguration("security.hpp", false, "HPP 'HTTP Parameter Pollution'", SecurityMiddleware.logger)) {
            app.use(hpp());
        }
    };
    SecurityMiddleware.prototype.ieNoOpenConfiguration = function (app) {
        if (checkSecurityConfiguration("security.ieNoOpen", false, "ienoopen 'IE, restrict untrusted HTML: ieNoOpen'", SecurityMiddleware.logger)) {
            // Pour IE8+: ajout le header X-Download-Options
            app.use(helmet.ieNoOpen());
        }
    };
    SecurityMiddleware.prototype.noSniffConfiguration = function (app) {
        if (checkSecurityConfiguration("security.noSniff", false, "noSniff 'Don't infer the MIME type: noSniff'", SecurityMiddleware.logger)) {
            // Pour IE8+: ajout le header X-Download-Options
            app.use(helmet.noSniff());
        }
    };
    SecurityMiddleware.prototype.cspConfiguration = function (app) {
        // Ajout des headers "content security" pour empêcher le chargement de scripts venant d'autres domaines
        if (checkSecurityConfiguration("security.csp", true, "CSP 'Content Security Policy'", SecurityMiddleware.logger)) {
            var directives = {
                // defaultSrc: Utils.config.getOrDefault("security.csp.defaultSrc", ["'self'", "'unsafe-inline'", "'unsafe-eval'"]),
                baseUri: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.baseUri", ["'self'"]),
                childSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.childSrc", ["'self'"]),
                connectSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.connectSrc", ["'self'"]),
                fontSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.fontSrc", ["'self'"]),
                formAction: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.formAction", ["'self'"]),
                frameAncestors: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.frameAncestors", ["'self'"]),
                frameSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.frameSrc", ["'self'"]),
                imgSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.imgSrc", ["'self'"]),
                manifestSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.manifestSrc", ["'self'"]),
                mediaSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.mediaSrc", ["'self'"]),
                objectSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.objectSrc", ["'self'"]),
                // todo deal with missing directives
                // reflectedXss: Utils.config.getOrDefault("security.csp.reflectedXss", "block"),
                // todo create post route to report policy failures
                // reportUri: Utils.config.getOrDefault("security.csp.reportUri", ""),
                scriptSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.scriptSrc", ["'self'", "'unsafe-inline'", "'unsafe-eval'"]),
                styleSrc: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.styleSrc", ["'self'", "'unsafe-inline'"])
            };
            var sandbox = hornet_js_utils_1.Utils.config.getOrDefault("security.csp.sandbox", false); // TODO A traiter spécifiquement
            if (sandbox) {
                directives.sandbox = sandbox;
            }
            var pluginTypes = hornet_js_utils_1.Utils.config.getOrDefault("security.csp.pluginTypes", false);
            if (pluginTypes) {
                directives.pluginTypes = pluginTypes;
            }
            var blockAllMixedContent = hornet_js_utils_1.Utils.config.getOrDefault("security.csp.blockAllMixedContent", false);
            if (blockAllMixedContent) {
                directives.blockAllMixedContent = blockAllMixedContent;
            }
            var upgradeInsecureRequests = hornet_js_utils_1.Utils.config.getOrDefault("security.csp.upgradeInsecureRequests", false);
            if (upgradeInsecureRequests) {
                directives.upgradeInsecureRequests = upgradeInsecureRequests;
            }
            app.use(helmet.contentSecurityPolicy({
                directives: directives,
                disableAndroid: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.disableAndroid", false),
                reportOnly: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.reportOnly", false),
                setAllHeaders: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.setAllHeaders", true)
            }));
        }
    };
    SecurityMiddleware.prototype.referrerPolicyConfiguration = function (app) {
        app.use(helmet.referrerPolicy({
            policy: hornet_js_utils_1.Utils.config.getOrDefault("security.csp.referrer", "origin-when-cross-origin")
        }));
    };
    SecurityMiddleware.prototype.frameguardConfiguration = function (app) {
        // Pour empêcher la mise en itiframe
        if (checkSecurityConfiguration("security.frameguard", true, "frameguard", SecurityMiddleware.logger)) {
            var action = hornet_js_utils_1.Utils.config.getOrDefault("security.frameguard.action", "deny");
            var domain = undefined;
            if (action == "allow-from") {
                domain = hornet_js_utils_1.Utils.config.getOrDefault("security.frameguard.domain", "'self'");
            }
            app.use(helmet.frameguard({
                action: action,
                domain: domain
            }));
        }
    };
    SecurityMiddleware.prototype.xssFilterConfiguration = function (app) {
        if (checkSecurityConfiguration("security.xss", true, "XssFilter 'Cross-site scripting Filter'", SecurityMiddleware.logger)) {
            // Ajoute le header X-XSS-Protection pour essayer de protéger contre des attaques XSS simples
            // This has some security problems for old IE!
            app.use(helmet.xssFilter({ setOnOldIE: hornet_js_utils_1.Utils.config.getOrDefault("security.xss.setOnOldIE", true) }));
        }
    };
    SecurityMiddleware.prototype.hpkpConfiguration = function (app) {
        // Ajoute les headers HTTP Public Key Pinning pour sécuriser les connexions SSL
        if (checkSecurityConfiguration("security.hpkp", true, "HPKP 'HTTP Public Key Pinning'", SecurityMiddleware.logger)) {
            app.use(helmet.hpkp({
                maxAge: hornet_js_utils_1.Utils.config.getOrDefault("security.hpkp.maxAge", 7776000000),
                sha256s: hornet_js_utils_1.Utils.config.get("security.hpkp.sha256s"),
                includeSubdomains: hornet_js_utils_1.Utils.config.getOrDefault("security.hpkp.includeSubdomains", true),
                reportUri: hornet_js_utils_1.Utils.config.getOrDefault("security.hpkp.reportUri", null),
                reportOnly: hornet_js_utils_1.Utils.config.getOrDefault("security.hpkp.reportOnly", false)
            }));
        }
    };
    SecurityMiddleware.prototype.hstsConfiguration = function (app) {
        if (checkSecurityConfiguration("security.hsts", true, "HSTS 'HTTP Strict-Transport-Security'", SecurityMiddleware.logger)) {
            // Ajoute le header Strict-Transport-Security pour demander au navigateur client un accès au site en https
            app.use(helmet.hsts({
                // Must be at least 18 weeks to be approved by Google
                maxAge: hornet_js_utils_1.Utils.config.getOrDefault("security.hsts.maxAge", 10886400000),
                // Must be enabled to be approved by Google
                includeSubDomains: hornet_js_utils_1.Utils.config.getOrDefault("security.hsts.includeSubDomains", true),
                preload: hornet_js_utils_1.Utils.config.getOrDefault("security.hsts.preload", false)
            }));
        }
    };
    SecurityMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.SecurityMiddleware");
    return SecurityMiddleware;
}(AbstractHornetMiddleware));
exports.SecurityMiddleware = SecurityMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      CsrfMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var _ = require("lodash");
var CsrfMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(CsrfMiddleware, _super);
    function CsrfMiddleware() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CsrfMiddleware.prototype.insertMiddleware = function (app) {
        if (isSecurityEnabled(isEnvProduction, CsrfMiddleware.logger)) {
            this.csrfConfiguration(app);
        }
    };
    CsrfMiddleware.prototype.csrfConfiguration = function (app) {
        if (checkSecurityConfiguration("security.csrf", true, "CSRF 'Cross-Site Request Forgery'", CsrfMiddleware.logger)) {
            app.use(CsrfMiddleware.middleware);
        }
    };
    /**
     * Retourne un nouveau token aléatoire
     * @return {string}
     */
    CsrfMiddleware.generateToken = function () {
        var newToken = Math.random().toString(36).slice(2);
        CsrfMiddleware.logger.trace("Génération d'un token CSRF:", newToken);
        return newToken;
    };
    /**
     * Middleware express pour sécuriser les verbs HTTP PUT, POST, PATCH et DELETE d'attaques CSRF
     * @param req
     * @param resrouter
     * @param next
     */
    CsrfMiddleware.middleware = function (req, res, next) {
        if (req.method === "PUT" || req.method === "POST" || req.method === "PATCH" || req.method === "DELETE") {
            var incomingCsrf = req.headers[CsrfMiddleware.HEADER_CSRF_NAME];
            if (_.isUndefined(incomingCsrf)) {
                CsrfMiddleware.logger.trace(CsrfMiddleware.HEADER_CSRF_NAME, "non present, recherche dans le body de la requête");
                incomingCsrf = req.body && req.body[CsrfMiddleware.HEADER_CSRF_NAME];
            }
            var sessionCsrf = req.getSession().getAttribute(CsrfMiddleware.CSRF_SESSION_KEY);
            var valid = CsrfMiddleware.isTokenValid(incomingCsrf, sessionCsrf);
            if (valid) {
                // Le token est correcte, l'accès est autorisé
                next();
            }
            else {
                CsrfMiddleware.logger.debug("Csrf mismatch, retourning 417 status");
                res.status(417);
                res.end();
            }
        }
        else {
            // Pas de sécurité csrf sur ce verb HTTP.
            // On récupère le token courant en session, généré si absent, puis on l'insère dans le CLS
            var token = req.getSession().getAttribute(CsrfMiddleware.CSRF_SESSION_KEY);
            if (token != null) {
                CsrfMiddleware.logger.debug("Token CSRF already exists in session");
            }
            else {
                token = CsrfMiddleware.generateToken();
                req.getSession().setAttribute(CsrfMiddleware.CSRF_SESSION_KEY, token);
            }
            hornet_js_utils_1.Utils.setCls("hornet.csrf", token);
            next();
        }
    };
    /**
     * Détermine si le token envoyé correspond à celui stocké en session
     * @param incomingCsrf
     * @param sessionCsrf
     * @return {boolean}
     */
    CsrfMiddleware.isTokenValid = function (incomingCsrf, sessionCsrf) {
        CsrfMiddleware.logger.trace("incomingCsrf =", incomingCsrf, "sessionCsrf =", sessionCsrf);
        return incomingCsrf === sessionCsrf;
    };
    CsrfMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.CsrfMiddleware");
    CsrfMiddleware.HEADER_CSRF_NAME = "x-csrf-token";
    CsrfMiddleware.CSRF_SESSION_KEY = "security.csrf";
    return CsrfMiddleware;
}(AbstractHornetMiddleware));
exports.CsrfMiddleware = CsrfMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      InternationalizationMiddleware                                                 //
// ------------------------------------------------------------------------------------------------------------------- //
var abstract_i18n_loader_1 = require("hornet-js-core/src/i18n/abstract-i18n-loader");
var cookie_manager_1 = require("hornet-js-core/src/session/cookie-manager");
var InternationalizationMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(InternationalizationMiddleware, _super);
    function InternationalizationMiddleware(config) {
        var _this = _super.call(this, function (req, res, next) {
            var appConfig = _this.config || AbstractHornetMiddleware.APP_CONFIG;
            var isI18nInSession = req.session && req.session.i18n;
            var localeI18n = (isI18nInSession) ? req.session.i18n : hornet_js_utils_1.Utils.config.getOrDefault("localeI18n", {});
            if (!isI18nInSession) {
                var cookLocaleI18n = cookie_manager_1.CookieManager.getCookie(req, "internationalization");
                if (cookLocaleI18n != undefined) {
                    var shortLang = cookLocaleI18n.split("-");
                    localeI18n = { locale: cookLocaleI18n, lang: shortLang[1] };
                }
            }
            if (appConfig.internationalization instanceof abstract_i18n_loader_1.AbstractI18nLoader) {
                hornet_js_utils_1.Utils.setCls("hornet.internationalization", appConfig.internationalization.getMessages(localeI18n));
            }
            if (!isI18nInSession) {
                InternationalizationMiddleware.logger.trace("InternationalizationMiddleware :  Mise en session de la locale " + localeI18n.locale);
                req.session.i18n = localeI18n;
            }
            next();
        }, null, config) || this;
        return _this;
    }
    InternationalizationMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.InternationalizationMiddleware");
    return InternationalizationMiddleware;
}(AbstractHornetMiddleware));
exports.InternationalizationMiddleware = InternationalizationMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      ChangeI18nLocaleMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var ChangeI18nLocaleMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(ChangeI18nLocaleMiddleware, _super);
    function ChangeI18nLocaleMiddleware() {
        var _this = this;
        var appConfig = AbstractHornetMiddleware.APP_CONFIG;
        if (!hornet_js_utils_1.Utils.appSharedProps.get("listLanguage") && appConfig.internationalization) {
            hornet_js_utils_1.Utils.appSharedProps.set("listLanguage", appConfig.internationalization.getLocales());
        }
        _this = _super.call(this, function (req, res, next) {
            if (_.some(appConfig.internationalization.getLocales(), { "locale": req.params.i18n })) {
                ChangeI18nLocaleMiddleware.logger.trace("ChangeI18nLocaleMiddleware :  Changement de la locale " + req.params.i18n);
                var shortLang = req.params.i18n.split("-");
                req.session.i18n = { locale: req.params.i18n, lang: shortLang[1] };
                var i18n = appConfig.internationalization.getMessages(req.session.i18n);
                hornet_js_utils_1.Utils.setCls("hornet.internationalization", i18n);
                cookie_manager_1.CookieManager.setCookie(res, "internationalization", req.params.i18n);
                res.type("application/json");
                res.status(200).send(i18n);
                res.end();
            }
            else {
                ChangeI18nLocaleMiddleware.logger.trace("ChangeI18nLocaleMiddleware :  La locale demandée " + req.params.i18n + "n'existe pas");
                var err = new technical_error_1.TechnicalError("ERR_TECH_UNKNOWN", {
                    errorMessage: "La locale '" + req.params.i18n + "' n\'existe pas",
                    httpStatus: 200
                });
                res.json(service_api_results_1.NodeApiResultBuilder.buildError(err));
                res.end();
            }
        }) || this;
        _this.prefix = "/changeLanguage/:i18n";
        return _this;
    }
    ChangeI18nLocaleMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.ChangeI18nLocaleMiddleware");
    return ChangeI18nLocaleMiddleware;
}(AbstractHornetMiddleware));
exports.ChangeI18nLocaleMiddleware = ChangeI18nLocaleMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      SetExpandedLayoutMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var SetExpandedLayoutMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(SetExpandedLayoutMiddleware, _super);
    function SetExpandedLayoutMiddleware() {
        var _this = _super.call(this, function (req, res, next) {
            SetExpandedLayoutMiddleware.logger.trace("SetLayoutMiddleware : set isExpandedLayout appSharedProps with value:", req.body.isExpandedLayout);
            hornet_js_utils_1.Utils.appSharedProps.set("isExpandedLayout", req.body.isExpandedLayout);
            res.type("application/json");
            res.status(200).send({ isExpandedLayout: req.body.isExpandedLayout });
            res.end();
        }) || this;
        _this.prefix = "/setExpandedLayout";
        return _this;
    }
    SetExpandedLayoutMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.SetExpandedLayoutMiddleware");
    return SetExpandedLayoutMiddleware;
}(AbstractHornetMiddleware));
exports.SetExpandedLayoutMiddleware = SetExpandedLayoutMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      IsExpandedLayoutMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var IsExpandedLayoutMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(IsExpandedLayoutMiddleware, _super);
    function IsExpandedLayoutMiddleware() {
        var _this = _super.call(this, function (req, res, next) {
            var isExpandedLayout = hornet_js_utils_1.Utils.appSharedProps.get("isExpandedLayout");
            IsExpandedLayoutMiddleware.logger.trace("IsExpandedLayoutMiddleware : get isExpandedLayout appSharedProps: ", isExpandedLayout);
            res.type("application/json");
            res.set("Cache-Control", "no-cache");
            res.status(200).send({ isExpandedLayout: isExpandedLayout });
            res.end();
        }) || this;
        _this.prefix = "/isExpandedLayout";
        return _this;
    }
    IsExpandedLayoutMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.IsExpandedLayoutMiddleware");
    return IsExpandedLayoutMiddleware;
}(AbstractHornetMiddleware));
exports.IsExpandedLayoutMiddleware = IsExpandedLayoutMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      SetExpandedLayoutMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var wakeUpNodeSessionMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(wakeUpNodeSessionMiddleware, _super);
    function wakeUpNodeSessionMiddleware() {
        var _this = _super.call(this, function (req, res, next) {
            wakeUpNodeSessionMiddleware.logger.trace("sollicitation du nodeJs suite à notification fin de session node");
            res.type("application/json");
            res.set("Cache-Control", "no-cache");
            res.status(200).send({});
            res.end();
        }) || this;
        _this.prefix = "/wakeUpNodeSession";
        return _this;
    }
    wakeUpNodeSessionMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.wakeUpNodeSessionMiddleware");
    return wakeUpNodeSessionMiddleware;
}(AbstractHornetMiddleware));
exports.wakeUpNodeSessionMiddleware = wakeUpNodeSessionMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      RouterServerMiddleware                                                         //
// ------------------------------------------------------------------------------------------------------------------- //
var router_server_1 = require("hornet-js-core/src/routes/router-server");
var RouterServerMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(RouterServerMiddleware, _super);
    function RouterServerMiddleware(config) {
        var _this = _super.call(this, null, null, config) || this;
        var appConfig = _this.config || AbstractHornetMiddleware.APP_CONFIG;
        _this.router = new router_server_1.RouterServer(appConfig.defaultRoutesClass, appConfig.routesLoaderfn, appConfig.routesLoaderPaths, appConfig.routesDataContext);
        return _this;
    }
    RouterServerMiddleware.prototype.insertMiddleware = function (app) {
        app.use(this.router.pageMiddleware());
        app.use(hornet_js_utils_1.Utils.config.getOrDefault("fullSpa.name", AbstractHornetMiddleware.APP_CONFIG.routesDataContext), this.router.dataMiddleware());
    };
    return RouterServerMiddleware;
}(AbstractHornetMiddleware));
exports.RouterServerMiddleware = RouterServerMiddleware;
var RouterServerSubMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(RouterServerSubMiddleware, _super);
    function RouterServerSubMiddleware(config) {
        var _this = _super.call(this, null, null, config) || this;
        var appConfig = _this.config || AbstractHornetMiddleware.APP_CONFIG;
        _this.router = new router_server_1.RouterServer(appConfig.defaultRoutesClass, appConfig.routesLoaderfn, appConfig.routesLoaderPaths, appConfig.routesDataContext);
        return _this;
    }
    RouterServerSubMiddleware.prototype.insertRouterMiddleware = function (router) {
        router.use(this.router.pageMiddleware());
        router.use(hornet_js_utils_1.Utils.config.getOrDefault("fullSpa.name", (this.config || AbstractHornetMiddleware.APP_CONFIG).routesDataContext), this.router.dataMiddleware());
    };
    return RouterServerSubMiddleware;
}(AbstractHornetSubMiddleware));
exports.RouterServerSubMiddleware = RouterServerSubMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      UserAccessSecurityMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var authentication_utils_1 = require("hornet-js-utils/src/authentication-utils");
var security_error_1 = require("hornet-js-utils/src/exception/security-error");
var not_found_error_1 = require("hornet-js-utils/src/exception/not-found-error");
var UserAccessSecurityMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(UserAccessSecurityMiddleware, _super);
    function UserAccessSecurityMiddleware() {
        return _super.call(this, function (req, res, next) {
            var routesAuthorization = hornet_js_utils_1.Utils.getCls("hornet.routeAuthorization");
            if (!authentication_utils_1.AuthUtils.isAllowed(req.user, routesAuthorization)) {
                var e = void 0;
                if (isEnvProduction) {
                    e = new not_found_error_1.NotFoundError();
                }
                e = new security_error_1.SecurityError();
                UserAccessSecurityMiddleware.logger.trace("Tentative d'accès à une route non autorisée", req.url, e.reportId);
                throw e;
            }
            next();
        }) || this;
    }
    UserAccessSecurityMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.UserAccessSecurityMiddleware");
    return UserAccessSecurityMiddleware;
}(AbstractHornetMiddleware));
exports.UserAccessSecurityMiddleware = UserAccessSecurityMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      MenuConfigMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var MenuConfigMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(MenuConfigMiddleware, _super);
    function MenuConfigMiddleware() {
        return _super.call(this, function (req, res, next) {
            hornet_js_utils_1.Utils.setCls("hornet.menuConfig", AbstractHornetMiddleware.APP_CONFIG.menuConfig);
            next();
        }) || this;
    }
    return MenuConfigMiddleware;
}(AbstractHornetMiddleware));
exports.MenuConfigMiddleware = MenuConfigMiddleware;
var async_executor_1 = require("hornet-js-core/src/executor/async-executor");
var async_element_1 = require("hornet-js-core/src/executor/async-element");
var service_api_results_1 = require("hornet-js-core/src/services/service-api-results");
var validation_error_1 = require("hornet-js-utils/src/exception/validation-error");
var hornet_result_1 = require("hornet-js-core/src/result/hornet-result");
var result_json_1 = require("hornet-js-core/src/result/result-json");
var DataRenderingMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(DataRenderingMiddleware, _super);
    function DataRenderingMiddleware() {
        return _super.call(this, function (req, res, next) {
            try {
                var routeInfos_1 = hornet_js_utils_1.Utils.getCls("hornet.routeInfos");
                // route de type 'DATA' uniquement
                if (hornet_js_utils_1.Utils.getCls("hornet.routeType") === abstract_routes_1.RouteType.DATA) {
                    var dataRouteInfos_1 = routeInfos_1;
                    if (!dataRouteInfos_1) {
                        var mess = "DataRouteInfos inexistant pour l'url : " + req.originalUrl;
                        DataRenderingMiddleware.logger.warn(mess);
                        throw new technical_error_1.TechnicalError("ERR_TECH_UNKNOWN", { errorMessage: mess, httpStatus: 200 });
                    }
                    else {
                        var executor = new async_executor_1.AsyncExecutor();
                        executor.addElement(new async_element_1.AsyncElement(function (next) {
                            var action = new (dataRouteInfos_1.getAction())();
                            action.req = req;
                            action.res = res;
                            action.attributes = routeInfos_1.getAttributes();
                            if (dataRouteInfos_1.getService()) {
                                action.service = new (dataRouteInfos_1.getService())();
                            }
                            var validator = action.getDataValidator();
                            if (validator) {
                                var data = _.cloneDeep(action.getPayload());
                                var validationRes = validator.validate(data);
                                if (!validationRes.valid) {
                                    DataRenderingMiddleware.logger.warn("Données invalides (la validation aurait dû être effectuée côté client) : ", validationRes.errors);
                                    throw new validation_error_1.ValidationError();
                                }
                            }
                            var exec = action.execute();
                            exec.then(function (result) {
                                var newResult = (result instanceof hornet_result_1.HornetResult) ? result : new result_json_1.ResultJSON({ data: result });
                                return newResult.manageResponse(res);
                            }).then(function (send) {
                                if (send) {
                                    res.end();
                                }
                            }).catch(function (error) {
                                DataRenderingMiddleware.logger.error("Erreur de service..." + error);
                                next(error);
                            });
                        }));
                        executor.on("end", function (err) {
                            if (err) {
                                next(err);
                            }
                        });
                        executor.execute();
                    }
                }
            }
            catch (e) {
                next(e);
            }
        }) || this;
    }
    DataRenderingMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.DataRenderingMiddleware");
    return DataRenderingMiddleware;
}(AbstractHornetMiddleware));
exports.DataRenderingMiddleware = DataRenderingMiddleware;
var DataRenderingSubMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(DataRenderingSubMiddleware, _super);
    function DataRenderingSubMiddleware() {
        return _super.call(this, function (req, res, next) {
            try {
                var routeInfos_2 = hornet_js_utils_1.Utils.getCls("hornet.routeInfos");
                // route de type 'DATA' uniquement
                if (hornet_js_utils_1.Utils.getCls("hornet.routeType") === abstract_routes_1.RouteType.DATA) {
                    var dataRouteInfos_2 = routeInfos_2;
                    if (!dataRouteInfos_2) {
                        var mess = "DataRouteInfos inexistant pour l'url : " + req.originalUrl;
                        DataRenderingSubMiddleware.logger.warn(mess);
                        throw new technical_error_1.TechnicalError("ERR_TECH_UNKNOWN", { errorMessage: mess, httpStatus: 200 });
                    }
                    else {
                        var executor = new async_executor_1.AsyncExecutor();
                        executor.addElement(new async_element_1.AsyncElement(function (next) {
                            var action = new (dataRouteInfos_2.getAction())();
                            action.req = req;
                            action.res = res;
                            action.attributes = routeInfos_2.getAttributes();
                            if (dataRouteInfos_2.getService()) {
                                action.service = new (dataRouteInfos_2.getService())();
                            }
                            var validator = action.getDataValidator();
                            if (validator) {
                                var data = _.cloneDeep(action.getPayload());
                                var validationRes = validator.validate(data);
                                if (!validationRes.valid) {
                                    DataRenderingSubMiddleware.logger.warn("Données invalides (la validation aurait dû être effectuée côté client) : ", validationRes.errors);
                                    throw new validation_error_1.ValidationError();
                                }
                            }
                            var exec = action.execute();
                            exec.then(function (result) {
                                var newResult = (result instanceof hornet_result_1.HornetResult) ? result : new result_json_1.ResultJSON({ data: result });
                                return newResult.manageResponse(res);
                            }).then(function (send) {
                                if (send) {
                                    res.end();
                                }
                            }).catch(function (error) {
                                DataRenderingSubMiddleware.logger.error("Erreur de service..." + error);
                                next(error);
                            });
                        }));
                        executor.on("end", function (err) {
                            if (err) {
                                next(err);
                            }
                        });
                        executor.execute();
                    }
                }
            }
            catch (e) {
                next(e);
            }
        }) || this;
    }
    DataRenderingSubMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.DataRenderingMiddleware");
    return DataRenderingSubMiddleware;
}(AbstractHornetSubMiddleware));
exports.DataRenderingSubMiddleware = DataRenderingSubMiddleware;
var base_error_1 = require("hornet-js-utils/src/exception/base-error");
var business_error_1 = require("hornet-js-utils/src/exception/business-error");
var technical_error_1 = require("hornet-js-utils/src/exception/technical-error");
// ------------------------------------------------------------------------------------------------------------------- //
//                                      UnmanagedDataErrorMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var UnmanagedDataErrorMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(UnmanagedDataErrorMiddleware, _super);
    function UnmanagedDataErrorMiddleware() {
        return _super.call(this, function (err, req, res, next) {
            // route de type 'DATA' uniquement
            if (hornet_js_utils_1.Utils.getCls("hornet.routeType") === abstract_routes_1.RouteType.DATA) {
                sanitizeErrorThrownInDomain(err);
                if (!(err instanceof base_error_1.BaseError)) {
                    err = new technical_error_1.TechnicalError("ERR_TECH_UNKNOWN", { errorMessage: err.message }, err);
                }
                if (err instanceof technical_error_1.TechnicalError) {
                    UnmanagedDataErrorMiddleware.logger.error("ERREUR technique [" + err.code + "] - reportId [" + err.reportId + "] : ", err);
                }
                else if (err instanceof business_error_1.BusinessError) {
                    UnmanagedDataErrorMiddleware.logger.error("ERREUR métier [" + err.code + "] - : ", err);
                }
                else {
                    UnmanagedDataErrorMiddleware.logger.error("ERREUR [" + err.code + "] - : ", err);
                }
                res.json(service_api_results_1.NodeApiResultBuilder.buildError(err));
                res.status(200);
                if (hornet_js_utils_1.Utils.config.getOrDefault("server.rethrow", false)) {
                    if (err.status && typeof err.status === "number") {
                        res.status(err.status);
                    }
                    else if (err.args && err.args.httpStatus && typeof err.args.httpStatus === "number") {
                        res.status(err.args.httpStatus);
                    }
                    else {
                        res.status(500);
                    }
                }
                res.end();
            }
            else {
                UnmanagedDataErrorMiddleware.logger.error("ERREUR technique [" + err.code + "] - reportId [" + err.reportId + "] : ", err);
                if (err.status && typeof err.status === "number") {
                    res.status(err.status);
                }
                else if (err.args && err.args.httpStatus && typeof err.args.httpStatus === "number") {
                    res.status(err.args.httpStatus);
                }
                else {
                    res.status(500);
                }
                res.end();
            }
        }) || this;
    }
    UnmanagedDataErrorMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-core.middlewares.UnmanagedDataErrorMiddleware");
    return UnmanagedDataErrorMiddleware;
}(AbstractHornetMiddleware));
exports.UnmanagedDataErrorMiddleware = UnmanagedDataErrorMiddleware;
exports.DEFAULT_HORNET_MIDDLEWARES = [
    HornetContextInitializerMiddleware,
    LoggerTIDMiddleware,
    SecurityMiddleware,
    WelcomePageRedirectMiddleware,
    WithoutSlashPageRedirectMiddleware,
    StaticNodeHttpHeaderMiddleware,
    StaticPathMiddleware,
    StaticPathErrorMiddleware,
    BodyParserJsonMiddleware,
    BodyParserUrlEncodedMiddleware,
    // MockManagerMiddleware,
    SessionMiddleware,
    InternationalizationMiddleware,
    ChangeI18nLocaleMiddleware,
    wakeUpNodeSessionMiddleware,
    LoggerUserMiddleware,
    CsrfMiddleware,
    MulterMiddleware,
    SetExpandedLayoutMiddleware,
    IsExpandedLayoutMiddleware,
    MenuConfigMiddleware,
    RouterServerMiddleware,
    UserAccessSecurityMiddleware,
    DataRenderingMiddleware,
    UnmanagedDataErrorMiddleware
];
exports.DEFAULT_HORNET_MODULE_MIDDLEWARES = [
    HornetContextInitializerSubMiddleware,
    RouterServerSubMiddleware,
    DataRenderingSubMiddleware
];
var HornetMiddlewareList = /** @class */ (function () {
    function HornetMiddlewareList(middlewares) {
        if (middlewares === void 0) { middlewares = exports.DEFAULT_HORNET_MIDDLEWARES; }
        var _this = this;
        this.list = [];
        middlewares.forEach(function (middleware) {
            _this.list.push(middleware);
        });
    }
    HornetMiddlewareList.prototype.addBefore = function (newMiddleware, middleware) {
        var idx = this.list.indexOf(middleware);
        if (idx === -1) {
            throw new Error("Le middleware de base n'a pas été trouvé dans le tableau de middlewares " +
                ">> impossible d'insérer le nouveau middleware avant.");
        }
        this.list.splice(idx, 0, newMiddleware);
        return this;
    };
    HornetMiddlewareList.prototype.addRouterBefore = function (router, middleware) {
        var idx = this.list.indexOf(middleware);
        if (idx === -1) {
            throw new Error("Le middleware de base n'a pas été trouvé dans le tableau de middlewares " +
                ">> impossible d'insérer le nouveau middleware avant.");
        }
        this.list.splice(idx, 0, router);
        return this;
    };
    HornetMiddlewareList.prototype.addAfter = function (newMiddleware, middleware) {
        var idx = this.list.indexOf(middleware);
        if (idx === -1) {
            throw new Error("Le middleware de base n'a pas été trouvé dans le tableau de middlewares " +
                ">> impossible d'insérer le nouveau middleware après.");
        }
        this.list.splice(idx + 1, 0, newMiddleware);
        return this;
    };
    HornetMiddlewareList.prototype.remove = function (middleware) {
        var idx = this.list.indexOf(middleware);
        if (idx === -1) {
            throw new Error("Le middleware n'a pas été trouvé dans le tableau de middlewares " +
                ">> suppression impossible.");
        }
        this.list.splice(idx, 1);
        return this;
    };
    return HornetMiddlewareList;
}());
exports.HornetMiddlewareList = HornetMiddlewareList;
var HornetRouter = /** @class */ (function () {
    function HornetRouter(prefix, router) {
        this.prefix = prefix;
        this.router = router;
    }
    return HornetRouter;
}());
exports.HornetRouter = HornetRouter;

//# sourceMappingURL=middlewares.js.map
