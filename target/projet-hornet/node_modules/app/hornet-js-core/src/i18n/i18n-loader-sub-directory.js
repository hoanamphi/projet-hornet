"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-core - Ensemble des composants qui forment le coeur de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var fs = require("fs");
var path = require("path");
var json_loader_1 = require("hornet-js-utils/src/json-loader");
var _ = require("lodash");
var abstract_i18n_loader_1 = require("hornet-js-core/src/i18n/abstract-i18n-loader");
/**
 * Classe utilisée uniquement côté serveur.
 */
var I18nLoaderSubDirectory = /** @class */ (function (_super) {
    tslib_1.__extends(I18nLoaderSubDirectory, _super);
    function I18nLoaderSubDirectory(pathsLang) {
        var _this = _super.call(this) || this;
        _this.pathsLang = pathsLang;
        _this.messagesLang = {};
        if (!pathsLang) {
            _this.pathsLang = [path.join(path.parse(require.main.filename).dir, "src", "resources")];
        }
        _this.loadSubDirectoryMessages();
        return _this;
    }
    /** Méthode qui retourne la langue selectionné
     * @returns {string[]}
     */
    I18nLoaderSubDirectory.prototype.loadSubDirectoryMessages = function (locales) {
        var _this = this;
        /**
         *  Extraits les messages de fichiers, de base de données....
         *  Doit retourner un flux JSON conforme au module react-intl.
         */
        // par défaut on charge le fichier hornet-messages
        this.messagesLang["default"] = { locale: undefined, lang: "", messages: require("./hornet-messages-components.json") };
        /** chargement des fichiers 'message.json' */
        this.pathsLang.forEach(function (pathLAng) {
            _this.getFilesRecursive(pathLAng, "messages.json", _this.messagesLang["default"].messages);
        });
        /** verifier sur localeI18n dans defaut.json existe */
        if (locales && locales.length > 0) {
            locales.forEach(function (locale) {
                _this.pathsLang.forEach(function (pathLAng) {
                    _this.messagesLang[locale.locale] = { locale: locale.locale, lang: locale.lang, messages: _.merge({}, _this.messagesLang["default"].messages) };
                    _this.getFilesRecursive(pathLAng, "messages-" + locale.locale + ".json", _this.messagesLang[locale.locale].messages);
                });
            });
        }
    };
    /** Méthode qui retourne la langue selectionné
     * @returns {string[]}
     */
    I18nLoaderSubDirectory.prototype.getMessages = function (locales) {
        var _this = this;
        /**
         *  Extraits les messages de fichiers, de base de données....
         *  Do        if(!locales) {
            return this.messagesLang["default"];
        }it retourner un flux JSON conforme au module react-intl.
         */
        if (!locales) {
            return this.messagesLang["default"];
        }
        if (this.messagesLang[locales.locale]) {
            return this.messagesLang[locales.locale];
        }
        var localMessage = {};
        _.merge(localMessage, this.messagesLang["default"]);
        /** verifier sur localeI18n dans defaut.json existe */
        if (locales && locales.locale) {
            this.pathsLang.forEach(function (pathLAng) {
                _this.getFilesRecursive(pathLAng, "messages-" + locales.locale + ".json", localMessage);
            });
        }
        this.messagesLang[locales.locale] = { locale: locales.locale, lang: locales.lang, messages: localMessage };
        return this.messagesLang[locales.locale];
    };
    /** Méthode qui liste les langues disponibles dans le dossier resources
     * @returns {string[]}
     */
    I18nLoaderSubDirectory.prototype.getLocales = function () {
        var _this = this;
        if (!this.allLocales) {
            var locales_1 = {};
            this.allLocales = [];
            this.pathsLang.forEach(function (folder) {
                _this.getLocalesRecusive(folder, locales_1);
            });
            for (var locale in locales_1) {
                this.allLocales.push(locales_1[locale]);
            }
        }
        return this.allLocales;
    };
    /** Méthode qui liste les langues disponibles dans le dossier resources
     * @returns {string[]}
     */
    I18nLoaderSubDirectory.prototype.getLocalesRecusive = function (folder, locales) {
        var _this = this;
        var regx = /^messages-([a-zA-Z\-]+)\.json$/;
        if (fs.existsSync(folder)) {
            var childDirs = [];
            var fileContents = fs.readdirSync(folder), stats;
            fileContents.forEach(function (fileName) {
                stats = fs.lstatSync(folder + '/' + fileName);
                if (stats.isDirectory()) {
                    _this.getLocalesRecusive(path.join(folder, fileName), locales);
                }
                else {
                    var match = fileName.match(regx);
                    if (match) {
                        var jsonMessage = json_loader_1.JSONLoader.load(path.join(folder, fileName), "UTF-8");
                        var listShort = match[1].split("-");
                        if (!locales[match[1]]) {
                            locales[match[1]] = {};
                        }
                        _.merge(locales[match[1]], {
                            langShort: listShort[1],
                            locale: match[1],
                            langLabel: jsonMessage.labelLanguage || listShort[1]
                        });
                    }
                }
            });
        }
    };
    I18nLoaderSubDirectory.prototype.getFilesRecursive = function (folder, searchFileName, messages) {
        var _this = this;
        if (fs.existsSync(folder)) {
            var childDirs_1 = [];
            var fileContents = fs.readdirSync(folder), stats;
            fileContents.forEach(function (fileName) {
                stats = fs.lstatSync(folder + '/' + fileName);
                if (stats.isDirectory()) {
                    childDirs_1.push(path.join(folder, fileName));
                }
                else {
                    if (fileName == searchFileName) {
                        _.merge(messages, require(path.join(folder, fileName)));
                    }
                }
                childDirs_1.forEach(function (childDir) { _this.getFilesRecursive(childDir, searchFileName, messages); });
            });
        }
    };
    ;
    return I18nLoaderSubDirectory;
}(abstract_i18n_loader_1.AbstractI18nLoader));
exports.I18nLoaderSubDirectory = I18nLoaderSubDirectory;

//# sourceMappingURL=i18n-loader-sub-directory.js.map
