"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var base_test_1 = require("hornet-js-test/src/base-test");
var test_run_1 = require("hornet-js-test/src/test-run");
var decorators_1 = require("hornet-js-test/src/decorators");
var chai = require('chai');
var expect = chai.expect;
var React = require("react");
var assert = require("assert");
var radios_field_1 = require("hornet-js-react-components/src/widget/form/radios-field");
var form_1 = require("hornet-js-react-components/src/widget/form/form");
var datasource_1 = require("hornet-js-core/src/component/datasource/datasource");
var hornet_test_assert_1 = require("hornet-js-test/src/hornet-test-assert");
var element;
var $element;
var RadioFieldDataSourceTest = /** @class */ (function (_super) {
    tslib_1.__extends(RadioFieldDataSourceTest, _super);
    function RadioFieldDataSourceTest() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dataSet = [
            {
                isClient: true,
                libelle: "Client"
            }, {
                isClient: false,
                libelle: "Fournisseur"
            }
        ];
        _this.dataSource1 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource2 = new datasource_1.DataSource(_this.dataSet, { label: "libelle", value: "isClient" });
        _this.dataSource3 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource4 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource5 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource6 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource7 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource8 = new datasource_1.DataSource(_this.dataSet, { label: "libelle", value: "isClient" });
        return _this;
    }
    RadioFieldDataSourceTest.prototype.testOk = function () {
        assert.equal(1, 1);
        this.end();
    };
    ;
    RadioFieldDataSourceTest.prototype.testRadioField1 = function () {
        element = (React.createElement("div", { id: "main1" },
            React.createElement(form_1.Form, { id: "testForm-1" },
                React.createElement(radios_field_1.RadiosField, { name: "exampleRadio-1", label: "Type de partenaire", inline: radios_field_1.RadiosField.Inline.FIELD, dataSource: this.dataSource1, labelKey: "libelle", valueKey: "isClient", currentChecked: true }))));
        $element = this.renderIntoDocument(element, "main1");
        var htmlElement = document.getElementById("exampleRadio-1-Client");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Le radio 1 pour Client n'a pas bien été généré");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-1-Client ne doit pas être sélectionné");
        htmlElement = document.getElementById("exampleRadio-1-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Le radio 1 pour Fournisseur n'a pas bien été généré");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-1-Fournisseur ne doit pas être sélectionné");
        this.end();
    };
    ;
    RadioFieldDataSourceTest.prototype.testRadioField2 = function () {
        element = (React.createElement("div", { id: "main2" },
            React.createElement(form_1.Form, { id: "testForm-2" },
                React.createElement(radios_field_1.RadiosField, { name: "exampleRadio-2", label: "Type de partenaire", inline: radios_field_1.RadiosField.Inline.FIELD, dataSource: this.dataSource2, currentChecked: true, defaultValue: this.dataSet[0] }))));
        $element = this.renderIntoDocument(element, "main2");
        var htmlElement = document.getElementById("exampleRadio-2-Client");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Client non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-2-Client doit être sélectionné");
        htmlElement = document.getElementById("exampleRadio-2-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Fournisseur non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-2-Fournisseur ne doit pas être sélectionné");
        this.end();
    };
    ;
    RadioFieldDataSourceTest.prototype.testRadioField3 = function () {
        element = (React.createElement("div", { id: "main3" },
            React.createElement(form_1.Form, { id: "testForm-3" },
                React.createElement(radios_field_1.RadiosField, { name: "exampleRadio-3", label: "Type de partenaire", inline: radios_field_1.RadiosField.Inline.FIELD, dataSource: this.dataSource3, labelKey: "libelle", valueKey: "isClient", currentChecked: true, defaultValue: this.dataSet[0] }))));
        $element = this.renderIntoDocument(element, "main3");
        var htmlElement = document.getElementById("exampleRadio-3-Client");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Client non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-3-Client doit être sélectionné");
        htmlElement = document.getElementById("exampleRadio-3-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Fournisseur non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-3-Fournisseur ne doit pas être sélectionné");
        this.end();
    };
    ;
    RadioFieldDataSourceTest.prototype.testRadioField4 = function () {
        element = (React.createElement("div", { id: "main4" },
            React.createElement(form_1.Form, { id: "testForm-4" },
                React.createElement(radios_field_1.RadiosField, { name: "exampleRadio-4", label: "Type de partenaire", inline: radios_field_1.RadiosField.Inline.FIELD, dataSource: this.dataSource4, labelKey: "libelle", valueKey: "isClient", currentChecked: true, defaultValue: this.dataSet[1] }))));
        $element = this.renderIntoDocument(element, "main4");
        var htmlElement = document.getElementById("exampleRadio-4-Client");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Client non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-4-Client ne doit pas être sélectionné");
        htmlElement = document.getElementById("exampleRadio-4-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Fournisseur non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-4-Fournisseur doit être sélectionné");
        this.end();
    };
    ;
    RadioFieldDataSourceTest.prototype.testRadioField5 = function () {
        element = (React.createElement("div", { id: "main5" },
            React.createElement(form_1.Form, { id: "testForm-5" },
                React.createElement(radios_field_1.RadiosField, { name: "exampleRadio-5", label: "Type de partenaire", inline: radios_field_1.RadiosField.Inline.FIELD, dataSource: this.dataSource5, labelKey: "libelle", valueKey: "isClient", currentChecked: true, defaultValue: this.dataSet[1] }))));
        $element = this.renderIntoDocument(element, "main5");
        var htmlElement = document.getElementById("exampleRadio-5-Fournisseur");
        this.triggerMouseEvent(document.getElementById("exampleRadio-5-Client"), "click");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-5-Fournisseur ne doit pas être sélectionné");
        htmlElement = document.getElementById("exampleRadio-5-Client");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-5-Client doit être sélectionné");
        this.triggerMouseEvent(document.getElementById("exampleRadio-5-Fournisseur"), "click");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-5-Client ne doit pas être sélectionné");
        htmlElement = document.getElementById("exampleRadio-5-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-5-Fournisseur doit être sélectionné");
        this.end();
    };
    ;
    RadioFieldDataSourceTest.prototype.testRadioField6 = function () {
        this.dataSource6.select(this.dataSet[0]);
        element = (React.createElement("div", { id: "main6" },
            React.createElement(form_1.Form, { id: "testForm-6" },
                React.createElement(radios_field_1.RadiosField, { name: "exampleRadio-6", label: "Type de partenaire", inline: radios_field_1.RadiosField.Inline.FIELD, dataSource: this.dataSource6, labelKey: "libelle", valueKey: "isClient", currentChecked: true }))));
        $element = this.renderIntoDocument(element, "main6");
        var htmlElement = document.getElementById("exampleRadio-6-Client");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Client non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-6-Client doit être sélectionné");
        htmlElement = document.getElementById("exampleRadio-6-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Fournisseur non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-6-Fournisseur ne doit pas être sélectionné");
        this.end();
    };
    ;
    RadioFieldDataSourceTest.prototype.testRadioField7 = function () {
        this.dataSource7.select(this.dataSet[1]);
        element = (React.createElement("div", { id: "main7" },
            React.createElement(form_1.Form, { id: "testForm-7" },
                React.createElement(radios_field_1.RadiosField, { name: "exampleRadio-7", label: "Type de partenaire", inline: radios_field_1.RadiosField.Inline.FIELD, dataSource: this.dataSource7, labelKey: "libelle", valueKey: "isClient", currentChecked: true }))));
        $element = this.renderIntoDocument(element, "main7");
        var htmlElement = document.getElementById("exampleRadio-7-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Fournisseur non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-7-Fournisseur doit être sélectionné");
        htmlElement = document.getElementById("exampleRadio-7-Client");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Client non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-7-Client ne doit pas être sélectionné");
        this.triggerMouseEvent(document.getElementById("exampleRadio-7-Client"), "click");
        htmlElement = document.getElementById("exampleRadio-7-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-7-Fournisseur ne doit pas être sélectionné");
        htmlElement = document.getElementById("exampleRadio-7-Client");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-7-Client doit être sélectionné");
        this.end();
    };
    ;
    RadioFieldDataSourceTest.prototype.testRadioField8 = function () {
        this.dataSource8.select(this.dataSet[1]);
        element = (React.createElement("div", { id: "main8" },
            React.createElement(form_1.Form, { id: "testForm-8" },
                React.createElement(radios_field_1.RadiosField, { name: "exampleRadio-8", label: "Type de partenaire", inline: radios_field_1.RadiosField.Inline.FIELD, dataSource: this.dataSource8, currentChecked: true }))));
        $element = this.renderIntoDocument(element, "main8");
        var htmlElement = document.getElementById("exampleRadio-8-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Fournisseur non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-8-Fournisseur doit être sélectionné");
        htmlElement = document.getElementById("exampleRadio-8-Client");
        hornet_test_assert_1.HornetTestAssert.assertNotNull(htmlElement, "Radio pour le libellé Client non trouvé");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-8-Client ne doit pas être sélectionné");
        this.triggerMouseEvent(document.getElementById("exampleRadio-7-Client"), "click");
        htmlElement = document.getElementById("exampleRadio-7-Fournisseur");
        hornet_test_assert_1.HornetTestAssert.assertFalse(htmlElement.checked, "ExampleRadio-7-Fournisseur ne doit pas être sélectionné");
        htmlElement = document.getElementById("exampleRadio-7-Client");
        hornet_test_assert_1.HornetTestAssert.assertTrue(htmlElement.checked, "ExampleRadio-7-Client doit être sélectionné");
        this.end();
    };
    ;
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test OK"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioFieldDataSourceTest.prototype, "testOk", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields 1 avec datasource sans valeur par défaut"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioFieldDataSourceTest.prototype, "testRadioField1", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields 2 avec datasource avec valeur par défaut premier item"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioFieldDataSourceTest.prototype, "testRadioField2", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields 3 avec datasource avec valeur par défaut premier item"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioFieldDataSourceTest.prototype, "testRadioField3", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields 4 avec datasource avec valeur par défaut deuxième item"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioFieldDataSourceTest.prototype, "testRadioField4", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields 5 avec datasource avec valeur par défaut deuxième item et gestion click"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioFieldDataSourceTest.prototype, "testRadioField5", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields 6 avec datasource avec valeur par défaut premier item"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioFieldDataSourceTest.prototype, "testRadioField6", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields 7 avec datasource avec valeur par défaut deuxième item"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioFieldDataSourceTest.prototype, "testRadioField7", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields 8 avec datasource avec valeur par défaut deuxième item"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioFieldDataSourceTest.prototype, "testRadioField8", null);
    RadioFieldDataSourceTest = tslib_1.__decorate([
        decorators_1.Decorators.describe("Test Karma radio-field avec dataSource")
    ], RadioFieldDataSourceTest);
    return RadioFieldDataSourceTest;
}(base_test_1.BaseTest));
//lancement des Tests
test_run_1.runTest(new RadioFieldDataSourceTest());

//# sourceMappingURL=radio-field.datasource.test.karma.js.map
