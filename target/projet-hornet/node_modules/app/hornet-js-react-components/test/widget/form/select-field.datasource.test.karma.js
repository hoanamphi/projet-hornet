"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.0
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var base_test_1 = require("hornet-js-test/src/base-test");
var test_run_1 = require("hornet-js-test/src/test-run");
var decorators_1 = require("hornet-js-test/src/decorators");
var chai = require('chai');
var expect = chai.expect;
var React = require("react");
var assert = require("assert");
var form_1 = require("hornet-js-react-components/src/widget/form/form");
var hornet_test_assert_1 = require("hornet-js-test/src/hornet-test-assert");
var datasource_1 = require("hornet-js-core/src/component/datasource/datasource");
var select_field_1 = require("hornet-js-react-components/src/widget/form/select-field");
var element;
var $element;
var SelectFieldDataSourceTest = /** @class */ (function (_super) {
    tslib_1.__extends(SelectFieldDataSourceTest, _super);
    function SelectFieldDataSourceTest() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dataSet = [
            {
                value: "1",
                label: "Wilfried"
            }, {
                value: "2",
                label: "Yann-Yves"
            }, {
                value: "3",
                label: "Tediaga"
            }, {
                value: "4",
                label: "Florent"
            }, {
                value: "5",
                label: "Muriel"
            }, {
                value: "6",
                label: "Marck"
            }, {
                value: "7",
                label: "Sébastien"
            }
        ];
        _this.tableDataSet = [
            { cas: "cas 1", developer: "2", nom: "Yann-Yves" }, { cas: "cas 2", developer: "3", nom: "Tediaga" }, { cas: "cas 3", developer: "4", nom: "Florent" }
        ];
        _this.dataSource1 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource2 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource3 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource4 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource5 = new datasource_1.DataSource(_this.dataSet);
        _this.dataSource6 = new datasource_1.DataSource(_this.dataSet);
        _this.tableDataSource = new datasource_1.DataSource(_this.tableDataSet);
        return _this;
        // @Decorators.it("Test selectfield avec datasource dans un tableau")
        // testSelectField6() {
        //     element = (
        //         <div id="main6">
        //             <Form id={"testForm-6"}>
        //                 <Table id="lite">
        //                     <Header title={"Team"}>
        //                     </Header>
        //                     <Content dataSource={this.tableDataSource}>
        //                         <Columns>
        //                             <Column keyColumn={"cas"} title={"Cas"}>
        //                             </Column>
        //                             <ButtonSelectColumn btnId={"selectFieldId"}
        //                                                 btnText={"Type de partenaire"}
        //                                                 keyColumn={"nom"}
        //                                                 datasource={this.dataSource6}
        //                                                 keyColumnId={"developer"}/>
        //                         </Columns>
        //                     </Content>
        //                 </Table>
        //             </Form>
        //         </div>
        //     );
        //
        //     $element = this.renderIntoDocument(element, "main6");
        //
        //     this.dataSource6.on("select", (result) => {
        //         debugger;
        //         this.end();
        //     });
        //
        //     let htmlElement = document.getElementById("lite-0.0.nom");
        //     HornetTestAssert.assertEquals(this.dataSet[1].value, (htmlElement as any).value, "SelectField doit être valorisé par l'élement 2");
        //
        //     htmlElement = document.getElementById("lite-0.1.nom");
        //     HornetTestAssert.assertEquals(this.dataSet[2].value, (htmlElement as any).value, "SelectField doit être valorisé par l'élement 3");
        //
        //     htmlElement = document.getElementById("lite-0.2.nom");
        //     HornetTestAssert.assertEquals(this.dataSet[3].value, (htmlElement as any).value, "SelectField doit être valorisé par l'élement 4");
        // };
    }
    SelectFieldDataSourceTest.prototype.testOk = function () {
        assert.equal(1, 1);
        this.end();
    };
    ;
    SelectFieldDataSourceTest.prototype.testSelectField1 = function () {
        element = (React.createElement("div", { id: "main1" },
            React.createElement(form_1.Form, { id: "testForm-1" },
                React.createElement(select_field_1.SelectField, { name: "selectTypePartenaire1", label: "Type de partenaire", dataSource: this.dataSource1 }))));
        $element = this.renderIntoDocument(element, "main1");
        var htmlElement = document.getElementById("selectTypePartenaire1");
        hornet_test_assert_1.HornetTestAssert.assertEquals(this.dataSet[0].value, htmlElement.value, "SelectField doit être valorisé par le premier élément");
        hornet_test_assert_1.HornetTestAssert.assertEquals(undefined, this.dataSource1.selected, "Le dataSource ne doit pas être valorisé");
        this.end();
    };
    ;
    SelectFieldDataSourceTest.prototype.testSelectField2 = function () {
        var _this = this;
        var passed = false;
        element = (React.createElement("div", { id: "main2" },
            React.createElement(form_1.Form, { id: "testForm-2" },
                React.createElement(select_field_1.SelectField, { name: "selectTypePartenaire2", label: "Type de partenaire", dataSource: this.dataSource2, ref: function (element) { _this.referencedElement = element; } }))));
        this.dataSource2.on("select", function (result) {
            if (!passed) {
                hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSet[3], _this.dataSource2.selected, "Le dataSource doit être valorisé avec l'élement ayant l'id 4");
                passed = true;
                _this.end();
            }
        });
        $element = this.renderIntoDocument(element, "main2");
        this.referencedElement.setCurrentValue("4");
        var htmlElement = document.getElementById("selectTypePartenaire2");
        hornet_test_assert_1.HornetTestAssert.assertEquals(this.dataSet[3].value, htmlElement.value, "SelectField doit être valorisé avec l'élement ayant l'id 4");
    };
    ;
    SelectFieldDataSourceTest.prototype.testSelectField3 = function () {
        var _this = this;
        element = (React.createElement("div", { id: "main3" },
            React.createElement(form_1.Form, { id: "testForm-3" },
                React.createElement(select_field_1.SelectField, { name: "selectTypePartenaire3", label: "Type de partenaire", dataSource: this.dataSource3, currentValue: "5", ref: function (element) { _this.referencedElement = element; } }))));
        $element = this.renderIntoDocument(element, "main3");
        var htmlElement = document.getElementById("selectTypePartenaire3");
        hornet_test_assert_1.HornetTestAssert.assertEquals(this.dataSet[4].value, htmlElement.value, "SelectField doit être valorisé avec l'élement ayant l'id 5");
        hornet_test_assert_1.HornetTestAssert.assertEquals(this.dataSet[4], this.dataSource3.selected, "Le dataSource doit être valorisé avec l'élement ayant l'id 5");
        this.end();
    };
    ;
    SelectFieldDataSourceTest.prototype.testSelectField4 = function () {
        var _this = this;
        var passed = false;
        element = (React.createElement("div", { id: "main4" },
            React.createElement(form_1.Form, { id: "testForm-4" },
                React.createElement(select_field_1.SelectField, { name: "selectTypePartenaire4", label: "Type de partenaire", dataSource: this.dataSource4, ref: function (element) { _this.referencedElement = element; } }))));
        this.dataSource4.on("select", function (result) {
            if (!passed) {
                passed = true;
                var htmlElement = document.getElementById("selectTypePartenaire4");
                hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSet[0].value, htmlElement.value, "SelectField doit être valorisé avec l'élement ayant l'id 1 par défaut, c'est au projet de se mettre à jour");
                hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSet[3], _this.dataSource4.selected, "Le dataSource doit être valorisé avec l'élement ayant l'id 4");
                _this.end();
            }
        });
        $element = this.renderIntoDocument(element, "main4");
        this.dataSource4.select(this.dataSet[3]);
    };
    ;
    SelectFieldDataSourceTest.prototype.testSelectField5 = function () {
        var _this = this;
        element = (React.createElement("div", { id: "main5" },
            React.createElement(form_1.Form, { id: "testForm-5" },
                React.createElement(select_field_1.SelectField, { name: "selectTypePartenaire5", label: "Type de partenaire", dataSource: this.dataSource5 }))));
        this.dataSource5.on("fetch", function (result) {
            var htmlElement = document.getElementById("selectTypePartenaire5");
            hornet_test_assert_1.HornetTestAssert.assertEquals(_this.dataSet[0].value, htmlElement.value, "SelectField doit être valorisé par le premier élément");
            hornet_test_assert_1.HornetTestAssert.assertEquals(undefined, _this.dataSource1.selected, "Le dataSource ne doit pas être valorisé");
            _this.end();
        });
        $element = this.renderIntoDocument(element, "main5");
        var htmlElement = document.getElementById("selectTypePartenaire5");
        hornet_test_assert_1.HornetTestAssert.assertEquals(this.dataSet[0].value, htmlElement.value, "SelectField doit être valorisé par le premier élément");
        hornet_test_assert_1.HornetTestAssert.assertEquals(undefined, this.dataSource1.selected, "Le dataSource ne doit pas être valorisé");
        this.dataSource5.add(true, { id: "8", nom: "Vincent" });
    };
    ;
    tslib_1.__decorate([
        decorators_1.Decorators.it('Test OK'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], SelectFieldDataSourceTest.prototype, "testOk", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields avec datasource sans valeur par défaut"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], SelectFieldDataSourceTest.prototype, "testSelectField1", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test selectfield avec datasource, set currentValue"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], SelectFieldDataSourceTest.prototype, "testSelectField2", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test selectfield avec datasource, currentValue en valeur par défaut"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], SelectFieldDataSourceTest.prototype, "testSelectField3", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test selectfield avec datasource, trig select on dataSource"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], SelectFieldDataSourceTest.prototype, "testSelectField4", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it("Test radiofields avec datasource sans valeur par défaut, ajout au datasource"),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], SelectFieldDataSourceTest.prototype, "testSelectField5", null);
    SelectFieldDataSourceTest = tslib_1.__decorate([
        decorators_1.Decorators.describe("Test Karma select-field avec dataSource")
    ], SelectFieldDataSourceTest);
    return SelectFieldDataSourceTest;
}(base_test_1.BaseTest));
//lancement des Tests
test_run_1.runTest(new SelectFieldDataSourceTest());

//# sourceMappingURL=select-field.datasource.test.karma.js.map
