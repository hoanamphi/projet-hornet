"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var base_test_1 = require("hornet-js-test/src/base-test");
var test_run_1 = require("hornet-js-test/src/test-run");
var decorators_1 = require("hornet-js-test/src/decorators");
var chai = require('chai');
var expect = chai.expect;
var React = require("react");
var assert = require("assert");
var textarea_field_1 = require("hornet-js-react-components/src/widget/form/textarea-field");
var ReactTestUtils = require("react-dom/test-utils");
var element;
var element2;
var textarea;
var TextareaFieldTestKarma = /** @class */ (function (_super) {
    tslib_1.__extends(TextareaFieldTestKarma, _super);
    function TextareaFieldTestKarma() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextareaFieldTestKarma.prototype.beforeEach = function () {
        var _this = this;
        element = (React.createElement(textarea_field_1.TextAreaField, { name: "textarea", charLabel: "{count} caractère", label: "test", maxChar: 255, readOnly: false, ref: function (elt) {
                _this.test = elt;
            } }));
        element2 = (React.createElement(textarea_field_1.TextAreaField, { name: "textarea", charLabel: "{count} caractère", label: "test", maxChar: 255, showAlert: false, readOnly: false, ref: function (elt) {
                _this.test = elt;
            } }));
    };
    ;
    TextareaFieldTestKarma.prototype.testOk = function () {
        assert.equal(1, 1);
        this.end();
    };
    ;
    TextareaFieldTestKarma.prototype.testExist = function () {
        textarea = this.renderIntoDocument(element, "main856");
        var area = document.querySelector('#main856 textarea[name="textarea"]');
        expect(area).to.exist;
        this.end();
    };
    ;
    TextareaFieldTestKarma.prototype.testCharNumber = function () {
        var _this = this;
        textarea = this.renderIntoDocument(element, "main856");
        var area = document.querySelector('#main856 textarea[name="textarea"]');
        var charLabel = document.querySelector('#main856 .textarea-character-value');
        this.triggerKeydownEvent(area, "m", 77, true);
        setTimeout(function () {
            expect(area.value).to.be.equal("m");
            expect(charLabel.innerHTML).to.be.equal("1 caractère");
            _this.triggerKeydownEvent(area, "m", 77, true);
            setTimeout(function () {
                expect(area.value).to.be.equal("mm");
                expect(charLabel.innerHTML).to.be.equal("2 caractère");
                _this.end();
            }, 250);
        }, 250);
    };
    ;
    TextareaFieldTestKarma.prototype.testAffichageAlerte = function () {
        var _this = this;
        textarea = this.renderIntoDocument(element, "main857");
        var area = document.querySelector('#main857 textarea[name="textarea"]');
        var charLabel = document.querySelector('#main857 .textarea-character-value');
        var i;
        for (i = 0; i < 256; i++) {
            this.triggerKeydownEvent(area, "m", 77, true);
        }
        setTimeout(function () {
            expect(charLabel.innerHTML).to.be.equal("256 caractère");
            var alert = document.querySelector('.widget-alert-body');
            expect(alert).to.exist;
            var alertOk = document.querySelector(".widget-dialogue-footer #alertOK");
            expect(alertOk).to.exist;
            alertOk.click();
            _this.end();
        }, 250);
    };
    ;
    TextareaFieldTestKarma.prototype.testNonAffichageAlerte = function () {
        var _this = this;
        textarea = this.renderIntoDocument(element2, "main858");
        var area = document.querySelector('#main858 textarea[name="textarea"]');
        var charLabel = document.querySelector('#main858 .textarea-character-value');
        var i;
        for (i = 0; i < 256; i++) {
            this.triggerKeydownEvent(area, "m", 77, true);
        }
        setTimeout(function () {
            var alert = document.querySelector('.widget-alert-body');
            expect(alert).to.be.null;
            _this.end();
        }, 250);
    };
    ;
    TextareaFieldTestKarma.prototype.testCharLabelClassName = function () {
        var _this = this;
        textarea = this.renderIntoDocument(element2, "main859");
        var area = document.querySelector('#main859 textarea[name="textarea"]');
        var i;
        for (i = 0; i < 256; i++) {
            this.triggerKeydownEvent(area, "m", 77, true);
        }
        setTimeout(function () {
            var charLabel = document.querySelector('#main859 .textarea-character-value');
            var className = charLabel.className;
            expect(className).to.be.equals("textarea-character-value textarea-too-many-char");
            _this.end();
        }, 250);
    };
    ;
    /*****************************************************/
    TextareaFieldTestKarma.prototype.handleChangeValueOnElement = function (changeValue, element, valueKey) {
        if (changeValue) {
            element.value = element.value + valueKey;
            ReactTestUtils.Simulate.change(element);
        }
    };
    /**
     * Fonction déclenchant un keydown event sur un élement du DOM
     * @param element element du DOM
     * @param valueKey valeur "print" de la touche
     * @param keyCode
     * @param changeValue
     */
    TextareaFieldTestKarma.prototype.triggerKeydownEvent = function (element, valueKey, keyCode, changeValue) {
        ReactTestUtils.Simulate.keyDown(element, { key: valueKey, keyCode: keyCode, which: keyCode });
        this.handleChangeValueOnElement(changeValue, element, valueKey);
    };
    tslib_1.__decorate([
        decorators_1.Decorators.beforeEach,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], TextareaFieldTestKarma.prototype, "beforeEach", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it('Test OK'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], TextareaFieldTestKarma.prototype, "testOk", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it('Test de l\' existence du textarea'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], TextareaFieldTestKarma.prototype, "testExist", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it('Test du compte de caractère'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], TextareaFieldTestKarma.prototype, "testCharNumber", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it('Test de l`activation de l\'alerte'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], TextareaFieldTestKarma.prototype, "testAffichageAlerte", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it('Test de non activation de l\'alerte'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], TextareaFieldTestKarma.prototype, "testNonAffichageAlerte", null);
    tslib_1.__decorate([
        decorators_1.Decorators.it('Test du className du charLabel'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], TextareaFieldTestKarma.prototype, "testCharLabelClassName", null);
    TextareaFieldTestKarma = tslib_1.__decorate([
        decorators_1.Decorators.describe("Test Karma textarea-field")
    ], TextareaFieldTestKarma);
    return TextareaFieldTestKarma;
}(base_test_1.BaseTest));
//lancement des Tests
test_run_1.runTest(new TextareaFieldTestKarma());

//# sourceMappingURL=textarea-field.test.karma.js.map
