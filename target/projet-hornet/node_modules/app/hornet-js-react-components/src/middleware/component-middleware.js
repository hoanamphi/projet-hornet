"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var middlewares_1 = require("hornet-js-core/src/middleware/middlewares");
var React = require("react");
var ReactDOMServer = require("react-dom/server");
var abstract_routes_1 = require("hornet-js-core/src/routes/abstract-routes");
var base_error_1 = require("hornet-js-utils/src/exception/base-error");
var business_error_1 = require("hornet-js-utils/src/exception/business-error");
var technical_error_1 = require("hornet-js-utils/src/exception/technical-error");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var _ = require("lodash");
// ------------------------------------------------------------------------------------------------------------------- //
//                                      PageRenderingMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var PageRenderingMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(PageRenderingMiddleware, _super);
    function PageRenderingMiddleware(config) {
        var _this = _super.call(this, function (req, res, next) {
            try {
                var routeInfos = hornet_js_utils_1.Utils.getCls("hornet.routeInfos");
                // route de type 'PAGE' uniquement
                if (hornet_js_utils_1.Utils.getContinuationStorage().get("hornet.routeType") === abstract_routes_1.RouteType.PAGE) {
                    var pageRouteInfos = routeInfos;
                    //On expose la sérialisation de la conf aux clients
                    var clientConfig = {
                        shared: hornet_js_utils_1.Utils.config.getOrDefault("shared", ""),
                        themeUrl: hornet_component_1.HornetComponent.genUrlTheme(),
                        themeHost: hornet_js_utils_1.Utils.config.getIfExists("themeHost"),
                        themeName: hornet_js_utils_1.Utils.config.get("themeName"),
                        fullSpa: hornet_js_utils_1.Utils.config.getOrDefault("fullSpa", {
                            "enabled": false,
                            "host": "",
                            "name": "/services"
                        }),
                        contextPath: hornet_js_utils_1.Utils.config.getOrDefault("contextPath", ""),
                        request: hornet_js_utils_1.Utils.config.getIfExists("request"),
                        logClient: hornet_js_utils_1.Utils.config.getOrDefault("logClient", {}),
                        welcomePage: hornet_js_utils_1.Utils.config.getOrDefault("welcomePage", "/")
                    };
                    res.expose(clientConfig, "Config");
                    // On expose au client les informations de l"application courante
                    res.expose(hornet_js_utils_1.Utils.appSharedProps.dehydrate(), "AppSharedProps");
                    // On expose au client le mode de façon dynamique
                    res.expose(process.env.NODE_ENV, "Mode");
                    // On expose le CLS sans ce qui est spécifique serveur
                    var cls = _.clone(hornet_js_utils_1.Utils.getContinuationStorage().active);
                    delete cls["hornet.request"];
                    delete cls["hornet.response"];
                    delete cls["hornet.routeInfos"];
                    delete cls["hornet.routeAuthorization"];
                    var sessionData = req.getSession().getData();
                    for (var i in sessionData) {
                        cls[i] = sessionData[i];
                    }
                    res.expose(cls, "HornetCLS");
                    PageRenderingMiddleware.logger.trace("renderToString");
                    var htmlApp = ReactDOMServer.renderToString(React.createFactory((_this.config || middlewares_1.AbstractHornetMiddleware.APP_CONFIG).appComponent)({
                        content: pageRouteInfos.getViewComponent()
                    }));
                    // On rend la page entière en y intégrant l"appComponent rendu précédemment
                    var html = ReactDOMServer.renderToStaticMarkup(React.createFactory((_this.config || middlewares_1.AbstractHornetMiddleware.APP_CONFIG).layoutComponent)({
                        content: htmlApp,
                        state: res.locals.state
                    }));
                    res.send("<!DOCTYPE html>" + html);
                    res.end();
                }
            }
            catch (e) {
                next(e);
            }
            finally {
                next();
            }
        }, null, config) || this;
        return _this;
    }
    PageRenderingMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.middleware.PageRenderingMiddleware");
    return PageRenderingMiddleware;
}(middlewares_1.AbstractHornetSubMiddleware));
exports.PageRenderingMiddleware = PageRenderingMiddleware;
// ------------------------------------------------------------------------------------------------------------------- //
//                                      UnmanagedViewErrorMiddleware
// ------------------------------------------------------------------------------------------------------------------- //
var UnmanagedViewErrorMiddleware = /** @class */ (function (_super) {
    tslib_1.__extends(UnmanagedViewErrorMiddleware, _super);
    function UnmanagedViewErrorMiddleware(config) {
        var _this = _super.call(this, function (err, req, res, next) {
            // route de type 'PAGE' uniquement
            if (hornet_js_utils_1.Utils.getCls("hornet.routeType") === abstract_routes_1.RouteType.PAGE) {
                sanitizeErrorThrownInDomain(err);
                if (!(err instanceof base_error_1.BaseError)) {
                    err = new technical_error_1.TechnicalError("ERR_TECH_UNKNOWN", { errorMessage: err.message }, err);
                }
                if (err instanceof technical_error_1.TechnicalError) {
                    UnmanagedViewErrorMiddleware.logger.error("ERREUR technique [" + err.code + "] - reportId [" + err.reportId + "] : ", err);
                }
                else if (err instanceof business_error_1.BusinessError) {
                    UnmanagedViewErrorMiddleware.logger.error("ERREUR métier [" + err.code + "] - : ", err);
                }
                else {
                    UnmanagedViewErrorMiddleware.logger.error("ERREUR [" + err.code + "] - : ", err);
                }
                hornet_js_utils_1.Utils.getContinuationStorage().set("hornet.currentError", err);
                var htmlApp = ReactDOMServer.renderToString(React.createFactory((_this.config || middlewares_1.AbstractHornetMiddleware.APP_CONFIG).appComponent)({
                    content: (_this.config || middlewares_1.AbstractHornetMiddleware.APP_CONFIG).errorComponent
                }));
                // On rend la page entière en y intégrant l"appComponent rendu précédemment
                var html = ReactDOMServer.renderToStaticMarkup(React.createFactory((_this.config || middlewares_1.AbstractHornetMiddleware.APP_CONFIG).layoutComponent)({
                    content: htmlApp,
                    state: res.locals.state,
                    nojavascript: true
                }));
                if (err.status && typeof err.status === "number") {
                    res.status(err.status);
                }
                else {
                    res.status(500);
                }
                res.send("<!DOCTYPE html>" + html);
                res.end();
            }
            else {
                next(err);
            }
        }, null, config) || this;
        return _this;
    }
    UnmanagedViewErrorMiddleware.logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.middleware.UnmanagedViewErrorMiddleware");
    return UnmanagedViewErrorMiddleware;
}(middlewares_1.AbstractHornetSubMiddleware));
exports.UnmanagedViewErrorMiddleware = UnmanagedViewErrorMiddleware;
function sanitizeErrorThrownInDomain(error) {
    if (error) {
        delete error["error@context"];
        delete error["domain"];
    }
}

//# sourceMappingURL=component-middleware.js.map
