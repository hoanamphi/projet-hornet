"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var hornet_js_utils_1 = require("hornet-js-utils");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var hornet_superagent_1 = require("hornet-js-core/src/services/hornet-superagent");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.widget.notification.notification-message-item");
var notifyDesktop = function (message) {
    logger.debug("notifyBesktop");
    // le navigateur supporte les notifications
    if (!("Notification" in window)) {
        logger.warn("This browser does not support desktop notification");
        return;
    }
    // La permission a déjà été donnée
    if (Notification.permission === "granted") {
        return new Notification(message);
    }
    // Besoin de demander la permission
    if (Notification.permission !== "denied") {
        Notification.requestPermission(function (permission) {
            if (permission === "granted") {
                return new Notification(message);
            }
        });
    }
};
var SessionExpireNotification = /** @class */ (function (_super) {
    tslib_1.__extends(SessionExpireNotification, _super);
    function SessionExpireNotification(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.listen(hornet_superagent_1.SESSION_REFRESHED_NOTIFICATION_EVENT, _this.handleRefresh);
        _this.listen(hornet_superagent_1.SESSION_WILL_EXPIRE_START_NOTIFICATION_EVENT, _this.handleWillExpireStart);
        _this.listen(hornet_superagent_1.SESSION_WILL_EXPIRE_NOTIFICATION_EVENT, _this.handleWillExpire);
        return _this;
    }
    SessionExpireNotification.prototype.handleRefresh = function (ev) {
    };
    SessionExpireNotification.prototype.handleWillExpireStart = function (ev) {
    };
    SessionExpireNotification.prototype.handleWillExpire = function (ev) {
        var expireIn = ev.detail.value / 1000;
        notifyDesktop("Votre session expire dans " + expireIn + " seconde(s).");
    };
    SessionExpireNotification.prototype.render = function () {
        return null;
    };
    return SessionExpireNotification;
}(hornet_component_1.HornetComponent));
exports.SessionExpireNotification = SessionExpireNotification;

//# sourceMappingURL=notification-session.js.map
