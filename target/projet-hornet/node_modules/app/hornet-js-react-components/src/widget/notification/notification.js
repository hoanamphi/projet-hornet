"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var React = require("react");
var ReactDom = require("react-dom");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var notification_message_item_1 = require("hornet-js-react-components/src/widget/notification/notification-message-item");
var notification_events_1 = require("hornet-js-core/src/notification/notification-events");
var accordion_1 = require("hornet-js-react-components/src/widget/accordion/accordion");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.widget.notification.notification");
/**
 * Type d'erreur
 */
var notificationType;
(function (notificationType) {
    notificationType["ERROR"] = "error";
    notificationType["WARNING"] = "warning";
    notificationType["PERSONNALS"] = "personnal";
    notificationType["INFOS"] = "info";
    notificationType["EXCEPTION"] = "exception";
})(notificationType = exports.notificationType || (exports.notificationType = {}));
/**
 * Composant Notification
 */
var Notification = /** @class */ (function (_super) {
    tslib_1.__extends(Notification, _super);
    function Notification(props, context) {
        var _this = _super.call(this, props, context) || this;
        if (!Notification.started) {
            _this.listen(notification_events_1.ADD_NOTIFICATION_EVENT, function (ev) {
                var state = {};
                if (ev.detail.errors)
                    state.errors = ev.detail.errors.getNotifications();
                if (ev.detail.infos)
                    state.infos = ev.detail.infos.getNotifications();
                if (ev.detail.exceptions)
                    state.exceptions = ev.detail.exceptions;
                if (ev.detail.warnings)
                    state.warnings = ev.detail.warnings.getNotifications();
                if (ev.detail.personnals) {
                    state.personnals = ev.detail.personnals.getNotifications();
                    state.color = ev.detail.personnals.color;
                    state.logo = ev.detail.personnals.logo;
                }
                if (!ev.detail.id || !(ev.detail.id in Notification.INSTANCES)) {
                    ev.detail.id = Notification.ORDER[Notification.ORDER.length - 1];
                }
                Notification.INSTANCES[ev.detail.id].setState(state);
            });
            _this.listen(notification_events_1.CLEAN_NOTIFICATION_EVENT, function (ev) {
                if (!ev.detail.id) {
                    ev.detail.id = Notification.ORDER[Notification.ORDER.length - 1];
                }
                else if (Notification.INSTANCES[ev.detail.id]) {
                    Notification.INSTANCES[ev.detail.id].setState({
                        infos: null,
                        errors: null,
                        exceptions: null,
                        warnings: null,
                        personnals: null
                    });
                }
                else if (ev.detail.id) {
                    var idComponent = Notification.ORDER[Notification.ORDER.length - 1];
                    if (ev.detail.idComponent) {
                        idComponent = ev.detail.idComponent;
                    }
                    var messages_1 = [];
                    var currentNotification = Notification.INSTANCES[idComponent];
                    if (currentNotification && currentNotification.state) {
                        currentNotification.state.infos.map(function (message) {
                            if (message.id != ev.detail.id) {
                                messages_1.push(message);
                            }
                        });
                        currentNotification.setState({ infos: messages_1 });
                    }
                }
            });
            _this.listen(notification_events_1.CLEAN_ALL_NOTIFICATION_EVENT, function (ev) {
                for (var id in Notification.INSTANCES) {
                    _this.fire(notification_events_1.CLEAN_NOTIFICATION_EVENT.withData({ id: id, idComponent: undefined }));
                }
            });
            Notification.started = true;
        }
        return _this;
    }
    Notification.prototype.setInfos = function (infos) {
        this.fire(notification_events_1.ADD_NOTIFICATION_EVENT.withData({ id: this.state.id, infos: infos }));
    };
    Notification.prototype.setWarnings = function (warnings) {
        this.fire(notification_events_1.ADD_NOTIFICATION_EVENT.withData({ id: this.state.id, warnings: warnings }));
    };
    Notification.prototype.setErrors = function (errors) {
        this.fire(notification_events_1.ADD_NOTIFICATION_EVENT.withData({ id: this.state.id, errors: errors }));
    };
    Notification.prototype.setExceptions = function (exceptions) {
        this.fire(notification_events_1.ADD_NOTIFICATION_EVENT.withData({ id: this.state.id, exceptions: exceptions }));
    };
    /**
     * @inheritDoc
     */
    Notification.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", { id: this.state.id },
            React.createElement(NotificationContent, { errorsTitle: this.state.errorsTitle, errors: this.state.errors, warningsTitle: this.state.warningsTitle, warnings: this.state.warnings, personnalsTitle: this.state.personnalsTitle, personnals: this.state.personnals, infosTitle: this.state.infosTitle, infos: this.state.infos, exceptions: this.state.exceptions, color: this.state.color, logo: this.state.logo, ref: function (component) {
                    if (component === null) {
                        delete Notification.INSTANCES[_this.state.id];
                        var idx = Notification.ORDER.indexOf(_this.state.id);
                        Notification.ORDER.splice(idx, 1);
                    }
                    else {
                        if (_this.state.id in Notification.INSTANCES) {
                            var idx = Notification.ORDER.indexOf(_this.state.id);
                            Notification.ORDER.splice(idx, 1);
                        }
                        Notification.ORDER.push(_this.state.id);
                        Notification.INSTANCES[_this.state.id] = component;
                    }
                }, idComponent: this.props.id })));
    };
    Notification.started = false;
    Notification.INSTANCES = {};
    Notification.ORDER = [];
    Notification.defaultProps = {
        color: "black"
    };
    return Notification;
}(hornet_component_1.HornetComponent));
exports.Notification = Notification;
/**
 * Composant Contenu de Notification
 */
var NotificationContent = /** @class */ (function (_super) {
    tslib_1.__extends(NotificationContent, _super);
    function NotificationContent(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.listError = {};
        return _this;
    }
    NotificationContent.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        NotificationContent.firstRender = false;
        this.scrollToNotifications();
    };
    NotificationContent.prototype.componentDidUpdate = function (prevProps, prevState, prevContext) {
        _super.prototype.componentDidUpdate.call(this, prevProps, prevState, prevContext);
        if (prevState != this.state) {
            this.scrollToNotifications();
        }
        /** Si il y a des notifications de type erreurs, on place le focus sur 1 er champ */
        if (this.state.errors != prevState.errors) {
            if (this.state.errors && Array.isArray(this.state.errors) && this.state.errors.length > 0) {
                var element = document.getElementsByName(this.state.errors[0].field) ?
                    document.getElementsByName(this.state.errors[0].field)[0] :
                    document.getElementById(this.state.errors[0].field);
                if (element && element.focus) {
                    accordion_1.Accordion.handleFocusOnAccordion(element);
                    element.focus();
                }
                else {
                    logger.error("Impossible de mettre le focus sur l'élément", this.state.field);
                }
            }
        }
    };
    /**
     * Fait défiler la page courante de façon à afficher le bloc de notifications
     */
    NotificationContent.prototype.scrollToNotifications = function () {
        if (this.state.infos || this.state.errors || this.state.exceptions) {
            var element = ReactDom.findDOMNode(this);
            if (element && element.scrollIntoView) {
                element.scrollIntoView();
                //déplacement pour le sticky header
                window.scroll(window.scrollX, window.scrollY - 59);
            }
            else {
                logger.warn("Impossible de scroller sur les notifications.");
            }
        }
    };
    NotificationContent.prototype.exceptionStackDev = function (exception) {
        var stack;
        if (process.env.NODE_ENV !== "production") {
            var stackToPrint = (exception.err_cause && exception.err_cause.stack) || exception.stack;
            if (stackToPrint) {
                stack = (React.createElement("div", { className: "stack-dev" },
                    React.createElement("div", { className: "stack-dev-title" }, "Development Stacktrace : "),
                    stackToPrint.split("\n").map(function (stackLine) {
                        return React.createElement("div", { className: "stack-dev-line" }, stackLine);
                    })));
            }
        }
        return stack;
    };
    /**
    * Rendu d'un message
    * @returns {any}
    */
    NotificationContent.prototype.renderMessage = function (errors, notifType) {
        var _this = this;
        var idMessages = [];
        var generateMessage = function (exception, index) {
            var text = "";
            var stack;
            try {
                text = exception.message != null && exception.message !== "" ?
                    exception.message : _this.i18n("error.message." + exception.code, exception.args);
                stack = _this.exceptionStackDev(exception);
            }
            catch (e) {
                logger.error("Impossible de récupérer l'exception d'origine", e, "Exception d'origine : ", exception);
                text = e.message;
            }
            var messageItemKey = (exception.code) ? exception.code : "message-item-" + index;
            return React.createElement(notification_message_item_1.MessageItem, { key: messageItemKey, text: text, className: "error-message-text" }, stack);
        };
        var Messages = errors.map(function (message) {
            if (notifType === notificationType.EXCEPTION) {
                if (Array.isArray(message.message)) {
                    return message.message.map(generateMessage);
                }
                else {
                    return generateMessage(message, 0);
                }
            }
            else {
                idMessages.push(message.id);
                return React.createElement(notification_message_item_1.MessageItem, tslib_1.__assign({ key: message.id, anchor: message.anchor }, message, { className: notifType + "-message-text" }));
            }
        });
        var button;
        if (notifType != notificationType.INFOS) {
            button = React.createElement("button", { type: "button", className: "error-button-open", ref: function (btnError) { return (_this.btnError = btnError); }, onClick: this.handleClickShowError.bind(this), title: "Afficher/Masquer" }, "Afficher/Masquer");
        }
        else {
            button = React.createElement("button", { type: "button", className: "info-button", ref: function (btnInfo) { return (_this.btnInfo = btnInfo); }, onClick: this.handleClickRemove.bind(this, idMessages), title: "Supprimer" }, "Supprimer");
        }
        var CustomContainertStyle = (notifType == notificationType.PERSONNALS) ? { border: "0.063em solid " + this.state.color } : {};
        var CustomContentStyle = (notifType == notificationType.PERSONNALS) ? {
            color: this.state.color,
            backgroundImage: "url('" + this.state.logo + "')"
        } : {};
        var ulStyle = (notifType == notificationType.PERSONNALS) ? { color: this.state.color } : {};
        //on utilise la meme class css pour les errors et les exeptions
        notifType = (notifType === notificationType.EXCEPTION) ? "error" : notifType;
        return (React.createElement("section", null,
            React.createElement("div", { className: "messageBox " + notifType + "Box " + notifType + "-message", style: CustomContainertStyle },
                React.createElement("div", { ref: function (elt) {
                        _this.notif = elt;
                    } },
                    button,
                    React.createElement("h1", { className: "title" + notifType + " " + notifType + "-message-title", style: CustomContentStyle }, this._getTitle()),
                    React.createElement("ul", { style: ulStyle, className: notifType + "-message-list", ref: function (listError) {
                            if (listError && !_this.listError[_this.props.idComponent + notifType]) {
                                _this.listError[_this.props.idComponent + notifType] = listError;
                                _this.width = listError.clientWidth;
                            }
                        } }, Messages)))));
    };
    /**
     * @inheritDoc
     */
    NotificationContent.prototype.render = function () {
        return (React.createElement("span", null,
            (this.state.exceptions && this.state.exceptions.length > 0) ? this.renderMessage(this.state.exceptions, notificationType.EXCEPTION) : null,
            (this.state.errors && this.state.errors.length > 0) ? this.renderMessage(this.state.errors, notificationType.ERROR) : null,
            (this.state.warnings && this.state.warnings.length > 0) ? this.renderMessage(this.state.warnings, notificationType.WARNING) : null,
            (this.state.infos && this.state.infos.length > 0) ? this.renderMessage(this.state.infos, notificationType.INFOS) : null,
            (this.state.personnals && this.state.personnals.length > 0) ? this.renderMessage(this.state.personnals, notificationType.PERSONNALS) : null));
    };
    /**
     * Affiche le titre de la notification
     */
    NotificationContent.prototype._getTitle = function () {
        if (this.state.infos) {
            return this.state.infosTitle || this.i18n("notification.infosTitle");
        }
        if (this.state.warnings) {
            return this.state.warningsTitle || this.i18n("notification.warningsTitle");
        }
        if (this.state.personnals) {
            return (this.state.personnalsTitle) || this.i18n("notification.personnalsTitle");
        }
        if (this.state.errors || this.state.exceptions) {
            return this.state.errorsTitle || this.i18n("notification.errorsTitle");
        }
    };
    /**
     * Affiche/Masque les erreurs dans la zone de notification
     *
     */
    NotificationContent.prototype.handleClickShowError = function (e) {
        //change l'orientation de la fleche
        if (this.btnError && this.btnError.classList.contains("error-button-open")) {
            this.btnError.classList.add("error-button-close");
            this.btnError.classList.remove("error-button-open");
        }
        else {
            this.btnError.classList.add("error-button-open");
            this.btnError.classList.remove("error-button-close");
        }
        // affiche ou masque la liste
        if (this.listError) {
            var errorList = this.listError[this.props.idComponent + notificationType.ERROR] || this.listError[this.props.idComponent + notificationType.PERSONNALS]
                || this.listError[this.props.idComponent + notificationType.WARNING];
            if (errorList && errorList.classList && errorList.classList.contains("close")) {
                errorList.classList.remove("close");
            }
            else {
                errorList.classList.add("close");
            }
        }
        this.notif.style.width = this.width + "px";
    };
    /**
     * Suppression de la notification success(info)
     * @param items
     */
    NotificationContent.prototype.handleClickRemove = function (items) {
        var _this = this;
        items.map(function (id) {
            _this.fire(notification_events_1.CLEAN_NOTIFICATION_EVENT.withData({ id: id, idComponent: _this.props.idComponent }));
        });
    };
    NotificationContent.firstRender = true;
    return NotificationContent;
}(hornet_component_1.HornetComponent));

//# sourceMappingURL=notification.js.map
