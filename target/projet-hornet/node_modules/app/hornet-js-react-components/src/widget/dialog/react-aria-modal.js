"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var React = require("react");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var ReactDOM = require("react-dom");
var _ = require("lodash");
var key_codes_1 = require("hornet-js-components/src/event/key-codes");
var Draggable = require("react-draggable");
var tabbable = require("tabbable");
var noScroll = require("no-scroll");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.widget.dialog.react-aria-modal");
var ModalManager = /** @class */ (function () {
    function ModalManager() {
    }
    ModalManager.listen = function () {
        document.addEventListener("focus", ModalManager.checkFocus, true);
        document.addEventListener("click", ModalManager.checkClick, true);
        document.addEventListener("touchend", ModalManager.checkClick, true);
        document.addEventListener("keydown", ModalManager.checkKey, true);
        noScroll.on();
    };
    ModalManager.leave = function () {
        document.removeEventListener("focus", ModalManager.checkFocus, true);
        document.removeEventListener("click", ModalManager.checkClick, true);
        document.removeEventListener("touchend", ModalManager.checkClick, true);
        document.removeEventListener("keydown", ModalManager.checkKey, true);
        noScroll.off();
    };
    ModalManager.register = function (modal, opts) {
        if (ModalManager.modals.length === 0)
            ModalManager.listen();
        var oModal = {
            modal: modal,
            idx: modal.props.idx,
            node: ReactDOM.findDOMNode(modal),
            initialFocus: opts.initialFocus,
            escapeKeyFn: opts.escapeKeyFn,
            underlayClickFn: opts.underlayClickFn,
            manageFocus: opts.manageFocus,
            prevFocusedNode: document.activeElement
        };
        ModalManager.modals.push(oModal);
        ModalManager.active = oModal;
        if (opts.manageFocus) {
            var tabbableNodes = tabbable(oModal.node);
            var focusNode = void 0;
            if (typeof opts.initialFocus === "string") {
                focusNode = document.querySelector(opts.initialFocus);
                if (!focusNode)
                    logger.warn("La prop 'initialFocus' ne correspond à aucun noeud DOM > tentative de mettre le focus sur le 1er élement tabulable");
            }
            else {
                focusNode = opts.initialFocus;
            }
            if (!focusNode) {
                focusNode = tabbableNodes[0];
                if (!focusNode)
                    logger.warn("Impossible de donner le focus à un élément de la modale, aucun élément tabulable trouvé");
            }
            if (focusNode)
                focusNode.focus();
        }
    };
    ModalManager.unregister = function (modal) {
        if (ModalManager.modals.length === 1)
            ModalManager.leave();
        var oModal = _.remove(ModalManager.modals, function (obj) {
            return obj.modal === modal;
        });
        if (ModalManager.modals.length > 0) {
            var maxIdx_1 = -1;
            ModalManager.modals.forEach(function (mObj) {
                maxIdx_1 = Math.max(maxIdx_1, mObj.idx);
            });
            var modalPos = _.findIndex(ModalManager.modals, function (mObj) {
                return mObj.idx === maxIdx_1;
            });
            ModalManager.active = ModalManager.modals[modalPos];
        }
        setTimeout(function () {
            /* L'attribut prevFocusedNode n'est pas forcément valorisé : en particulier sous IE, au moment de l'appel à
             * register(), document.activeElement peut être indéfini */
            if (oModal[0].prevFocusedNode) {
                oModal[0].prevFocusedNode.focus();
            }
        }, 0);
    };
    ModalManager.checkFocus = function (e) {
        if (!ModalManager.active.manageFocus)
            return;
        var tabbableNodes = tabbable(ModalManager.active.node);
        if (ModalManager.active.node.contains(e.target))
            return;
        tabbableNodes[0].focus();
    };
    ModalManager.checkClick = function (e) {
        if (ModalManager.active.node.contains(e.target))
            return;
        e.preventDefault();
        e.stopImmediatePropagation();
        if (ModalManager.active.underlayClickFn)
            ModalManager.active.underlayClickFn();
    };
    ModalManager.checkKey = function (e) {
        if (ModalManager.active.manageFocus && (e.key === "Tab" || e.keyCode === key_codes_1.KeyCodes.TAB)) {
            e.preventDefault();
            var tabbableNodes = tabbable(ModalManager.active.node);
            var currentFocusIndex = tabbableNodes.indexOf(e.target);
            var lastTabbableNode = tabbableNodes[tabbableNodes.length - 1];
            var firstTabbableNode = tabbableNodes[0];
            if (e.shiftKey) {
                if (e.target === firstTabbableNode) {
                    lastTabbableNode.focus();
                    return;
                }
                tabbableNodes[currentFocusIndex - 1].focus(0);
                return;
            }
            if (e.target === lastTabbableNode) {
                firstTabbableNode.focus();
                return;
            }
            tabbableNodes[currentFocusIndex + 1].focus();
        }
        if (e.key === "Escape" || e.key === "Esc" || e.keyCode === key_codes_1.KeyCodes.ESCAPE) {
            if (ModalManager.active.escapeKeyFn)
                ModalManager.active.escapeKeyFn();
        }
    };
    ModalManager.modals = [];
    return ModalManager;
}());
var ReactAriaModalUnderlay = /** @class */ (function (_super) {
    tslib_1.__extends(ReactAriaModalUnderlay, _super);
    function ReactAriaModalUnderlay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReactAriaModalUnderlay.prototype.render = function () {
        var style = {
            position: "fixed",
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            zIndex: 5000 + this.state.idx,
            overflowX: "hidden",
            overflowY: "auto",
            WebkitOverflowScrolling: "touch"
        };
        if (this.state.underlayColor)
            style["background"] = this.state.underlayColor;
        if (this.state.underlayClickExits)
            style["cursor"] = "pointer";
        return (React.createElement("div", { className: this.state.underlayClass, style: style }, React.cloneElement(this.state.children, { ref: "dialog" })));
    };
    return ReactAriaModalUnderlay;
}(hornet_component_1.HornetComponent));
var ReactAriaModalDialog = /** @class */ (function (_super) {
    tslib_1.__extends(ReactAriaModalDialog, _super);
    function ReactAriaModalDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReactAriaModalDialog.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        ModalManager.register(this, {
            manageFocus: this.state.manageFocus,
            initialFocus: this.state.initialFocus,
            underlayClickFn: this.state.underlayClickExits ? this.state.onExit : null,
            escapeKeyFn: this.state.escapeKeyExits ? this.state.onExit : null
        });
    };
    ReactAriaModalDialog.prototype.componentWillUnmount = function () {
        _super.prototype.componentWillUnmount.call(this);
        ModalManager.unregister(this);
    };
    ReactAriaModalDialog.prototype.render = function () {
        var transformValue = (this.state.verticallyCenter) ? "translate(-50%, -50%)" : "translateX(-50%)";
        var topValue = (this.state.verticallyCenter) ? "50%" : "0";
        var style = {
            position: "absolute",
            left: this.state.isDraggable ? "40%" : "50%",
            top: this.state.isDraggable ? "35%" : topValue,
            margin: "auto",
            maxWidth: "100%",
            maxHeight: "90%",
            WebkitTransform: transformValue,
            transform: transformValue,
            cursor: "default",
            outline: this.state.focusDialog ? 0 : undefined
        };
        var props = null;
        var modal = (React.createElement("div", { role: this.state.alert ? "alertdialog" : "dialog", "aria-labelledby": "dialogue-title", "aria-describedby": "dialogue-body-content", "aria-label": this.state.titleText, id: this.state.dialogId, className: this.state.dialogClass + " dialog-content-alert", style: style, onClick: this.onClick, tabIndex: this.state.focusDialog ? -1 : undefined }, this.state.children));
        // if is draggable modal
        if (this.state.isDraggable) {
            props = {
                "bounds": "html",
                "handle": ".widget-dialogue-title"
            };
            return (React.createElement(Draggable, tslib_1.__assign({}, props), modal));
        }
        // if not
        return (React.createElement("div", tslib_1.__assign({}, props), modal));
    };
    /**
     * limite levent click au composant modal
     */
    ReactAriaModalDialog.prototype.onClick = function (evt) {
        if (evt.stopPropagation) {
            evt.stopPropagation();
        }
        if (evt.cancelBubble) {
            evt.cancelBubble = true;
        }
        evt.nativeEvent.stopImmediatePropagation();
    };
    return ReactAriaModalDialog;
}(hornet_component_1.HornetComponent));
var ReactAriaModal = /** @class */ (function (_super) {
    tslib_1.__extends(ReactAriaModal, _super);
    function ReactAriaModal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReactAriaModal.prototype.renderModal = function () {
        if (!this.state.container)
            this.state.container = document.createElement("div");
        if (!this.state.idx)
            this.state.idx = ++ReactAriaModal.number;
        var nProps = {};
        for (var prop in this.props) {
            nProps[prop] = this.props[prop];
        }
        //this.state.idx = this.state.idx;
        nProps["idx"] = this.state.idx;
        if (!this.state.firstRender) {
            document.body.appendChild(this.state.container);
            this.state.firstRender = true;
        }
        /* On est obligé de forcer le passage du contexte (context={(this.context)}) car ces composants sont créés en tant que
         noeuds fils du conteneur dom, qui n'a pas de contexte react. */
        ReactDOM.render((React.createElement(ReactAriaModalUnderlay, tslib_1.__assign({}, nProps, { context: (this.context) }),
            React.createElement(ReactAriaModalDialog, tslib_1.__assign({}, nProps, { context: (this.context) }), this.state.children))), this.state.container);
    };
    ReactAriaModal.prototype.removeModal = function () {
        if (this.state.container) {
            ReactDOM.unmountComponentAtNode(this.state.container);
            this.state.container.parentNode.removeChild(this.state.container);
            this.state.firstRender = false;
            delete this.state.container;
        }
    };
    ReactAriaModal.prototype.render = function () {
        return null;
    };
    ReactAriaModal.prototype.componentWillMount = function () {
        _super.prototype.componentWillMount.call(this);
        if (!this.state.titleText && !this.state.titleId) {
            throw new Error("react-aria-modal instances should have a `titleText` or `titleId`");
        }
    };
    ReactAriaModal.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        if (this.state.mounted) {
            this.renderModal();
            if (this.state.onShow) {
                this.state.onShow();
            }
        }
    };
    ReactAriaModal.prototype.componentDidUpdate = function (prevProps, prevState, prevContext) {
        _super.prototype.componentDidUpdate.call(this, prevProps, prevState, prevContext);
        if (prevProps.mounted && !this.state.mounted) {
            this.removeModal();
        }
        else if (this.state.mounted) {
            this.renderModal();
            if (this.state.onShow) {
                this.state.onShow();
            }
        }
    };
    ReactAriaModal.prototype.componentWillUnmount = function () {
        _super.prototype.componentWillUnmount.call(this);
        this.removeModal();
    };
    ReactAriaModal.defaultProps = {
        mounted: true,
        manageFocus: true,
        underlayClickExits: false,
        underlayColor: "rgba(0,0,0,0.5)",
        escapeKeyExits: false,
        isDraggable: false
    };
    ReactAriaModal.number = 0;
    return ReactAriaModal;
}(hornet_component_1.HornetComponent));
exports.ReactAriaModal = ReactAriaModal;

//# sourceMappingURL=react-aria-modal.js.map
