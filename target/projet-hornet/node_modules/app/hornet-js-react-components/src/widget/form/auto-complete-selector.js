"use strict";
/**
 * Copyright ou © ou Copr. Ministère de l'Europe et des Affaires étrangères (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * Ce logiciel est un programme informatique servant à faciliter la création
 * d'applications Web conformément aux référentiels généraux français : RGI, RGS et RGAA
 * <p/>
 * Ce logiciel est régi par la licence CeCILL soumise au droit français et
 * respectant les principes de diffusion des logiciels libres. Vous pouvez
 * utiliser, modifier et/ou redistribuer ce programme sous les conditions
 * de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA
 * sur le site "http://www.cecill.info".
 * <p/>
 * En contrepartie de l'accessibilité au code source et des droits de copie,
 * de modification et de redistribution accordés par cette licence, il n'est
 * offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
 * seule une responsabilité restreinte pèse sur l'auteur du programme,  le
 * titulaire des droits patrimoniaux et les concédants successifs.
 * <p/>
 * A cet égard  l'attention de l'utilisateur est attirée sur les risques
 * associés au chargement,  à l'utilisation,  à la modification et/ou au
 * développement et à la reproduction du logiciel par l'utilisateur étant
 * donné sa spécificité de logiciel libre, qui peut le rendre complexe à
 * manipuler et qui le réserve donc à des développeurs et des professionnels
 * avertis possédant  des  connaissances  informatiques approfondies.  Les
 * utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
 * logiciel à leurs besoins dans des conditions permettant d'assurer la
 * sécurité de leurs systèmes et ou de leurs données et, plus généralement,
 * à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
 * <p/>
 * Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
 * pris connaissance de la licence CeCILL, et que vous en avez accepté les
 * termes.
 * <p/>
 * <p/>
 * Copyright or © or Copr. Ministry for Europe and Foreign Affairs (2017)
 * <p/>
 * pole-architecture.dga-dsi-psi@diplomatie.gouv.fr
 * <p/>
 * This software is a computer program whose purpose is to facilitate creation of
 * web application in accordance with french general repositories : RGI, RGS and RGAA.
 * <p/>
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * <p/>
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 * <p/>
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 * <p/>
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * hornet-js-react-components - Ensemble des composants web React de base de hornet-js
 *
 * @author MEAE - Ministère de l'Europe et des Affaires étrangères
 * @version v5.1.1
 * @link git+https://github.com/diplomatiegouvfr/hornet-js.git
 * @license CECILL-2.1
 */
var hornet_js_utils_1 = require("hornet-js-utils");
var classNames = require("classnames");
var _ = require("lodash");
var hornet_component_1 = require("hornet-js-react-components/src/widget/component/hornet-component");
var checkbox_1 = require("hornet-js-react-components/src/widget/form/checkbox");
var auto_complete_state_1 = require("hornet-js-react-components/src/widget/form/auto-complete-state");
var React = require("react");
var logger = hornet_js_utils_1.Utils.getLogger("hornet-js-react-components.widget.form.auto-complete-selector");
/**
 * Liste de choix de l'auto completion
 */
var AutoCompleteSelector = /** @class */ (function (_super) {
    tslib_1.__extends(AutoCompleteSelector, _super);
    function AutoCompleteSelector(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.noResultLabelDefault = AutoCompleteSelector.getI18n("form.autoCompleteField.noResultLabel");
        _this.state.maxLengthItem = 0;
        _this.props.autoCompleteState.on(auto_complete_state_1.AutoCompleteState.FOCUS_CHANGE_EVENT, _this.handleFocus);
        _this.liElts = [];
        _this.liReact = [];
        _this.choicesSelected = [];
        return _this;
    }
    AutoCompleteSelector.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
        _super.prototype.componentWillUpdate.call(this, nextProps, nextState, nextContext);
        return true;
    };
    // Setters
    AutoCompleteSelector.prototype.setChoices = function (value, callback) {
        this.setState({ choices: value }, callback);
        return this;
    };
    AutoCompleteSelector.prototype.setOnOptionSelected = function (value, callback) {
        this.setState({ onOptionSelected: value }, callback);
        return this;
    };
    AutoCompleteSelector.prototype.setCurrentTypedText = function (currentTypedText, callback) {
        this.setState({ currentTypedText: currentTypedText }, callback);
        return this;
    };
    AutoCompleteSelector.prototype.setCurrentIndex = function (value, callback) {
        this.setState({ currentIndex: value }, callback);
        return this;
    };
    AutoCompleteSelector.prototype.setSelectorId = function (value, callback) {
        this.setState({ selectorId: value }, callback);
        return this;
    };
    AutoCompleteSelector.prototype.setShowComponent = function (value, callback) {
        this.setState({ showComponent: value }, callback);
        return this;
    };
    /**
     * Fonction appelée lors du click sur un élément de la liste
     **/
    AutoCompleteSelector.prototype.onListClick = function (event, choice) {
        event.preventDefault();
        this.state.onListClick = true;
        return this.state.onOptionSelected(event, choice);
    };
    AutoCompleteSelector.prototype.onListClickMulti = function (event, index, choice) {
        event.stopPropagation();
        event.preventDefault();
        if (event.button == 0) {
            this.state.onListClick = true;
            return this.state.onOptionSelected(event, choice);
        }
    };
    /**
     * Fonction appelée pour scroller de un item vers le bas
     * @param {HTMLElement} element la liste déroulante
     * @param {HTMLElement} checkedElement l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.scrollDown = function (element, checkedElement) {
        element.scrollTop += ((checkedElement.offsetTop + checkedElement.offsetHeight) - ((element.scrollTop ? element.scrollTop : 5) + element.offsetHeight)) + 5;
    };
    /**
     * Fonction appelée pour scroller de un item vers le haut
     * @param {HTMLElement} element la liste déroulante
     * @param {HTMLElement} checkedElement l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.scrollUp = function (element, checkedElement) {
        element.scrollTop -= (((element.scrollTop ? element.scrollTop : 5) - checkedElement.offsetTop + 5));
    };
    /**
     * Fonction appelée pour scroller au début de la liste
     * @param {HTMLElement} element la liste déroulante
     **/
    AutoCompleteSelector.prototype.scrollToBegin = function (element) {
        element.scrollTop = 0;
    };
    /**
     * Fonction appelée pour scroller à la toute fin de la liste
     * @param {HTMLElement} element la liste déroulante
     * @param {HTMLElement} checkedElement l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.scrollToEnd = function (element, checkedElement) {
        element.scrollTop = element.offsetHeight - checkedElement.offsetHeight;
    };
    /**
     * Fonction appelée tester si la position de l'élément est en amont dans la liste
     * @param {HTMLElement} element la liste déroulante
     * @param {HTMLElement} checkedElement l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.isBefore = function (element, checkedElement) {
        return (checkedElement.offsetTop < (element.scrollTop ? element.scrollTop : 5));
    };
    /**
     * Fonction appelée tester si la position de l'élément est en aval dans la liste
     * @param {HTMLElement} element la liste déroulante
     * @param {HTMLElement} checkedElement l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.isAfter = function (element, checkedElement) {
        return (checkedElement.offsetTop + checkedElement.offsetHeight >= (element.scrollTop ? element.scrollTop : 5) + element.offsetHeight);
    };
    /**
     * Fonction appelée la taille  de l'écart
     * @param {HTMLElement} element la liste déroulante
     * @param {HTMLElement} checkedElement l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.hasBigGap = function (element, checkedElement) {
        return Math.abs(checkedElement.offsetTop - (element.scrollTop ? element.scrollTop : 5)) > element.offsetHeight;
    };
    /**
     * Fonction appelée pour position la liste directement sur l'élément
     * @param {HTMLElement} element la liste déroulante
     * @param {HTMLElement} checkedElement l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.goToElement = function (element, checkedElement) {
        element.scrollTop = checkedElement.offsetTop - 5;
    };
    /**
     * Fonction appelée pour scroller vers un élément
     * @param {HTMLElement} checkedElement l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.scrollToElement = function (checkedElement) {
        var element = document.getElementById(this.state.selectorId);
        if (this.isBefore(element, checkedElement)) {
            if (this.hasBigGap(element, checkedElement)) {
                this.goToElement(element, checkedElement);
            }
            else {
                this.scrollUp(element, checkedElement);
            }
        }
        else if (this.isAfter(element, checkedElement)) {
            if (this.hasBigGap(element, checkedElement)) {
                this.goToElement(element, checkedElement);
            }
            else {
                this.scrollDown(element, checkedElement);
            }
        }
        this.setActive(checkedElement);
    };
    /**
     * Fonction appelée pour déselectionner
     **/
    AutoCompleteSelector.prototype.cleanActived = function () {
        var lastCheckedElement = document.querySelectorAll("#" + _.replace(this.state.selectorId, ".", "\\.") + " .autocomplete-item-active");
        if (lastCheckedElement) {
            _.forEach(lastCheckedElement, function (item) {
                item.className = "autocomplete-item";
            });
        }
    };
    /**
     * Fonction appelée pour activer un item
     * @param {HTMLElement} checkedElement l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.setActive = function (checkedElement) {
        this.cleanActived();
        if (checkedElement) {
            checkedElement.focus();
            checkedElement.className = "autocomplete-item autocomplete-item-active";
        }
    };
    /**
     * Fonction appelée pour scroller vers un élément par son id
     * @param {string} id l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.scrollToElementById = function (id) {
        var checkedElement = document.getElementById(id);
        this.scrollToElement(checkedElement);
    };
    /**
     * Lorsque l'element selectionné change, on scroll vers celui-ci
     */
    AutoCompleteSelector.prototype.componentDidUpdate = function () {
        this.cleanActived();
        var element = document.getElementById(this.state.selectorId);
        if (!this.state.onListClick) {
            if (this.state.autoCompleteState.choiceFocused !== undefined) {
                var idToScroll = this.state.selectorId + "_" + this.state.autoCompleteState.choiceFocused;
                var checkedElement = document.getElementById(idToScroll);
                this.setActive(checkedElement);
                if (checkedElement) {
                    checkedElement.className = "autocomplete-item autocomplete-item-active";
                    this.scrollToElement(checkedElement);
                }
            }
            else {
                element.scrollTop = 5;
            }
        }
        this.state.onListClick = false;
    };
    /**
     * Retourne le rendu de la liste de choix
     **/
    AutoCompleteSelector.prototype.renderOptionList = function () {
        var _this = this;
        logger.trace("render AutoCompleteSelector option list");
        var res = [];
        if (this.state.choices) {
            this.state.choices.forEach(function (choice, indexTab) {
                if (choice) {
                    var choiceTextFormatted = _.deburr(choice.text).toLowerCase();
                    var currentTextFormatted = _.deburr(_this.state.currentTypedText).toLowerCase();
                    var index = choiceTextFormatted.indexOf(currentTextFormatted);
                    if (index === -1) {
                        if (currentTextFormatted != "") {
                            return null;
                        }
                        else {
                            index = 0;
                        } // Valeur saisie non présente
                    }
                    var classes = {
                        "autocomplete-item": true,
                    };
                    var classList = classNames(classes);
                    var checkboxChecked = false;
                    res.push((React.createElement("li", { onMouseDown: !_this.props.readOnly && !_this.props.disabled ? function (event) { return _this.onListClick(event, choice); } : null, id: _this.state.selectorId + "_" + indexTab, className: classList, "aria-selected": _this.state.choicesSelected == choice.value, "data-real-value": choice.value, role: "option", key: "autocomplete-" + choice.text + "-" + choice.value, ref: function (liElt) {
                            if (liElt != null)
                                _this.liElts.push(liElt);
                        } },
                        choice.text ? choice.text.substring(0, index) : "",
                        React.createElement("b", null, _this.state.currentTypedText),
                        choice.text ? choice.text.substring(index + _this.state.currentTypedText.length) : "")));
                }
            });
        }
        return res;
    };
    /**
     * indique un clic sur une checkbox
     **/
    AutoCompleteSelector.prototype.multiClick = function (event) {
        this.state.onListClick = true;
    };
    /**
     * Retourne le rendu de la liste de choix
     **/
    AutoCompleteSelector.prototype.renderOptionMultipleList = function () {
        var _this = this;
        logger.trace("render AutoCompleteSelector option multiple");
        var res = [];
        if (this.state.choices) {
            this.state.choices.forEach(function (choice, indexTab) {
                if (choice) {
                    var choiceTextFormatted = _.deburr(choice.text).toLowerCase();
                    var currentTextFormatted = _.deburr(_this.state.currentTypedText).toLowerCase();
                    var index = choiceTextFormatted.indexOf(currentTextFormatted);
                    if (index === -1)
                        return null; // Valeur saisie non présente
                    var classes = {
                        "autocomplete-item": true,
                        "autocomplete-item-active": _this.props.autoCompleteState.choiceFocused === indexTab
                    };
                    var checkboxChecked = false;
                    if (_.indexOf(_this.props.choicesSelected, choice.value.toString()) > -1) {
                        checkboxChecked = true;
                    }
                    var classList = classNames(classes);
                    res.push((React.createElement("li", { onMouseDown: !_this.props.readOnly && !_this.props.disabled ? function (e) { _this.onListClickMulti(e, indexTab, choice); } : null, id: _this.state.selectorId + "_" + indexTab, onKeyDown: !_this.props.readOnly && !_this.props.disabled ? function (e) {
                            _this.onListClickMulti(e, indexTab, choice);
                        } : null, className: classList, "data-real-value": choice.value, role: "option", "aria-selected": checkboxChecked, key: "autocomplete-" + choice.text + "-" + choice.value, ref: function (liElt) {
                            if (liElt != null)
                                _this.liElts.push(liElt);
                        } },
                        React.createElement(checkbox_1.CheckBox, { id: "autocomplete-selector-checkbox-" + indexTab, key: "autocomplete-selector-checkbox-" + indexTab + "-" + checkboxChecked, checked: checkboxChecked, label: choice.text, onChange: function () { }, readOnly: _this.props.readOnly, disabled: _this.props.disabled }))));
                }
            });
        }
        return res;
    };
    /**
     * @inheritDoc
     */
    AutoCompleteSelector.prototype.render = function () {
        logger.trace("render AutoCompleteSelector");
        this.liElts = [];
        this.liReact = (this.props.isMultiple) ? this.renderOptionMultipleList() : this.renderOptionList();
        // On construit le ul englobant
        var classes = {
            "autocomplete-selector": true,
            "widget-positioned": true,
            "autocomplete-selector-hidden": this.state.showComponent === false
        };
        var classList = classNames(classes);
        var styleUl = {
            "minWidth": "100%",
            "maxHeight": this.props.maxHeight ? this.props.maxHeight + "px" : "none"
        };
        if (this.props.maxHeight) {
            styleUl.overflow = "auto";
        }
        var classesContent = {
            "autocomplete-content-selector": true
        };
        var no_result = (React.createElement("div", { style: { fontStyle: "italic" } }, this.state.noResultLabel ? this.state.noResultLabel : this.noResultLabelDefault));
        var classContentList = classNames(classesContent);
        return (React.createElement("div", { className: classList },
            React.createElement("div", { className: classContentList },
                React.createElement("ul", { className: "autocomplete-selector-list", role: "listbox", id: this.state.selectorId, style: styleUl, "aria-multiselectable": this.props.isMultiple }, this.liReact.length > 0 ? this.liReact : no_result))));
    };
    /**
     * Fonction appelée pour scroller vers un élément
     * @param {number} oldChoiceFocused l'ancien indice de l'élément sélectionné
     * @param {number} newChoiceFocused l'indice de l'élément sélectionné
     * @param {string} value l'élément sélectionné
     * @param {number} index l'élément sélectionné
     **/
    AutoCompleteSelector.prototype.handleFocus = function (oldChoiceFocused, newChoiceFocused, value, index) {
        if (value && value.length > 0) {
            var elmt = document.querySelector("#" + _.replace(this.state.selectorId, ".", "\\.") + " [data-real-value='" + value + "']");
            if (elmt) {
                this.scrollToElement(elmt);
                var _index = _.findIndex(this.liElts, elmt);
                this.state.autoCompleteState.choiceFocused = _index;
                this.setFocusElement(elmt);
            }
        }
        else {
            if (newChoiceFocused !== undefined && newChoiceFocused != null && newChoiceFocused >= 0 && this.liElts.length > 0) {
                var elmt = this.liElts[newChoiceFocused];
                if (elmt && this.props.isMultiple) {
                    this.setFocusElement(elmt);
                }
                else {
                    if (elmt && (elmt.getAttribute("data-real-value") === value)) {
                        this.setFocusElement(elmt);
                    }
                }
            }
            else {
                this.scrollToBegin(document.getElementById(this.state.selectorId));
            }
        }
    };
    /**
     * Fonction appelée pour focus un item
     * @param {HTMLElement} elmt l'élément sélectionné à focus
     **/
    AutoCompleteSelector.prototype.setFocusElement = function (elmt) {
        this.scrollToElement(elmt);
    };
    AutoCompleteSelector.defaultProps = {
        onOptionSelected: function (event, choice) {
            event.preventDefault();
        },
        currentTypedText: "",
        showComponent: true,
        choices: [],
        readOnly: false,
        disabled: false
    };
    return AutoCompleteSelector;
}(hornet_component_1.HornetComponent));
exports.AutoCompleteSelector = AutoCompleteSelector;

//# sourceMappingURL=auto-complete-selector.js.map
