"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var hornet_sequelize_entity_1 = require("hornet-js-database/src/sequelize/hornet-sequelize-entity");
var technical_error_1 = require("hornet-js-utils/src/exception/technical-error");
var codes_error_1 = require("hornet-js-utils/src/exception/codes-error");
var Entity = /** @class */ (function () {
    function Entity() {
    }
    Entity.idName = "";
    Entity.entityName = "";
    return Entity;
}());
exports.Entity = Entity;
var HornetSequelizeEntityDao = /** @class */ (function (_super) {
    tslib_1.__extends(HornetSequelizeEntityDao, _super);
    function HornetSequelizeEntityDao(entity, modelDAO) {
        var _this = _super.call(this, modelDAO) || this;
        if (entity.entityName) {
            throw new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_CONFIGURATION_ERROR, { message: "Entity must have a static entityName property." });
        }
        if (entity.idName) {
            throw new technical_error_1.TechnicalError("ERR_TECH_" + codes_error_1.CodesError.DATASOURCE_CONFIGURATION_ERROR, { message: "Entity must have a static idName property." });
        }
        _this.entity = entity;
        return _this;
    }
    HornetSequelizeEntityDao.prototype.insert = function (data) {
        return this.modelDAO[this.entity.entityName].create(data);
    };
    HornetSequelizeEntityDao.prototype.findAll = function () {
        return this.modelDAO[this.entity.entityName].findAll();
    };
    HornetSequelizeEntityDao.prototype.selectAll = function (selector) {
        return this.modelDAO[this.entity.entityName].findAll({
            where: selector
        });
    };
    HornetSequelizeEntityDao.prototype.selectById = function (id) {
        return this.modelDAO[this.entity.entityName].findOne({
            where: this.computeId(id)
        });
    };
    HornetSequelizeEntityDao.prototype.deleteById = function (id) {
        return this.modelDAO[this.entity.entityName].destroy({ where: this.computeId(id) });
    };
    HornetSequelizeEntityDao.prototype.updateById = function (id, data) {
        return this.modelDAO[this.entity.entityName].update(data, { where: this.computeId(id) });
    };
    HornetSequelizeEntityDao.prototype.computeId = function (id) {
        var where = {};
        where[this.entity.idName] = id;
        return where;
    };
    return HornetSequelizeEntityDao;
}(hornet_sequelize_entity_1.HornetSequelizeEntity));
exports.HornetSequelizeEntityDao = HornetSequelizeEntityDao;

//# sourceMappingURL=hornet-sequelize-entity-dao.js.map
